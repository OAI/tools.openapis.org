- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  repository: https://github.com/tufin/oasdiff
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"6e1d946bbc64fad5b7793f0c886922c082dc6fd04b68c756d29c96ae5ccd35ae"'
    readmeLastModified: Mon, 25 Apr 2022 08:34:43 GMT
    description: A diff tool for OpenAPI Specification 3
    created: "2021-02-10T10:28:36Z"
    updated: "2022-04-14T03:46:32Z"
    language: Go
    archived: false
    stars: 84
    watchers: 84
    forks: 8
    owner: Tufin
    logo: https://avatars.githubusercontent.com/u/5352131?v=4
    license: Apache-2.0
    repoEtag: '"6628556cb500311ca5f51f5826155f563293815fa3c531920d353e871998f7d7"'
    repoLastModified: Thu, 14 Apr 2022 03:46:32 GMT
  foundInMaster: true
  name: oasdiff
  category:
    - Low-level Tooling
  language: Go
  source_description:
    - Diff tool for OpenAPI 3.x specs, written as a Golang module
    - >-
      Golang module for deep comparison of two OpenAPI specifications. Available
      also as a command-line.
  v2: false
  v3_1: true
  homepage: https://github.com/tufin/oasdiff
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: swagger-parser
  homepage: https://github.com/swagger-api/swagger-parser
  language: Java
  source_description:
    - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
    - Swagger Parser reads OpenAPI definitions into current Java POJOs.
  category:
    - Low-level Tooling
    - Parsers
  repository: https://github.com/swagger-api/swagger-parser
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
    readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
    description: Swagger Spec to Java POJOs
    created: "2014-04-21T16:00:22Z"
    updated: "2022-04-25T08:33:55Z"
    language: Java
    archived: false
    stars: 568
    watchers: 568
    forks: 455
    owner: swagger-api
    logo: https://avatars.githubusercontent.com/u/7658037?v=4
    license: Apache-2.0
    repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
    repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: KaiZen OpenAPI Parser
  repository: https://github.com/reprezen/kaizen-openapi-parser
  owner: RepreZen
  category:
    - Low-level Tooling
    - Parsers
  language: Java
  source_description: High-performance Parser, Validator, and Java Object Model for OpenAPI 3.x
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
    readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
    description: High-performance Parser, Validator, and Java Object Model for OpenAPI 3.x
    created: "2017-03-28T02:00:01Z"
    updated: "2022-04-27T04:58:15Z"
    language: Java
    archived: false
    stars: 119
    watchers: 119
    forks: 33
    owner: RepreZen
    logo: https://avatars.githubusercontent.com/u/15205934?v=4
    repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
    repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
  foundInMaster: true
  homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name:
    - openapi3-ts
    - OpenAPI-TS
  homepage: https://github.com/metadevpro/openapi3-ts
  language: TypeScript
  source_description: TS Model & utils for OpenAPI 3.0.x contracts
  category:
    - Low-level Tooling
    - Parsers
  repository: https://github.com/metadevpro/openapi3-ts
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
    readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
    readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
    description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
    created: "2017-03-06T18:47:56Z"
    updated: "2022-04-24T11:05:31Z"
    language: TypeScript
    archived: false
    stars: 270
    watchers: 270
    forks: 47
    owner: metadevpro
    logo: https://avatars.githubusercontent.com/u/24300914?v=4
    license: MIT
    repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
    repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: swagger2openapi
  category:
    - Low-level Tooling
    - Converters
  language:
    - Node.js
    - CLI
  link: https://mermade.org.uk/openapi-converter
  repository: https://github.com/mermade/swagger2openapi
  source_description:
    - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
    - >-
      Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file or
      respecting $refs. Part of oas-kit.
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
    readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
    readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
    description: Convert Swagger 2.0 definitions to OpenAPI 3.0 and resolve/validate/lint
    created: "2016-10-20T13:17:42Z"
    updated: "2022-04-21T02:22:25Z"
    language: JavaScript
    archived: false
    stars: 598
    watchers: 598
    forks: 107
    owner: Mermade
    logo: https://avatars.githubusercontent.com/u/15950345?v=4
    license: BSD-3-Clause
    repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
    repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
  foundInMaster: true
  homepage: https://github.com/mermade/swagger2openapi
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name:
    - odata-openapi
    - OData OpenAPI
  homepage: https://github.com/oasis-tcs/odata-openapi
  language:
    - XSLT
    - Node.js
  source_description:
    - OData 4.0 to OpenAPI 3.0.0 converter
    - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
  category:
    - Low-level Tooling
    - Converters
  repository: https://github.com/oasis-tcs/odata-openapi
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
    readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
    readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
    description: >-
      OASIS OData TC: Tools for producing API descriptions for OData services
      that adhere to the OpenAPI Specification
    created: "2016-11-17T21:11:22Z"
    updated: "2022-04-13T09:09:28Z"
    language: XSLT
    archived: false
    stars: 135
    watchers: 135
    forks: 59
    owner: oasis-tcs
    logo: https://avatars.githubusercontent.com/u/20116735?v=4
    license: NOASSERTION
    repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
    repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
  foundInMaster: true
  v3_1: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: openapi3_parser
  homepage: https://github.com/kevindew/openapi3_parser
  language: Ruby
  source_description:
    - >-
      A Ruby implementation of parser and validator for the OpenAPI 3
      Specification
    - >-
      A Ruby implementation of parser and validator for the OpenAPI 3
      Specification.
  category:
    - Low-level Tooling
    - Parsers
  repository: https://github.com/kevindew/openapi3_parser
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
    readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
    readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
    description: Open API 3 Parser/Validator for Ruby
    created: "2017-10-19T23:33:52Z"
    updated: "2022-04-19T11:38:26Z"
    language: Ruby
    archived: false
    stars: 68
    watchers: 68
    forks: 11
    owner: kevindew
    logo: https://avatars.githubusercontent.com/u/282717?v=4
    license: MIT
    repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
    repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: oas_parser
  homepage: https://github.com/Nexmo/oas_parser
  language: Ruby
  source_description:
    - An open source OpenAPI Spec 3 Definition Parser written in Ruby
    - A Ruby parser for OpenAPI 3.0+ descriptions.
  category:
    - Low-level Tooling
    - Parsers
  repository: https://github.com/nexmo/oas_parser
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuIEFQSSBEZWZpbml0aW9uIFBhcnNlcgoKPGltZyBzcmM9Imh0dHBzOi8vZGV2ZWxvcGVyLm5leG1vLmNvbS9hc3NldHMvaW1hZ2VzL1ZvbmFnZV9OZXhtby5zdmciIGhlaWdodD0iNDhweCIgYWx0PSJOZXhtbyBpcyBub3cga25vd24gYXMgVm9uYWdlIiAvPgoKQSBSdWJ5IHBhcnNlciBmb3IgT3BlbiBBUEkgU3BlYyAzLjArIGRlZmluaXRpb25zLgoKIyMjIEluc3RhbGwKCkluc3RhbGwgdGhlIGdlbToKCmBgYAokIGdlbSBpbnN0YWxsIG9hc19wYXJzZXIKYGBgCgpPciBhZGQgaXQgdG8geW91ciBHZW1maWxlOgoKYGBgcnVieQpnZW0gJ29hc19wYXJzZXInCmBgYAoKIyMjIFVzYWdlCgpIZXJlIGlzIGEgYmFzaWMgZXhhbXBsZSBvZiBob3cgeW91IGNhbiB0cmF2ZXJzZSB0aHJvdWdoIGFuIE9wZW4gQVBJIFNwZWMgMyBEZWZpbml0aW9uOgoKYGBgcnVieQpyZXF1aXJlICdvYXNfcGFyc2VyJwoKZGVmaW5pdGlvbiA9IE9hc1BhcnNlcjo6RGVmaW5pdGlvbi5yZXNvbHZlKCdwZXRzdG9yZS55bWwnKQojID0+ICM8T2FzUGFyc2VyOjpEZWZpbml0aW9uPgoKIyBHZXQgYSBzcGVjaWZpYyBwYXRoCnBhdGggPSBkZWZpbml0aW9uLnBhdGhfYnlfcGF0aCgnL3BldHMnKQojID0+ICM8T2FzUGFyc2VyOjpQYXRoPgoKIyBHZXQgYWxsIHBhdGhzLgpkZWZpbml0aW9uLnBhdGhzCiMgPT4gWyM8T2FzUGFyc2VyOjpQYXRoPiwgLi4uXQoKIyBHZXQgYSBzcGVjaWZpYyBlbmRwb2ludCBieSBtZXRob2QKZW5kcG9pbnQgPSBwYXRoLmVuZHBvaW50X2J5X21ldGhvZCgnZ2V0JykKIyA9PiAjPE9hc1BhcnNlcjo6RW5kcG9pbnQ+CgojIEdldCBhbGwgZW5kcG9pbnRzCnBhdGguZW5kcG9pbnRzCiMgPT4gWyM8T2FzUGFyc2VyOjpFbmRwb2ludD4sIC4uLl0KCiMgR2V0IGVuZHBvaW50IGRlc2NyaXB0aW9uCmVuZHBvaW50LmRlc2NyaXB0aW9uCiMgPT4gIlJldHVybnMgYWxsIHBldHMgZnJvbSB0aGUgc3lzdGVtIHRoYXQgdGhlIHVzZXIgaGFzIGFjY2VzcyB0byIKYGBgCgpDaGVja291dCB0aGUgdGVzdHMgYW5kIGBsaWJgIGRpcmVjdG9yeSBmb3IgbW9yZSBjbGFzc2VzIGFuZCBtZXRob2RzLgoKIyMjIERldmVsb3BtZW50CgpSdW4gdGVzdHM6CgpgYGAKJCByc3BlYwpgYGAKCiMjIyBQdWJsaXNoaW5nCgpDbG9uZSB0aGUgcmVwbyBhbmQgbmF2aWdhdGUgdG8gaXRzIGRpcmVjdG9yeToKCmBgYAokIGNkIG9hcy1wYXJzZXIKYGBgCgpCdW1wIHRoZSBsYXRlc3QgdmVyc2lvbiBpbiBgb2FzX3BhcnNlci9saWIvb2FzX3BhcnNlci92ZXJzaW9uLnJiYDoKCmBgYAovL29sZAptb2R1bGUgT2FzUGFyc2VyCiAgVkVSU0lPTiA9ICcxLjAuMCcuZnJlZXplCmVuZAoKLy9uZXcKbW9kdWxlIE9hc1BhcnNlcgogIFZFUlNJT04gPSAnMS4xLjAnLmZyZWV6ZQplbmQKYGBgCgpCdWlsZCB0aGUgZ2VtOgoKYGBgCiQgZ2VtIGJ1aWxkIG9hc19wYXJzZXIuZ2Vtc3BlYwpgYGAKCl9UaGlzIHdpbGwgY3JlYXRlIGEgYG9hc19wYXJzZXItMS4xLjAuZ2VtYCBmaWxlLl8KClB1c2ggdGhlIGdlbSB0byBydWJ5Z2Vtcy5vcmc6CgpgYGAKJCBnZW0gcHVzaCBvYXNfcGFyc2VyLTEuMS4wLmdlbQpgYGAKClZlcmlmeSB0aGUgY2hhbmdlIHdhcyBtYWRlIGJ5IGNoZWNraW5nIGZvciB0aGUgW25ldyB2ZXJzaW9uIG9uIHJ1YnlnZW1zLm9yZ10oaHR0cHM6Ly9ydWJ5Z2Vtcy5vcmcvZ2Vtcy9vYXNfcGFyc2VyKQoKCgojIyBDb250cmlidXRpbmcKCkNvbnRyaWJ1dGlvbnMgYXJlIHdlbGNvbWUsIHBsZWFzZSBmb2xsb3cgW0dpdEh1YiBGbG93XShodHRwczovL2d1aWRlcy5naXRodWIuY29tL2ludHJvZHVjdGlvbi9mbG93L2luZGV4Lmh0bWwpCg==
    readmeEtag: '"eb202dcc30c7fa40378082ee51b539d0537027a12101afe216427af4dc1750f5"'
    readmeLastModified: Wed, 14 Jul 2021 07:46:33 GMT
    description: An open source Open API Spec 3 Definition Parser
    created: "2017-12-19T18:12:33Z"
    updated: "2022-03-14T08:18:48Z"
    language: Ruby
    archived: false
    stars: 50
    watchers: 50
    forks: 14
    owner: Nexmo
    logo: https://avatars.githubusercontent.com/u/551057?v=4
    license: MIT
    repoEtag: '"d1ea570979d886eadea124d0ebe73a95c15c684f65f26ee529c177e5cbc14ea6"'
    repoLastModified: Mon, 14 Mar 2022 08:18:48 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: oas3-remote-refs
  homepage: https://github.com/OverSpeedIO/oas3-remote-refs
  language: Node.js
  source_description: >-
    Tool to pull remote references and merge them into the definitions of the
    provided OpenAPI3 specification.
  category: Low-Level tooling
  foundInMaster: true
  repository: https://github.com/OverSpeedIO/oas3-remote-refs
  repositoryMetadata:
    notFound: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: kin-openapi
  homepage: https://github.com/getkin/kin-openapi
  language: Go
  source_description:
    - OpenAPI 3.x implementation for Go (parsing, converting, validation)
    - >-
      OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting,
      validation, and more)
  category:
    - Low-level Tooling
    - Parsers
    - Data Validators
  repository: https://github.com/getkin/kin-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"12d0d2022fa2029609d62cda163a9f12ab8693cda29d0363ff1c335c2a10922a"'
    readmeLastModified: Sun, 03 Apr 2022 13:24:54 GMT
    description: >-
      OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting,
      validation, and more)
    created: "2017-06-11T20:12:06Z"
    updated: "2022-04-27T17:01:08Z"
    language: Go
    archived: false
    stars: 1340
    watchers: 1340
    forks: 259
    owner: getkin
    logo: https://avatars.githubusercontent.com/u/40365715?v=4
    license: MIT
    repoEtag: '"b3b83587621406fee6639573421287a42b0267070b2cd7e57d3374becc47c7c7"'
    repoLastModified: Wed, 27 Apr 2022 17:01:08 GMT
  foundInMaster: true
  v2: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: Spectral
  homepage: https://github.com/stoplightio/spectral
  language:
    - TypeScript
    - JavaScript
    - CLI
  source_description:
    - >-
      A flexible JSON object linter with out of the box support for OpenAPI
      Specification 2 and 3
    - >-
      A flexible JSON/YAML object linter with portable "rulesets" and custom
      functions.
  category:
    - Low-level Tooling
    - Description Validators
  link: https://stoplight.io/spectral
  repository: https://github.com/stoplightio/spectral
  v2: true
  v3: true
  v3_1: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"2c1afc7cfc2600d4b2fd2805f76cf1d6e47a4515d5e1eb3a213d19c41ec6a001"'
    readmeLastModified: Wed, 20 Apr 2022 08:08:21 GMT
    description: >-
      A flexible JSON/YAML linter for creating automated style guides, with
      baked in support for OpenAPI v2 & v3.
    created: "2018-08-15T18:43:18Z"
    updated: "2022-04-26T05:29:33Z"
    language: TypeScript
    archived: false
    stars: 1422
    watchers: 1422
    forks: 135
    owner: stoplightio
    logo: https://avatars.githubusercontent.com/u/10767217?v=4
    license: Apache-2.0
    repoEtag: '"f12e5e16cfab3839ca1ad508013f317769a624512adac99eaee32378321556b6"'
    repoLastModified: Tue, 26 Apr 2022 05:29:33 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: openapi-validator
  homepage: https://gitlab.com/mmalawski/openapi-validator
  language: PHP
  source_description: Validates response against OpenAPI schema
  category: Low-Level tooling
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: spring-openapi
  homepage: https://github.com/jrcodeza/spring-openapi
  language: Java
  source_description:
    - >-
      OpenAPI v3 generator for Java Spring. Includes also client generation.
      Supports inheritance with discriminators and Jackson annotations and
      custom interceptors.
    - >-
      OpenAPI v3 generator for Java Spring. Includes also client generation.
      Supports inheritance with discriminators, Jackson annotations and custom
      interceptors.
  category:
    - Low-level Tooling
    - Sdk
  repository: https://github.com/jrcodeza/spring-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"0d41da8a217497e495018698e52e1d1f486f5047396d732d38803dd75f7eef03"'
    readmeLastModified: Tue, 23 Jun 2020 10:13:33 GMT
    description: Spring Boot OpenAPI generator, container and UI.
    created: "2019-07-28T16:13:05Z"
    updated: "2022-04-27T02:41:27Z"
    language: Java
    archived: false
    stars: 39
    watchers: 39
    forks: 14
    owner: jrcodeza
    logo: https://avatars.githubusercontent.com/u/25500422?v=4
    license: MIT
    repoEtag: '"1228bfc204acd0dd28f1a1bdfe0e5242457659ca9d8955e1adc29f694f079e6e"'
    repoLastModified: Wed, 27 Apr 2022 02:41:27 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: Visual Studio Code extension
  homepage: https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi
  language: TypeScript
  source_description: >-
    Extends VS Code to provide OpenAPI 2.0 and 3.0 navigation, code snippets,
    new API creation
  category: Editors
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: Apicurio Studio
  category:
    - Editors
    - Gui Editors
    - Server Implementations
  language:
    - Java
    - TypeScript
    - Angular 7.0
    - Saas
  link: https://www.apicur.io/
  repository: https://github.com/apicurio/apicurio-studio
  source_description:
    - Web-Based **visual designer** for OpenAPI 2.0 and 3.0.0.
    - |
      Web-Based Open Source API Design via the OpenAPI specification.
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IVtWZXJpZnkgQnVpbGQgV29ya2Zsb3ddKGh0dHBzOi8vZ2l0aHViLmNvbS9BcGljdXJpby9hcGljdXJpby1zdHVkaW8vd29ya2Zsb3dzL1ZlcmlmeSUyMEJ1aWxkJTIwV29ya2Zsb3cvYmFkZ2Uuc3ZnKQoKIyBUaGUgYXBpY3VyaW8tc3R1ZGlvIHByb2plY3QgKE9wZW4gU291cmNlIEFQSSBEZXNpZ24gU3R1ZGlvKQoKIyMgU3VtbWFyeQoKVGhpcyBpcyB0aGUgb2ZmaWNpYWwgR2l0IHJlcG9zaXRvcnkgZm9yIHRoZSBhcGljdXJpbyBzdHVkaW8gcHJvamVjdDogIGh0dHA6Ly93d3cuYXBpY3VyLmlvLwoKVGhlIGFwaWN1cmlvIHN0dWRpbyBwcm9qZWN0IGlzIGEgc3RhbmRhbG9uZSBBUEkgZGVzaWduIHN0dWRpbyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZQpuZXcgb3IgZWRpdCBleGlzdGluZyBBUEkgZGVzaWducyAodXNpbmcgdGhlIE9wZW5BUEkgc3BlY2lmaWNhdGlvbikuCgojIyBHZXQgdGhlIGNvZGUKClRoZSBlYXNpZXN0IHdheSB0byBnZXQgc3RhcnRlZCB3aXRoIHRoZSBjb2RlIGlzIHRvIFtjcmVhdGUgeW91ciBvd24gZm9ya10oaHR0cDovL2hlbHAuZ2l0aHViLmNvbS9mb3JraW5nLykKb2YgdGhpcyByZXBvc2l0b3J5LCBhbmQgdGhlbiBjbG9uZSB5b3VyIGZvcms6CmBgYGJhc2gKICAkIGdpdCBjbG9uZSBnaXRAZ2l0aHViLmNvbTo8eW91Pi9hcGljdXJpby1zdHVkaW8uZ2l0CiAgJCBjZCBhcGljdXJpby1zdHVkaW8KICAkIGdpdCByZW1vdGUgYWRkIHVwc3RyZWFtIGdpdDovL2dpdGh1Yi5jb20vYXBpY3VyaW8vYXBpY3VyaW8tc3R1ZGlvLmdpdApgYGAKQXQgYW55IHRpbWUsIHlvdSBjYW4gcHVsbCBjaGFuZ2VzIGZyb20gdGhlIHVwc3RyZWFtIGFuZCBtZXJnZSB0aGVtIG9udG8geW91ciBtYXN0ZXI6CmBgYGJhc2gKICAkIGdpdCBjaGVja291dCBtYXN0ZXIgICAgICAgICAgICAgICAjIHN3aXRjaGVzIHRvIHRoZSAnbWFzdGVyJyBicmFuY2gKICAkIGdpdCBwdWxsIHVwc3RyZWFtIG1hc3RlciAgICAgICAgICAjIGZldGNoZXMgYWxsICd1cHN0cmVhbScgY2hhbmdlcyBhbmQgbWVyZ2VzICd1cHN0cmVhbS9tYXN0ZXInIG9udG8geW91ciAnbWFzdGVyJyBicmFuY2gKICAkIGdpdCBwdXNoIG9yaWdpbiAgICAgICAgICAgICAgICAgICAjIHB1c2hlcyBhbGwgdGhlIHVwZGF0ZXMgdG8geW91ciBmb3JrLCB3aGljaCBzaG91bGQgYmUgaW4tc3luYyB3aXRoICd1cHN0cmVhbScKYGBgClRoZSBnZW5lcmFsIGlkZWEgaXMgdG8ga2VlcCB5b3VyICdtYXN0ZXInIGJyYW5jaCBpbi1zeW5jIHdpdGggdGhlICd1cHN0cmVhbS9tYXN0ZXInLgoKIyMgQnVpbGRpbmcgYXBpY3VyaW8tc3R1ZGlvCgojIyMgUmVxdWlyZW1lbnRzCi0gTWF2ZW4gMy54Ci0gSmF2YSA4IG9yIDExIChyZWNvbW1lbmRlZCkKClRoZSBmb2xsb3dpbmcgY29tbWFuZCBjb21waWxlcyBhbGwgdGhlIGNvZGUsIGluc3RhbGxzIHRoZSBKQVJzIGludG8geW91ciBsb2NhbCBNYXZlbiByZXBvc2l0b3J5LCBhbmQgcnVucyBhbGwgb2YgdGhlIHVuaXQgdGVzdHM6CmBgYGJhc2gKICAkIG12biBjbGVhbiBpbnN0YWxsCmBgYAojIyBRdWlja3N0YXJ0IChpLmUuIEhvdyBUbyBSdW4gSXQpCgpUaGUgZmFzdGVzdCB3YXkgdG8gZ2V0IHN0YXJ0ZWQgdXNpbmcgQXBpY3VyaW8gU3R1ZGlvIGlzIHRvIHVzZSB0aGUgcXVpY2tzdGFydC4gIFRoZSBBcGljdXJpbyBxdWlja3N0YXJ0IGlzIHByb2R1Y2VkIGFzIHBhcnQgCm9mIHRoZSBmdWxsIG1hdmVuIGJ1aWxkIC0geW91IGNhbiBmaW5kIGl0IGluIGBkaXN0cm8vcXVpY2tzdGFydC90YXJnZXRgIGFzIGEgWklQIGZpbGUuICBUbyBzdGFydCB1cCB0aGUgcXVpY2tzdGFydCwgdXNlIHRoZSAKZm9sbG93aW5nIGNvbW1hbmRzIGZyb20gdGhlIHRvcC1sZXZlbCBvZiB0aGUgcmVwb3NpdG9yeToKCmBgYGJhc2gKICAkIHJtIC1yZiAuL2Rpc3Ryby9xdWlja3N0YXJ0L3RhcmdldC9hcGljdXJpby1zdHVkaW8tKi1TTkFQU0hPVAogICQgdW56aXAgZGlzdHJvL3F1aWNrc3RhcnQvdGFyZ2V0L2FwaWN1cmlvLXN0dWRpby0qLXF1aWNrc3RhcnQuemlwIC1kIGRpc3Ryby9xdWlja3N0YXJ0L3RhcmdldAogICQgLi9kaXN0cm8vcXVpY2tzdGFydC90YXJnZXQvYXBpY3VyaW8tc3R1ZGlvLSotU05BUFNIT1QvYmluL3N0YW5kYWxvbmUuc2ggLWMgc3RhbmRhbG9uZS1hcGljdXJpby54bWwKYGBgCgpUaGlzIHdpbGwgc3RhcnQgV2lsZGZseSBvbiB5b3VyIGxvY2FsIG1hY2hpbmUgYW5kIHlvdSBjYW4gYWNjZXNzIHRoZSBVSSBhdCBbaHR0cDovL2xvY2FsaG9zdDo4MDgwXShodHRwOi8vbG9jYWxob3N0OjgwODApLgoKIyMgQ29udHJpYnV0ZSBmaXhlcyBhbmQgZmVhdHVyZXMKCkFwaWN1cmlvIFN0dWRpbyBpcyBvcGVuIHNvdXJjZSwgYW5kIHdlIHdlbGNvbWUgYW55Ym9keSB3aG8gd2FudHMgdG8gcGFydGljaXBhdGUgYW5kIGNvbnRyaWJ1dGUhCgpQbGVhc2UgZm9sbG93IFtTZXR0aW5nIHlvdXIgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRdKGh0dHBzOi8vYXBpY3VyaW8tc3R1ZGlvLnJlYWRtZS5pby9kb2NzL3NldHRpbmctdXAtYS1kZXZlbG9wbWVudC1lbnZpcm9ubWVudCkgZ3VpZGUgdG8gc2V0dXAgeW91ciBsb2NhbCBtYWNoaW5lIGZvciBkZXZlbG9wbWVudC4gIFRoZSBndWlkZSBhc3N1bWVzIHRoZSB1c2Ugb2YgdGhlIEVjbGlwc2UgSURFIGZvciBKYXZhCmRldmVsb3BtZW50IChiYWNrZW5kKSBidXQgaXMgbm90IHJlcXVpcmVkIC0gZGV2ZWxvcGVycyBzaG91bGQgYmUgYWJsZSB0byBhZGFwdCB0aGUgaW5zdHJ1Y3Rpb25zIHRvIHRoZWlyIHBhcnRpY3VsYXIKZW52aXJvbm1lbnQuCkFuIGFkZGl0aW9uYWwgd2F5IHRoYXQgaXMgbGVzcyBkZXBlbmRlbnQgb24gRWNsaXBzZSBpcyBkZXNjcmliZWQgaW4gW3RoaXMgbWFudWFsXShERVZfTU9ERS5tZCkuCgpJZiB5b3Ugd2FudCB0byBmaXggYSBidWcgb3IgbWFrZSBhbnkgY2hhbmdlcywgcGxlYXNlIFtsb2cgYW4gaXNzdWUgaW4gR2l0SHViXShodHRwczovL2dpdGh1Yi5jb20vYXBpY3VyaW8vYXBpY3VyaW8tc3R1ZGlvL2lzc3VlcykgZGVzY3JpYmluZyB0aGUgYnVnCm9yIG5ldyBmZWF0dXJlLiBUaGVuIHdlIGhpZ2hseSByZWNvbW1lbmQgbWFraW5nIHRoZSBjaGFuZ2VzIG9uIGEgdG9waWMgYnJhbmNoIG5hbWVkIHdpdGggdGhlIEpJUkEgaXNzdWUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhpcyBjb21tYW5kIGNyZWF0ZXMKYSBicmFuY2ggZm9yIHRoZSBBUElTVFVESU8tMTIzNCBpc3N1ZToKYGBgYmFzaAogICQgZ2l0IGNoZWNrb3V0IC1iIGFwaWN1cmlvLXN0dWRpby0xMjM0CmBgYApBZnRlciB5b3UncmUgaGFwcHkgd2l0aCB5b3VyIGNoYW5nZXMgYW5kIGEgZnVsbCBidWlsZCAod2l0aCB1bml0IHRlc3RzKSBydW5zIHN1Y2Nlc3NmdWxseSwgY29tbWl0IHlvdXIKY2hhbmdlcyBvbiB5b3VyIHRvcGljIGJyYW5jaC4gVGhlbiBpdCdzIHRpbWUgdG8gY2hlY2sgZm9yIGFuZCBwdWxsIGFueSByZWNlbnQgY2hhbmdlcyB0aGF0IHdlcmUgbWFkZSBpbgp0aGUgb2ZmaWNpYWwgcmVwb3NpdG9yeToKYGBgYmFzaAogICQgZ2l0IGNoZWNrb3V0IG1hc3RlciAgICAgICAgICAgICAgICMgc3dpdGNoZXMgdG8gdGhlICdtYXN0ZXInIGJyYW5jaAogICQgZ2l0IHB1bGwgdXBzdHJlYW0gbWFzdGVyICAgICAgICAgICMgZmV0Y2hlcyBhbGwgJ3Vwc3RyZWFtJyBjaGFuZ2VzIGFuZCBtZXJnZXMgJ3Vwc3RyZWFtL21hc3Rlcicgb250byB5b3VyICdtYXN0ZXInIGJyYW5jaAogICQgZ2l0IGNoZWNrb3V0IGFwaWN1cmlvLXN0dWRpby0xMjM0ICAgIyBzd2l0Y2hlcyB0byB5b3VyIHRvcGljIGJyYW5jaAogICQgZ2l0IHJlYmFzZSBtYXN0ZXIgICAgICAgICAgICAgICAgICMgcmVhcHBsaWVzIHlvdXIgY2hhbmdlcyBvbiB0b3Agb2YgdGhlIGxhdGVzdCBpbiBtYXN0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIChpLmUuLCB0aGUgbGF0ZXN0IGZyb20gbWFzdGVyIHdpbGwgYmUgdGhlIG5ldyBiYXNlIGZvciB5b3VyIGNoYW5nZXMpCmBgYApJZiB0aGUgcHVsbCBncmFiYmVkIGEgbG90IG9mIGNoYW5nZXMsIHlvdSBzaG91bGQgcmVydW4geW91ciBidWlsZCB0byBtYWtlIHN1cmUgeW91ciBjaGFuZ2VzIGFyZSBzdGlsbCBnb29kLgpZb3UgY2FuIHRoZW4gZWl0aGVyIFtjcmVhdGUgcGF0Y2hlc10oaHR0cDovL3Byb2dpdC5vcmcvYm9vay9jaDUtMi5odG1sKSAob25lIGZpbGUgcGVyIGNvbW1pdCwgc2F2ZWQgaW4gYH4vYXBpY3VyaW8tc3R1ZGlvLTEyMzRgKSB3aXRoCmBgYGJhc2gKICAkIGdpdCBmb3JtYXQtcGF0Y2ggLU0gLW8gfi9hcGljdXJpby1zdHVkaW8tMTIzNCBvcmdpbi9tYXN0ZXIKYGBgCmFuZCB1cGxvYWQgdGhlbSB0byB0aGUgSklSQSBpc3N1ZSwgb3IgeW91IGNhbiBwdXNoIHlvdXIgdG9waWMgYnJhbmNoIGFuZCBpdHMgY2hhbmdlcyBpbnRvIHlvdXIgcHVibGljIGZvcmsgcmVwb3NpdG9yeQpgYGBiYXNoCiAgJCBnaXQgcHVzaCBvcmlnaW4gYXBpY3VyaW8tc3R1ZGlvLTEyMzQgICAgICAgICAjIHB1c2hlcyB5b3VyIHRvcGljIGJyYW5jaCBpbnRvIHlvdXIgcHVibGljIGZvcmsgb2YgYXBpY3VyaW8tc3R1ZGlvCmBgYAphbmQgW2dlbmVyYXRlIGEgcHVsbC1yZXF1ZXN0XShodHRwOi8vaGVscC5naXRodWIuY29tL3B1bGwtcmVxdWVzdHMvKSBmb3IgeW91ciBjaGFuZ2VzLgoKV2UgcHJlZmVyIHB1bGwtcmVxdWVzdHMsIGJlY2F1c2Ugd2UgY2FuIHJldmlldyB0aGUgcHJvcG9zZWQgY2hhbmdlcywgY29tbWVudCBvbiB0aGVtLApkaXNjdXNzIHRoZW0gd2l0aCB5b3UsIGFuZCBsaWtlbHkgbWVyZ2UgdGhlIGNoYW5nZXMgcmlnaHQgaW50byB0aGUgb2ZmaWNpYWwgcmVwb3NpdG9yeS4KClBsZWFzZSB0cnkgdG8gY3JlYXRlIG9uZSBjb21taXQgcGVyIGZlYXR1cmUgb3IgZml4LCBnZW5lcmFsbHkgdGhlIGVhc2llc3Qgd2F5IHRvIGRvIHRoaXMgaXMgdmlhIFtnaXQgc3F1YXNoXShodHRwczovL2dpdC1zY20uY29tL2Jvb2svZW4vdjIvR2l0LVRvb2xzLVJld3JpdGluZy1IaXN0b3J5I1NxdWFzaGluZy1Db21taXRzKS4KVGhpcyBtYWtlcyByZXZlcnRpbmcgY2hhbmdlcyBlYXNpZXIsIGFuZCBhdm9pZHMgbmVlZGxlc3NseSBwb2xsdXRpbmcgdGhlIHJlcG9zaXRvcnkgaGlzdG9yeSB3aXRoIGNoZWNrcG9pbnQgY29tbWl0cy4KCiMjIENvZGUgRm9ybWF0dGluZwoKV2hlbiB5b3UgYXJlIGhhY2tpbmcgb24gc29tZSBhcGljdXJpby1zdHVkaW8gY29kZSwgd2UnZCByZWFsbHkgYXBwcmVjaWF0ZSBpdCBpZiB5b3UgZm9sbG93ZWQgdGhlCmFwaWN1cmlvLXN0dWRpbyBjb2Rpbmcgc3RhbmRhcmRzLiAgSWYgeW91J3JlIHVzaW5nIEVjbGlwc2UsIHlvdSBjYW4gZmluZCBhIGNvZGUgZm9ybWF0dGVyIGNvbmZpZwpmaWxlIGhlcmU6CmBgYAp0b29scy9zcmMvZWNsaXBzZS9hcGljdXJpby1lY2xpcHNlLWZvcm1hdHRlci54bWwKYGBgCllvdSBzaG91bGQgYmUgYWJsZSB0byBpbXBvcnQgdGhhdCBndXkgc3RyYWlnaHQgaW50byBFY2xpcHNlIGJ5IGdvaW5nIHRvCipXaW5kb3ctPlByZWZlcmVuY2VzIDo6IEphdmEvQ29kZSBTdHlsZS9Gb3JtYXR0ZXIqCg==
    readmeEtag: '"8818b45e2c9bc7c91c428b398e8e9bb25df41b8f628a9e8bb9b1c432d5d48672"'
    readmeLastModified: Thu, 14 Apr 2022 16:43:33 GMT
    description: Open Source API Design
    created: "2016-09-29T18:22:33Z"
    updated: "2022-04-27T09:54:06Z"
    language: TypeScript
    archived: false
    stars: 751
    watchers: 751
    forks: 386
    owner: Apicurio
    logo: https://avatars.githubusercontent.com/u/28107283?v=4
    license: Apache-2.0
    repoEtag: '"138573d132d854ce655e6ee77ec066c444cb4aabc84085dd773037d2444324fc"'
    repoLastModified: Wed, 27 Apr 2022 09:54:06 GMT
  foundInMaster: true
  homepage: https://github.com/Apicurio/apicurio-studio
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name:
    - KaiZen OpenAPI Editor
    - KaiZen-OpenAPI-Editor
  homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Editor
  language: Java
  source_description:
    - Eclipse Editor for OpenAPI 2.0 and 3.0
    - >-
      Full-featured Eclipse editor for OpenAPI, also available on Eclipse
      Marketplace.
  category:
    - Editors
    - Text Editors
    - Parsers
  license: EPL
  repository: https://github.com/reprezen/kaizen-openapi-editor
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: Eclipse Editor for the Swagger-OpenAPI Description Language
    created: "2015-09-30T21:30:07Z"
    updated: "2021-12-31T02:40:29Z"
    language: Java
    archived: false
    stars: 100
    watchers: 100
    forks: 9
    owner: RepreZen
    logo: https://avatars.githubusercontent.com/u/15205934?v=4
    license: EPL-1.0
    repoEtag: '"dd9dcbc8f62ea9917e2e65d63bb77eabbbd9f1a629f58ed02735d9655ea52ac8"'
    repoLastModified: Wed, 02 Feb 2022 18:59:56 GMT
    readmeEtag: '"d825e007c3d48b140e88972742c0e972f9d7283a2104017cb7323c18500c1e3a"'
    readmeLastModified: Tue, 17 Sep 2019 12:33:47 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: RepreZen API Studio
  homepage: https://www.reprezen.com/OpenAPI
  language: Java
  source_description: Commercial desktop IDE for API design, documentation & development
  category: Editors
  foundInMaster: true
  readme: null
- source: IMPLEMENTATIONS.md
  name: SwaggerHub
  homepage: https://swaggerhub.com
  language:
    - API Design and Documentation Platform
    - Built For Teams
  category: Editors
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name:
    - swagger-editor
    - Swagger Editor
  homepage: https://github.com/swagger-api/swagger-editor
  language:
    - JavaScript
    - Node.js
  source_description:
    - >-
      Web-Based editor for creating, editing, validating and testing
      OpenAPI\Swagger definitions
    - >-
      Design, describe, and document your API on the first open source editor
      fully dedicated to OpenAPI-based APIs.
  category:
    - Editors
    - Text Editors
    - Server Implementations
  repository: https://github.com/swagger-api/swagger-editor
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyA8aW1nIHNyYz0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N3YWdnZXItYXBpL3N3YWdnZXIuaW8vd29yZHByZXNzL2ltYWdlcy9hc3NldHMvU1dFLWxvZ28tY2xyLnBuZyIgaGVpZ2h0PSI4MCI+ClshW05QTSB2ZXJzaW9uXShodHRwczovL2JhZGdlLmZ1cnkuaW8vanMvc3dhZ2dlci11aS5zdmcpXShodHRwOi8vYmFkZ2UuZnVyeS5pby9qcy9zd2FnZ2VyLWVkaXRvcikKWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2plbmtpbnMuc3dhZ2dlci5pby9idWlsZFN0YXR1cy9pY29uP2pvYj1vc3Mtc3dhZ2dlci1lZGl0b3ItbWFzdGVyKV0oaHR0cHM6Ly9qZW5raW5zLnN3YWdnZXIuaW8vam9iL29zcy1zd2FnZ2VyLWVkaXRvci1tYXN0ZXIvKQpbIVtDb2RlIENsaW1hdGVdKGh0dHBzOi8vY29kZWNsaW1hdGUuY29tL2dpdGh1Yi9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWVkaXRvci9iYWRnZXMvZ3BhLnN2ZyldKGh0dHBzOi8vY29kZWNsaW1hdGUuY29tL2dpdGh1Yi9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWVkaXRvcikKWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2plbmtpbnMuc3dhZ2dlci5pby92aWV3L09TUyUyMC0lMjBKYXZhU2NyaXB0L2pvYi9vc3Mtc3dhZ2dlci1lZGl0b3ItbWFzdGVyL2JhZGdlL2ljb24/c3ViamVjdD1qZW5raW5zJTIwYnVpbGQpXShodHRwczovL2plbmtpbnMuc3dhZ2dlci5pby92aWV3L09TUyUyMC0lMjBKYXZhU2NyaXB0L2pvYi9vc3Mtc3dhZ2dlci1lZGl0b3ItbWFzdGVyLykKCioq8J+VsO+4jyBMb29raW5nIGZvciB0aGUgb2xkZXIgdmVyc2lvbiBvZiBTd2FnZ2VyIEVkaXRvcj8qKiBSZWZlciB0byB0aGUgWyoyLngqIGJyYW5jaF0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItZWRpdG9yL3RyZWUvMi54KS4KClN3YWdnZXIgRWRpdG9yIGxldHMgeW91IGVkaXQgW09wZW5BUEkgQVBJIGRlZmluaXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21haW4vdmVyc2lvbnMvMy4wLjMubWQpIGluIFlBTUwgaW5zaWRlIHlvdXIgYnJvd3NlciBhbmQgdG8gcHJldmlldyBkb2N1bWVudGF0aW9ucyBpbiByZWFsIHRpbWUuClZhbGlkIFN3YWdnZXIgSlNPTiBkZXNjcmlwdGlvbnMgY2FuIHRoZW4gYmUgZ2VuZXJhdGVkIGFuZCB1c2VkIHdpdGggdGhlIGZ1bGwgU3dhZ2dlciB0b29saW5nIChjb2RlIGdlbmVyYXRpb24sIGRvY3VtZW50YXRpb24sIGV0YykuCgpBcyBhIGJyYW5kIG5ldyB2ZXJzaW9uLCB3cml0dGVuIGZyb20gdGhlIGdyb3VuZCB1cCwgdGhlcmUgYXJlIHNvbWUga25vd24gaXNzdWVzIGFuZCB1bmltcGxlbWVudGVkIGZlYXR1cmVzLiBDaGVjayBvdXQgdGhlIFtLbm93biBJc3N1ZXNdKCNrbm93bi1pc3N1ZXMpIHNlY3Rpb24gZm9yIG1vcmUgZGV0YWlscy4KClRoaXMgcmVwb3NpdG9yeSBwdWJsaXNoZXMgdG8gdHdvIGRpZmZlcmVudCBOUE0gbW9kdWxlczoKCiogW3N3YWdnZXItZWRpdG9yXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9zd2FnZ2VyLWVkaXRvcikgaXMgYSB0cmFkaXRpb25hbCBucG0gbW9kdWxlIGludGVuZGVkIGZvciB1c2UgaW4gc2luZ2xlLXBhZ2UgYXBwbGljYXRpb25zIHRoYXQgYXJlIGNhcGFibGUgb2YgcmVzb2x2aW5nIGRlcGVuZGVuY2llcyAodmlhIFdlYnBhY2ssIEJyb3dzZXJpZnksIGV0YykuCiogW3N3YWdnZXItZWRpdG9yLWRpc3RdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3N3YWdnZXItZWRpdG9yLWRpc3QpIGlzIGEgZGVwZW5kZW5jeS1mcmVlIG1vZHVsZSB0aGF0IGluY2x1ZGVzIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gc2VydmUgU3dhZ2dlciBFZGl0b3IgaW4gYSBzZXJ2ZXItc2lkZSBwcm9qZWN0LCBvciBhIHdlYiBwcm9qZWN0IHRoYXQgY2FuJ3QgcmVzb2x2ZSBucG0gbW9kdWxlIGRlcGVuZGVuY2llcy4KCklmIHlvdSdyZSBidWlsZGluZyBhIHNpbmdsZS1wYWdlIGFwcGxpY2F0aW9uLCB1c2luZyBgc3dhZ2dlci1lZGl0b3JgIGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkLCBzaW5jZSBgc3dhZ2dlci1lZGl0b3ItZGlzdGAgaXMgc2lnbmlmaWNhbnRseSBsYXJnZXIuCgpGb3IgdGhlIG9sZGVyIHZlcnNpb24gb2Ygc3dhZ2dlci1lZGl0b3IsIHJlZmVyIHRvIHRoZSBbKjIueCBicmFuY2gqXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1lZGl0b3IvdHJlZS8yLngpLgoKIyMgSGVscGZ1bCBzY3JpcHRzCgpBbnkgb2YgdGhlIHNjcmlwdHMgYmVsb3cgY2FuIGJlIHJ1biBieSB0eXBpbmcgYG5wbSBydW4gPHNjcmlwdCBuYW1lPmAgaW4gdGhlIHByb2plY3QncyByb290IGRpcmVjdG9yeS4KCiMjIyBEZXZlbG9waW5nClNjcmlwdCBuYW1lIHwgRGVzY3JpcHRpb24KLS0tIHwgLS0tCmBkZXZgIHwgU3Bhd24gYSBob3QtcmVsb2FkaW5nIGRldiBzZXJ2ZXIgb24gcG9ydCAzMjAwLgpgZGVwcy1jaGVja2AgfCBHZW5lcmF0ZSBhIHNpemUgYW5kIGxpY2Vuc2luZyByZXBvcnQgb24gU3dhZ2dlciBFZGl0b3JzJ3MgZGVwZW5kZW5jaWVzLgpgbGludGAgfCBSZXBvcnQgRVNMaW50IHN0eWxlIGVycm9ycyBhbmQgd2FybmluZ3MuCmBsaW50LWVycm9yc2AgfCBSZXBvcnQgRVNMaW50IHN0eWxlIGVycm9ycywgd2l0aG91dCB3YXJuaW5ncy4KYGxpbnQtZml4YCB8IEF0dGVtcHQgdG8gZml4IHN0eWxlIGVycm9ycyBhdXRvbWF0aWNhbGx5Lgpgd2F0Y2hgIHwgUmVidWlsZCB0aGUgY29yZSBmaWxlcyBpbiBgL2Rpc3RgIHdoZW4gdGhlIHNvdXJjZSBjb2RlIGNoYW5nZXMuIFVzZWZ1bCBmb3IgYG5wbSBsaW5rYC4KCiMjIyBCdWlsZGluZwpTY3JpcHQgbmFtZSB8IERlc2NyaXB0aW9uCi0tLSB8IC0tLQpgYnVpbGRgIHwgQnVpbGQgYSBuZXcgc2V0IG9mIEpTIGFuZCBDU1MgYXNzZXRzLCBhbmQgb3V0cHV0IHRoZW0gdG8gYC9kaXN0YC4KYGJ1aWxkOmJ1bmRsZWAgfCBCdWlsZCBgc3dhZ2dlci1lZGl0b3ItYnVuZGxlLmpzYCBvbmx5IChjb21tb25KUykuCmBidWlsZDpjb3JlYCB8IEJ1aWxkIGBzd2FnZ2VyLWVkaXRvci4oanNcfGNzcylgIG9ubHkgKGNvbW1vbkpTKS4KYGJ1aWxkOnN0YW5kYWxvbmVgIHwgQnVpbGQgYHN3YWdnZXItZWRpdG9yLXN0YW5kYWxvbmUtcHJlc2V0LmpzYCBvbmx5IChjb21tb25KUykuCmBidWlsZDpzdHlsZXNoZWV0c2AgfCBCdWlsZCBgc3dhZ2dlci1lZGl0b3IuY3NzYCBvbmx5LgpgYnVpbGQ6ZXM6YnVuZGxlYCB8IEJ1aWxkIGBzd2FnZ2VyLWVkaXRvci1lcy1idW5kbGUuanNgIG9ubHkgKGVzMjAxNSkuCmBidWlsZDplczpidW5kbGU6Y29yZWAgfCBCdWlsZCBgc3dhZ2dlci1lZGl0b3ItZXMtYnVuZGxlLWNvcmUuanNgIG9ubHkgKGVzMjAxNSkuCgojIyMgVGVzdGluZwpTY3JpcHQgbmFtZSB8IERlc2NyaXB0aW9uCi0tLSB8IC0tLQpgdGVzdGAgfCBSdW4gdW5pdCB0ZXN0cyBpbiBOb2RlLCBydW4gQ3lwcmVzcyBlbmQtdG8tZW5kIHRlc3RzLCBhbmQgcnVuIEVTTGludCBpbiBlcnJvcnMtb25seSBtb2RlLgpgdGVzdDp1bml0LW1vY2hhYCB8IFJ1biBNb2NoYS1iYXNlZCB1bml0IHRlc3RzIGluIE5vZGUuCmB0ZXN0OnVuaXQtamVzdGAgfCBSdW4gSmVzdC1iYXNlZCB1bml0IHRlc3RzIGluIE5vZGUuCmBlMmVgIHwgUnVuIGVuZC10by1lbmQgYnJvd3NlciB0ZXN0cyB3aXRoIEN5cHJlc3MuCmBsaW50YCB8IFJ1biBFU0xpbnQgdGVzdApgdGVzdDphcnRpZmFjdGAgfCBSdW4gbGlzdCBvZiBidW5kbGUgYXJ0aWZhY3QgdGVzdHMgaW4gSmVzdApgdGVzdDphcnRpZmFjdDp1bWQ6YnVuZGxlYCB8IFJ1biB1bml0IHRlc3QgdGhhdCBjb25maXJtcyBgc3dhZ2dlci1lZGl0b3ItYnVuZGxlYCBleHBvcnRzIGFzIGEgRnVuY3Rpb24KYHRlc3Q6YXJ0aWZhY3Q6ZXM6YnVuZGxlYCB8IFJ1biB1bml0IHRlc3QgdGhhdCBjb25maXJtcyBgc3dhZ2dlci1lZGl0b3ItZXMtYnVuZGxlYCBleHBvcnRzIGFzIGEgRnVuY3Rpb24KYHRlc3Q6YXJ0aWZhY3Q6ZXM6YnVuZGxlOmNvcmVgIHwgUnVuIHVuaXQgdGVzdCB0aGF0IGNvbmZpcm1zIGBzd2FnZ2VyLWVkaXRvci1lcy1idW5kbGUtY29yZWAgZXhwb3J0cyBhcyBhIEZ1bmN0aW9uCgoKIyMgUnVubmluZyBsb2NhbGx5CgojIyMjIyBQcmVyZXF1aXNpdGVzCgotIE5QTSA+PTcueAoKR2VuZXJhbGx5LCB3ZSByZWNvbW1lbmQgdGhlIGZvbGxvd2luZyBndWlkZWxpbmVzIGZyb20gW05vZGUuanMgUmVsZWFzZXNdKGh0dHBzOi8vbm9kZWpzLm9yZy9lbi9hYm91dC9yZWxlYXNlcy8pIHRvIG9ubHkgdXNlIEFjdGl2ZSBMVFMgb3IgTWFpbnRlbmFuY2UgTFRTIHJlbGVhc2VzLgoKQ3VycmVudCBOb2RlLmpzOgotIE5vZGUuanMgMTYueAotIE5QTSA+PTcuMTAueAoKQ3VycmVudCBOb2RlLmpzIEFjdGl2ZSBMVFM6Ci0gTm9kZS5qcyAxNC54Ci0gTlBNID49Ny54LngKCgpJZiB5b3UgaGF2ZSBOb2RlLmpzIGFuZCBucG0gaW5zdGFsbGVkLCB5b3UgY2FuIHJ1biBgbnBtIHN0YXJ0YCB0byBzcGluIHVwIGEgc3RhdGljIHNlcnZlci4KCk90aGVyd2lzZSwgeW91IGNhbiBvcGVuIGBpbmRleC5odG1sYCBkaXJlY3RseSBmcm9tIHlvdXIgZmlsZXN5c3RlbSBpbiB5b3VyIGJyb3dzZXIuCgpJZiB5b3UnZCBsaWtlIHRvIG1ha2UgY29kZSBjaGFuZ2VzIHRvIFN3YWdnZXIgRWRpdG9yLCB5b3UgY2FuIHN0YXJ0IHVwIGEgV2VicGFjayBob3QtcmVsb2FkaW5nIGRldiBzZXJ2ZXIgdmlhIGBucG0gcnVuIGRldmAuCgojIyMjIyBCcm93c2VyIHN1cHBvcnQKClN3YWdnZXIgRWRpdG9yIHdvcmtzIGluIHRoZSBsYXRlc3QgdmVyc2lvbnMgb2YgQ2hyb21lLCBTYWZhcmksIEZpcmVmb3gsIGFuZCBFZGdlLgoKIyMjIEtub3duIElzc3VlcwoKVG8gaGVscCB3aXRoIHRoZSBtaWdyYXRpb24sIGhlcmUgYXJlIHRoZSBjdXJyZW50bHkga25vd24gaXNzdWVzIHdpdGggMy5YLiBUaGlzIGxpc3Qgd2lsbCB1cGRhdGUgcmVndWxhcmx5LCBhbmQgd2lsbCBub3QgaW5jbHVkZSBmZWF0dXJlcyB0aGF0IHdlcmUgbm90IGltcGxlbWVudGVkIGluIHByZXZpb3VzIHZlcnNpb25zLgoKLSBFdmVyeXRoaW5nIGxpc3RlZCBpbiBbU3dhZ2dlciBVSSdzIEtub3duIElzc3Vlc10oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI2tub3duLWlzc3VlcykuCi0gVGhlIGludGVncmF0aW9uIHdpdGggdGhlIGNvZGVnZW4gaXMgc3RpbGwgbWlzc2luZy4KCiMjIERvY2tlcgoKIyMjIFJ1bm5pbmcgdGhlIGltYWdlIGZyb20gRG9ja2VySHViClRoZXJlIGlzIGEgZG9ja2VyIGltYWdlIHB1Ymxpc2hlZCBpbiBbRG9ja2VySHViXShodHRwczovL2h1Yi5kb2NrZXIuY29tL3Ivc3dhZ2dlcmFwaS9zd2FnZ2VyLWVkaXRvci8pLgoKVG8gdXNlIHRoaXMsIHJ1biB0aGUgZm9sbG93aW5nOgoKYGBgCmRvY2tlciBwdWxsIHN3YWdnZXJhcGkvc3dhZ2dlci1lZGl0b3IKZG9ja2VyIHJ1biAtZCAtcCA4MDo4MDgwIHN3YWdnZXJhcGkvc3dhZ2dlci1lZGl0b3IKYGBgCgpUaGlzIHdpbGwgcnVuIFN3YWdnZXIgRWRpdG9yIChpbiBkZXRhY2hlZCBtb2RlKSBvbiBwb3J0IDgwIG9uIHlvdXIgbWFjaGluZSwgc28geW91IGNhbiBvcGVuIGl0IGJ5IG5hdmlnYXRpbmcgdG8gYGh0dHA6Ly9sb2NhbGhvc3RgIGluIHlvdXIgYnJvd3Nlci4gIAoKKiBZb3UgY2FuIHByb3ZpZGUgYSBVUkwgcG9pbnRpbmcgdG8gYW4gQVBJIGRlZmluaXRpb24gKG1heSBub3QgYmUgYXZhaWxhYmxlIGlmIHNvbWUgc2VjdXJpdHkgcG9saWNpZXMgc3VjaCBhcyBDU1Agb3IgQ09SUyBhcmUgZW5mb3JjZWQpOgoKYGBgCmRvY2tlciBydW4gLWQgLXAgODA6ODA4MCAtZSBVUkw9Imh0dHBzOi8vcGV0c3RvcmUzLnN3YWdnZXIuaW8vYXBpL3YzL29wZW5hcGkuanNvbiIgc3dhZ2dlcmFwaS9zd2FnZ2VyLWVkaXRvcgpgYGAKCiogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIGBqc29uYCBvciBgeWFtbGAgZGVmaW5pdGlvbiBmaWxlIGZyb20geW91ciBsb2NhbCBob3N0OgoKYGBgCmRvY2tlciBydW4gLWQgLXAgODA6ODA4MCAtdiAkKHB3ZCk6L3RtcCAtZSBTV0FHR0VSX0ZJTEU9L3RtcC9zd2FnZ2VyLmpzb24gc3dhZ2dlcmFwaS9zd2FnZ2VyLWVkaXRvcgpgYGAKCioqTm90ZToqKiBXaGVuIGJvdGggYFVSTGAgYW5kIGBTV0FHR0VSX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0LCBgVVJMYCBoYXMgcHJpb3JpdHkgYW5kIGBTV0FHR0VSX0ZJTEVgIGlzIGlnbm9yZWQuCgoqIFlvdSBjYW4gc3BlY2lmeSBhIGRpZmZlcmVudCBiYXNlIHVybCBmb3IgYWNjZXNzaW5nIHRoZSBhcHBsaWNhdGlvbiAtIGZvciBleGFtcGxlIGlmIHlvdSB3YW50IHRoZSBhcHBsaWNhdGlvbiB0byBiZSBhdmFpbGFibGUgYXQgYGh0dHA6Ly9sb2NhbGhvc3Qvc3dhZ2dlci1lZGl0b3IvYDoKCmBgYApkb2NrZXIgcnVuIC1kIC1wIDgwOjgwODAgLWUgQkFTRV9VUkw9L3N3YWdnZXItZWRpdG9yIHN3YWdnZXJhcGkvc3dhZ2dlci1lZGl0b3IKYGBgCgpZb3UgY2FuIGFsc28gY3VzdG9taXplIHRoZSBkaWZmZXJlbnQgZW5kcG9pbnRzIHVzZWQgYnkgdGhlIFN3YWdnZXIgRWRpdG9yIHdpdGggdGhlIGZvbGxvd2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIEZvciBpbnN0YW5jZSwgdGhpcyBjYW4gYmUgdXNlZnVsIGlmIHlvdSBoYXZlIHlvdXIgb3duIFN3YWdnZXIgZ2VuZXJhdG9yIHNlcnZlcjoKCkVudmlyb25tZW50IHZhcmlhYmxlIHwgRGVmYXVsdCB2YWx1ZQotLS0gfCAtLS0KYFVSTF9TV0FHR0VSMl9HRU5FUkFUT1JgIHwgYGh0dHBzOi8vZ2VuZXJhdG9yLnN3YWdnZXIuaW8vYXBpL3N3YWdnZXIuanNvbmAKYFVSTF9PQVMzX0dFTkVSQVRPUmAgfCBgaHR0cHM6Ly9nZW5lcmF0b3IzLnN3YWdnZXIuaW8vb3BlbmFwaS5qc29uYApgVVJMX1NXQUdHRVIyX0NPTlZFUlRFUmAgfCBgaHR0cHM6Ly9jb252ZXJ0ZXIuc3dhZ2dlci5pby9hcGkvY29udmVydGAKCklmIHlvdSB3YW50IHRvIHJ1biB0aGUgU3dhZ2dlciBFZGl0b3IgbG9jYWxseSB3aXRob3V0IHRoZSBDb2RlZ2VuIGZlYXR1cmVzIChHZW5lcmF0ZSBTZXJ2ZXIgYW5kIEdlbmVyYXRlIENsaWVudCkgeW91IGNhbiBzZXQgdGhlIGFib3ZlIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBgbnVsbGAgKGBVUkxfU1dBR0dFUjJfQ09OVkVSVEVSPW51bGxgKS4KCiMjIyBCdWlsZGluZyBhbmQgcnVubmluZyBhbiBpbWFnZSBsb2NhbGx5CgpUbyBidWlsZCBhbmQgcnVuIGEgZG9ja2VyIGltYWdlIHdpdGggdGhlIGNvZGUgY2hlY2tlZCBvdXQgb24geW91ciBtYWNoaW5lLCBydW4gdGhlIGZvbGxvd2luZyBmcm9tIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcHJvamVjdDoKCmBgYAojIEluc3RhbGwgbnBtIHBhY2thZ2VzIChpZiBuZWVkZWQpCm5wbSBpbnN0YWxsCgojIEJ1aWxkIHRoZSBhcHAKbnBtIHJ1biBidWlsZAoKIyBCdWlsZCBhbiBpbWFnZQpkb2NrZXIgYnVpbGQgLXQgc3dhZ2dlci1lZGl0b3IgLgoKIyBSdW4gdGhlIGNvbnRhaW5lcgpkb2NrZXIgcnVuIC1kIC1wIDgwOjgwODAgc3dhZ2dlci1lZGl0b3IKYGBgCgpZb3UgY2FuIHRoZW4gdmlldyB0aGUgYXBwIGJ5IG5hdmlnYXRpbmcgdG8gYGh0dHA6Ly9sb2NhbGhvc3RgIGluIHlvdXIgYnJvd3Nlci4KCiMjIERvY3VtZW50YXRpb24KCiogW0ltcG9ydGluZyB5b3VyIE9wZW5BUEkgZG9jdW1lbnRdKGRvY3MvaW1wb3J0Lm1kKQoKKiBbQ29udHJpYnV0aW5nXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvLmdpdGh1Yi9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQpCgojIyBTZWN1cml0eSBjb250YWN0CgpQbGVhc2UgZGlzY2xvc2UgYW55IHNlY3VyaXR5LXJlbGF0ZWQgaXNzdWVzIG9yIHZ1bG5lcmFiaWxpdGllcyBieSBlbWFpbGluZyBbc2VjdXJpdHlAc3dhZ2dlci5pb10obWFpbHRvOnNlY3VyaXR5QHN3YWdnZXIuaW8pLCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBwdWJsaWMgaXNzdWUgdHJhY2tlci4K
    readmeEtag: '"1547dfef5d0cdd766fbf5eab2ba01d1b866ec4362677d6ce3a815638ac39971c"'
    readmeLastModified: Thu, 21 Apr 2022 14:32:37 GMT
    description: Swagger Editor
    created: "2014-05-02T22:47:10Z"
    updated: "2022-04-28T09:39:57Z"
    language: JavaScript
    archived: false
    stars: 7573
    watchers: 7573
    forks: 2036
    owner: swagger-api
    logo: https://avatars.githubusercontent.com/u/7658037?v=4
    license: Apache-2.0
    repoEtag: '"1088a0ffc894ab87fb961cccfa0ccecac7189504d6e7d973fdbb5b845d00c9b6"'
    repoLastModified: Thu, 28 Apr 2022 09:39:57 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: Remain OpenAPI Studio
  homepage: >-
    https://remainsoftware.com/extranet/download-type/openapi-studio-download
    <br> Or via Eclipse MarketPlace
    https://marketplace.eclipse.org/content/openapi-studio-rich-oas3-editor
  language: Java
  source_description: >-
    A user-friendly, visually rich studio supporting all features defined by the
    OpenAPI 3. Easy but powerful UI-based components creation, API testing,
    import, export, code generation and much more.
  category: Editors
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: openapi-viewer
  homepage: https://github.com/koumoul-dev/openapi-viewer
  language: Vue.js
  source_description:
    - Browse and test a REST API described with the OpenAPI 3.0 Specification.
    - Browse and test a REST API described with the OpenAPI 3.0 Specification
  category:
    - User Interfaces
    - Documentation
    - Parsers
  link: https://koumoul.com/openapi-viewer/
  repository: https://github.com/koumoul-dev/openapi-viewer
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIDMgdmlld2VyCgpUaGlzIHNlcnZpY2UgaXMgZGVzaWduZWQgdG8gZWFzaWx5IGJyb3dzZSBhbmQgdGVzdCBhIFJFU1QgQVBJIGRlc2NyaWJlZCB3aXRoIHRoZSBbT3BlbkFQSSAzLjAgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24pIChma2EgU3dhZ2dlciBTcGVjaWZpY2F0aW9uKS4gVGhpcyBzZXJ2aWNlIG1haW5seSB1c2VzIFt2dWUtb3BlbmFwaV0oaHR0cHM6Ly9naXRodWIuY29tL2tvdW1vdWwtZGV2L3Z1ZS1vcGVuYXBpKSBjb21wb25lbnQuIEl0IGFsc28gcHJvdmlkZXMgYSBzaW1wbGUgbm9kZUpTIGJhY2tlbmQgZm9yIHByb3h5IHB1cnBvc2UuCgpTZWUgaXQgaW4gYWN0aW9uIDoKICogaHR0cHM6Ly9rb3Vtb3VsLmNvbS9vcGVuYXBpLXZpZXdlci8KCiMjIFN1cHBvcnRzCgpbPGltZyBzcmM9Imh0dHBzOi8va291bW91bC5jb20vc3RhdGljL2xvZ28tc2xvZ2FuLWFsaWduZWQucG5nIiB0aXRsZT0iS291bW91bCIgaGVpZ2h0PSI2MCI+XShodHRwczovL2tvdW1vdWwuY29tKQoKWzxpbWcgc3JjPSJodHRwczovL3d3dy5kYXdpenouZnIvd3AtY29udGVudC91cGxvYWRzLzIwMTgvMDQvbG9nby1EYXdpenotYWxsLWFib3V0LXlvdXItZGF0YS1ob21lLnBuZyIgdGl0bGU9IkRhd2l6eiIgaGVpZ2h0PSI1MCI+XShodHRwczovL2Rhd2l6ei5mcikKCiMjIEluc3RhbGwKCkNsb25lIHRoaXMgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXMgd2l0aCBgbnBtIGluc3RhbGxgIG9yIGB5YXJuYCB0aGVuIDoKYGBgCm5wbSBydW4gZGV2CmBgYAoKIyMgTGF1bmNoIHRoZSBzZXJ2aWNlIHdpdGggRG9ja2VyCgpBIERvY2tlciBpbWFnZSBpcyBwdWJsaWNseSBhdmFpbGFibGUuIFJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQgOgoKYGBgCmRvY2tlciBydW4gLXAgODA4MDo4MDgwIGdoY3IuaW8vZGF0YS1mYWlyL29wZW5hcGktdmlld2VyCmBgYAoKYW5kIGdvIHRvIHRoaXMgW3BhZ2VdKGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8pCgojIyBRdWVyeSBwYXJhbWV0ZXJzCllvdSBjYW4gdXNlIHRoZSBmb2xsb3dpbmdzIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gcHJlZmlsbCB2aWV3ZXIKCiAqICoqdXJsKiogOiBUaGUgbG9jYXRpb24gb2YgdGhlIEFQSSBkb2N1bWVudGF0aW9uIGZpbGUgdG8gbG9hZCwgaW4gT3BlbkFQSSB2MyBKU09OIGZvcm1hdC4KICogKipwcm94eSoqIDogdHJ1ZSBvciBmYWxzZSBpZiB5b3Ugd2FudCB0byBmZXRjaCBBUEkgZG9jdW1lbnRhdGlvbiBmaWxlIHVzaW5nIHRoaXMgc2VydmljZSBiYWNrZW5kIGFzIGEgcHJveHkuIERlZmF1bHRzIHRvIGZhbHNlLgpDYW4gYmUgdXNlZnVsbCBpZiB0aGUgQVBJIGRlc2NyaXB0aW9uIGNhbid0IGJlIHJlYWNoZWQgd2l0aCBDT1JTIGhlYWRlcnMuIERvIG5vdCB1c2UgdGhlIHByb3h5IGlmIHlvdSB3YW50IHRvIGFjY2VzcyBhbiBBUEkgZGVzY3JpcHRpb24gbG9jYXRlZCBvbiAqbG9jYWxob3N0Ki4KICogKipoZWFkZXJzKiogOiBVUkkgZW5jb2RlZCBKU09OIGRpY3Rpb25uYXJ5IG9mIGhlYWRlcnMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gcHJlZmlsbCBwYXJhbWV0ZXJzIGlmIHRoZXkgbWF0Y2guIENhbiBiZSB1c2VmdWxsIHRvIHByZWZpbGwgKngtYXBpLWtleSogb3IgKmF1dGhvcml6YXRpb24qIGhlYWRlcnMuCiAqICoqcXVlcnktcGFyYW1zKiogOiBVUkkgZW5jb2RlZCBKU09OIGRpY3Rpb25uYXJ5IG9mIHF1ZXJ5IHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gcHJlZmlsbCBwYXJhbWV0ZXJzIGlmIHRoZXkgbWF0Y2guIENhbiBiZSB1c2VmdWxsIHRvIHByZWZpbGwgYW4gKm9yZ2FuaXphdGlvbklkKiBwYXJhbWV0ZXIgaW4gYSBtdWx0aS10ZW5hbnQgYXBwbGljYXRpb24uCiAqICoqaGlkZS10b29sYmFyKiogOiB0cnVlIG9yIGZhbHNlIG9mIHlvdSB3YW50IHRvIGhpZGUgdG9vbGJhci4gVGhpcyBjYW4gYmUgdXNlZnVsbCBmb3IgaWZyYW1lIGludGVncmF0aW9uLiBEZWZhdWx0cyB0byBmYWxzZS4K
    readmeEtag: '"804d3e8fca90c06beadae6c10508570a41c4a7ca1220bfe1f00a427fe49dc63e"'
    readmeLastModified: Wed, 03 Nov 2021 16:16:50 GMT
    description: Browse and test a REST API described with the OpenAPI 3.0 Specification
    created: "2017-03-14T18:12:56Z"
    updated: "2022-04-21T20:37:03Z"
    language: JavaScript
    archived: false
    stars: 85
    watchers: 85
    forks: 10
    owner: data-fair
    logo: https://avatars.githubusercontent.com/u/83776320?v=4
    license: AGPL-3.0
    repoEtag: '"86ba8f9f93f850e277cfa702271daad536974a51bb44fc5785f2839f56ab0e94"'
    repoLastModified: Thu, 21 Apr 2022 20:37:03 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: WebSphere Liberty
  homepage: https://developer.ibm.com/wasdev/downloads/
  language:
    - JavaScript
    - Java EE
  source_description:
    - >-
      Includes a native OpenAPI v3 UI which allows for customization of its
      banners and URL
    - Generates OpenAPI v3 documentation from Java EE applications
  category:
    - User Interfaces
    - Code Generators
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name:
    - Widdershins
    - widdershins
  category:
    - User Interfaces
    - Documentation
  link: https://mermade.github.io/shins
  repository: https://github.com/mermade/widdershins
  language: Node.js
  source_description:
    - Generate Slate/Shins markdown from OpenAPI 3.0.x
    - Generate Slate/Shins markdown from OpenAPI 2.0/3.0.x
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"1c9658bf780b938c1ea9bc2ebc9ae2eb5b6b383459302691368e82cc25edf9bf"'
    readmeLastModified: Fri, 16 Jul 2021 13:15:01 GMT
    description: >-
      OpenAPI / Swagger, AsyncAPI & Semoasa definitions to (re)Slate compatible
      markdown
    created: "2016-10-05T23:09:13Z"
    updated: "2022-04-24T07:31:58Z"
    language: JavaScript
    archived: false
    stars: 1072
    watchers: 1072
    forks: 277
    owner: Mermade
    logo: https://avatars.githubusercontent.com/u/15950345?v=4
    license: MIT
    repoEtag: '"07218bd3e4ee08035fc6a63a73bf01f47423c9fc850d77e3bcc44738597cb349"'
    repoLastModified: Sun, 24 Apr 2022 07:31:58 GMT
  foundInMaster: true
  homepage: https://github.com/Mermade/widdershins
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: RapiDoc
  homepage: https://github.com/mrin9/RapiDoc
  language:
    - JavaScript
    - Custom Element
  source_description:
    - >-
      A highly customizable Web Component for viewing Swagger and OpenAPI
      definitions
    - Custom Element to view OpenAPI descriptions.
  category:
    - User Interfaces
    - Documentation
  link: https://mrin9.github.io/RapiDoc
  repository: https://github.com/mrin9/rapidoc
  v2: true
  v3: true
  v3_1: true
  repositoryMetadata:
    base64Readme: >-
      PGltZyBhbHQ9Ik1yaW5Eb2MgbG9nbyIgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vcmFwaS1kb2MvUmFwaURvYy9ibG9iL21hc3Rlci9sb2dvLnBuZyIgd2lkdGg9IjYwcHgiIC8+CgoKPHAgYWxpZ249ImNlbnRlciI+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9saWNlbnNlLU1JVC1ibHVlLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSIvPgogICAgPGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3NpemUvcmFwaS1kb2MvcmFwaWRvYy9kaXN0L3JhcGlkb2MtbWluLmpzLnN2Zz9jb2xvckI9Ymx1ZSZsYWJlbD1taW5pZmllZCZzdHlsZT1mbGF0LXNxdWFyZSI+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc2l6ZS9yYXBpLWRvYy9yYXBpZG9jL2Rpc3QvcmFwaWRvYy1taW4uanMuZ3ouc3ZnP2NvbG9yQj1ibHVlJmxhYmVsPXppcCZzdHlsZT1mbGF0LXNxdWFyZSI+CiAgICA8YSBocmVmPSJodHRwczovL2Rpc2NvcmQuZ2cvWDlldlVlRlkiIGFsdD0iSm9pbiB1cyBvbiBEaXNjb3JkIj4KICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9kaXNjb3JkLzg0ODkxMzk5MDM2MDYyOTI2OD9zdHlsZT1mbGF0LXNxdWFyZSIgLz4KICAgIDwvYT4KICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LndlYmNvbXBvbmVudHMub3JnL2VsZW1lbnQvcmFwaWRvYyIgYWx0PSJwdWJsaXNoZWQgb24gd2ViY29tcG9uZW50cy5vcmciPgogICAgICAgIDxpbWcgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL3dlYmNvbXBvbmVudHMub3JnLXJhcGlkb2MtYmx1ZS5zdmc/c3R5bGU9c29jaWFsIi8+CiAgICA8L2E+CjwvcD4gICAgICAgIAoKIyBSYXBpRG9jCkN1c3RvbSBFbGVtZW50IGZvciBPcGVuLUFQSSBzcGVjIHZpZXdpbmcKCkpvaW4gdGhlIFtSYXBpRG9jIGNvbW11bml0eSBvbiBEaXNjb3JkXShodHRwczovL2Rpc2NvcmQuZ2cvWDlldlVlRlkpCgpTcG9uc29yZWQgYnkgW1p1cGxvXShodHRwczovL3d3dy56dXBsby5jb20vP3V0bV9jYW1wYWlnbj1SYXBpZG9jJnV0bV9zb3VyY2U9cmFwaWRvYyZ1dG1fbWVkaXVtPXJlYWRtZSkgLSBHZXQgYSBTdHJpcGUtbGlrZSBBUEkgZXhwZXJpZW5jZSBmb3IgeW91ciBjdXN0b21lcnMgaW4gbWludXRlcyAtIGRvY3VtZW50YXRpb24sIHJhdGUtbGltaXRpbmcgYW5kIEFQSS1rZXkgYXV0aCBpbiBtaW51dGVzLiAKCiMjIEZlYXR1cmVzCi0gU3VwcG9ydHMgU3dhZ2dlciAyLjAsIE9wZW5BUEkgMy54LnggCi0gV29ya3Mgd2l0aCBhbnkgZnJhbWV3b3JrIG9yIHdpdGggbm8gZnJhbWV3b3JrCi0gQWxsb3dzIG1ha2luZyBBUEkgY2FsbHMKLSBCZXR0ZXIgVXNhYmlsaXR5LCAKICAtIGFsbCBNb2RlbHMgYW5kIEV4YW1wbGVzIGFyZSBleHBhbmRlZCBieSBkZWZhdWx0LCBlbGltaW5hdGVzIHRoZSBuZWVkIHRvIGNsaWNrIGFuZCByZXZlYWwuCiAgLSBSZXF1ZXN0IGZpZWxkcyBhcmUgcHJlLXBvcHVsYXRlZCB3aXRoIHNhbXBsZSBkYXRhCiAgLSBUYWtlcyBvbmx5IG9uZSBjbGljayB0byBtYWtlIGFuIEFQSSBjYWxsCiAgLSBSZXF1ZXN0IGFuZCByZXNwb25zZSBjYW4gYmUgcGxhY2VkIHNpZGUtYnktc2lkZSBmb3IgZWFzeSBjb21wYXJpc29uCi0gQnJhbmRpbmcgYW5kIFBlcnNvbmFsaXphdGlvbiBmZWF0dXJlcyBtYWtlcyBpdCBlYXN5IHRvIGZvbGxvdyBhbnkgc3R5bGUgZ3VpZGUKICAtIENvbWVzIHdpdGggMiBUaGVtZXMgKERhcmsgYW5kIExpZ2h0KQogIC0gUmVwbGFjZSBkZWZhdWx0IGxvZ28gd2l0aCB5b3VycwogIC0gVHlwb2dyYXBoeSwgYWxsb3dzIGNoYW5naW5nIGZvbnRzCiAgLSBBbGxvd3MgY2hhbmdpbmcgdGV4dC1jb2xvciwgYnV0dG9uLWNvbG9yLCBoZWFkZXItY29sb3IgYW5kIGNvbG9yIG9mIG90aGVyIFVJIGVsZW1lbnRzCi0gUGxlbnR5IG9mIGN1c3RvbWl6YXRpb24gb3B0aW9ucyAKICAtIEFkZCBleHRlcm5hbCBjb250ZW50cyBhdCB0aGUgdG9wIGFuZCBib3R0b20gb2YgdGhlIGRvY3VtZW50LCAgeW91IG1heSBhZGQgaW1hZ2VzLCBsaW5rLCB0ZXh0LCBmb3JtcyBldGMKICAtIEFsbG93cyBkaXNhYmxpbmcgQVBJIGNhbGxpbmcgZmVhdHVyZQogIC0gSGlkZSB0aGUgaGVhZGVyLCBzbyB0aGUgdXNlciBjYW4ndCBsb2FkIGFueSBvdGhlciBPcGVuQVBJIFNwZWMKICAtIEhpZGUgQXV0aGVudGljYXRpb24gYW5kIHByb3ZpZGUgeW91ciBvd24gcHJlLWdlbmVyYXRlZCBhcGkta2V5IAogIC0gRW1iZWQgaXQgaW5zaWRlIGFub3RoZXIgSFRNTCBkb2N1bWVudAogIC0gVXNlIGl0IGluc2lkZSBhbm90aGVyIGZyYW1ld29yayAocmVhY3QsIHZ1ZSwgYW5ndWxhciwgbGl0LWVsZW1lbnQpCiAgLSBVc2UgSmF2YVNjcmlwdCB0byBjaGFuZ2UgaXRzIGF0dHJpYnV0ZXMsIGFuZCBpdCB3aWxsIHJlYWN0IHRvIHRob3NlIGNoYW5nZXMKICAtIFN0eWxlIHRoZSBlbGVtZW50IHdpdGggc3RhbmRhcmQgY3NzIChjaGFuZ2UgcGFkZGluZywgcG9zaXRpb24sIGJvcmRlciwgbWFyZ2luICkKLSBMaWdodHdlaWdodCBhbmQgZmFzdAotIExvYWQgbG9jYWwganNvbiBzcGVjIGZyb20gdGhlIGRpc2sKLSBTdXBwb3J0ZWQgb24gQ2hyb21lLCBGaXJlRm94IGFuZCBTYWZhcmkuIChOb3QgeWV0IHRlc3RlZCBvbiBFZGdlKQoKCiMjIERvY3VtZW50YXRpb24KW0NoZWNrIG91dCB0aGUgdXNhZ2UgYW5kIGRlbW9zXShodHRwczovL3JhcGktZG9jLmdpdGh1Yi5pby9SYXBpRG9jLykKCiMjIEV4YW1wbGVzCltFeGFtcGxlcyBhbmQgVGVzdCBjYXNlc10oaHR0cHM6Ly9yYXBpLWRvYy5naXRodWIuaW8vUmFwaURvYy9saXN0Lmh0bWwpCgoKIyMgQnVpbGQgUHJvY2VzcwpgYGBiYXNoCiMgQ2xvbmUgLyBEb3dubG9hZCB0aGUgcHJvamVjdCB0aGVuCm5wbSBpbnN0YWxsCgojIGJ1aWxkIHdpbGwgZ2VuZXJhdGUgcmFwaWRvYy1taW4uanMsIHRoaXMgaXMgdGhlIG9ubHkgZmlsZSB5b3Ugd2lsbCBuZWVkLgojIHVzZSBpdCBpbiB0aGUgc2NyaXB0IHRhZyBvZiB5b3VyIGh0bWwgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0icmFwaWRvYy1taW4uanMiPjwvc2NyaXB0PjwvYm9keT4KbnBtIHJ1biBidWlsZCAKCiMgZm9yIGRldmVsb3BlbWVudCB1c2UgeWFybiBzZXJ2ZSAodGhpcyB3aWxsIHN0YXJ0IGFuIHdlYnNlcnZlciBhdCBwb3J0IDgwODAsIHRoZW4gbmF2aWdhdGUgdG8gbG9jYWxob3N0OjgwODApIApucG0gcnVuIHNlcnZlCmBgYAoKIyMgUm9hZG1hcAotIOKchSBVcGdyYWRlIHRvIHVzZSBgbGl0IDJgCi0gUHJlIFJlbmRlcmluZyAvIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKSBvZiBSYXBpRG9jCi0gSW1wcm92ZSBQREYgZ2VuZXJhdGlvbiBvZiBPcGVuQVBJIHNwZWMgVXNpbmcgUmFwaVBERgotIENyZWF0ZSBhIENvbW1hbmQgTGluZSBpbnRlcmZhY2UgKENMSSkgdG8gbWFrZSBpdCBhdXRvbWF0aW9uIGZyaWVuZGx5Ci0gQWRkIGxvY2FsaXphdGlvbiBzdXBwb3J0Ci0gRm9sbG93IFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRyAyKQotIEltcHJvdmUgSG9tZXBhZ2UsIERvY3VtZW50YXRpb24gYW5kIEV4YW1wbGVzCi0gQ3JlYXRlIGdyb3VuZHdvcmsgZm9yIGF1dG9tYXRlZCB0ZXN0aW5nCi0gQ3JlYXRlIGEgbGl2ZSBwbGF5Z3JvdW5kIChTb21ldGhpbmcgbGlrZSBzd2FnZ2VyIGVkaXRvcikKLSBDcmVhdGUgYSBzaG9ydCBhbmltYXRpb24vdmlkZW8gdG8gc2hvdyBob3cgUmFwaURvYy9SYXBpUERGIHdvcmtzCgo=
    readmeEtag: '"8204434fa9b180c4173aea2e81dbee322622e4c13ce2664c8842201dea8e599e"'
    readmeLastModified: Wed, 27 Apr 2022 15:55:44 GMT
    description: RapiDoc - Custom-Element for OpenAPI Spec
    created: "2019-01-16T01:29:58Z"
    updated: "2022-04-28T09:10:52Z"
    language: JavaScript
    archived: false
    stars: 958
    watchers: 958
    forks: 183
    owner: rapi-doc
    logo: https://avatars.githubusercontent.com/u/104180085?v=4
    license: MIT
    repoEtag: '"f506fb3b6c176dd77b45a6323f64114e7a1ffaf7d5663f575882cd7a7da745cf"'
    repoLastModified: Thu, 28 Apr 2022 09:10:52 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: API Sprout
  homepage: https://github.com/danielgtaylor/apisprout
  language:
    - Go
    - cli
    - Docker
  source_description: >-
    Lightweight, blazing fast, cross-platform OpenAPI 3 mock server with
    validation
  category:
    - Mock Servers
    - Mock
    - Server Implementations
  link: https://github.com/danielgtaylor/apisprout
  repository: https://github.com/danielgtaylor/apisprout
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGltZyBzcmM9Imh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEwNjgyNi80MzExOTQ5NC03OGJlOTIyNC04ZWNiLTExZTgtOWQxYS05ZmM2ZjMwMTRiOTEucG5nIiB3aWR0aD0iMzAwIiBhbHQ9IkFQSSBTcHJvdXQiLz4KClshW0dvIFJlcG9ydCBDYXJkXShodHRwczovL2dvcmVwb3J0Y2FyZC5jb20vYmFkZ2UvZ2l0aHViLmNvbS9kYW5pZWxndGF5bG9yL2FwaXNwcm91dCldKGh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9kYW5pZWxndGF5bG9yL2FwaXNwcm91dCkgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL3RyYXZpcy1jaS5vcmcvZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL3RyYXZpcy1jaS5vcmcvZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQpIFshW0dpdEh1YiB0YWcgKGxhdGVzdCBTZW1WZXIpXShodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi90YWcvZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGd0YXlsb3IvYXBpc3Byb3V0L3JlbGVhc2VzKSBbIVtEb2NrZXIgUHVsbHNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZG9ja2VyL3B1bGxzL2RhbmllbGd0YXlsb3IvYXBpc3Byb3V0LnN2ZyldKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9kYW5pZWxndGF5bG9yL2FwaXNwcm91dC8pCgpBIHNpbXBsZSwgcXVpY2ssIGNyb3NzLXBsYXRmb3JtIEFQSSBtb2NrIHNlcnZlciB0aGF0IHJldHVybnMgZXhhbXBsZXMgc3BlY2lmaWVkIGluIGFuIEFQSSBkZXNjcmlwdGlvbiBkb2N1bWVudC4gRmVhdHVyZXMgaW5jbHVkZToKCi0gT3BlbkFQSSAzLnggc3VwcG9ydAogIC0gVXNlcyBvcGVyYXRpb24gYGV4YW1wbGVzYCBvciBnZW5lcmF0ZXMgZXhhbXBsZXMgZnJvbSBgc2NoZW1hYAotIExvYWQgZnJvbSBhIFVSTCBvciBsb2NhbCBmaWxlIChhdXRvIHJlbG9hZCB3aXRoIGAtLXdhdGNoYCkKLSBDT1JTIGhlYWRlcnMgZW5hYmxlZCBieSBkZWZhdWx0Ci0gQWNjZXB0IGhlYWRlciBjb250ZW50IG5lZ290aWF0aW9uCiAgLSBFeGFtcGxlOiBgQWNjZXB0OiBhcHBsaWNhdGlvbi8qYAotIFByZWZlciBoZWFkZXIgdG8gc2VsZWN0IHJlc3BvbnNlIHRvIHRlc3Qgc3BlY2lmaWMgY2FzZXMKICAtIEV4YW1wbGU6IGBQcmVmZXI6IHN0YXR1cz00MDlgCi0gU2VydmVyIHZhbGlkYXRpb24gKGVuYWJsZWQgd2l0aCBgLS12YWxpZGF0ZS1zZXJ2ZXJgKQogIC0gVmFsaWRhdGVzIHNjaGVtZSwgaG9zdG5hbWUvcG9ydCwgYW5kIGJhc2UgcGF0aAogIC0gU3VwcG9ydHMgYGxvY2FsaG9zdGAgb3V0IG9mIHRoZSBib3gKICAtIFVzZSB0aGUgYC0tYWRkLXNlcnZlcmAgZmxhZywgaW4gY29uanVuY3Rpb24gd2l0aCBgLS12YWxpZGF0ZS1zZXJ2ZXJgLCB0byBkeW5hbWljYWxseSBpbmNsdWRlIG1vcmUgc2VydmVycyBpbiB0aGUgdmFsaWRhdGlvbiBsb2dpYwotIFJlcXVlc3QgcGFyYW1ldGVyICYgYm9keSB2YWxpZGF0aW9uIChlbmFibGVkIHdpdGggYC0tdmFsaWRhdGUtcmVxdWVzdGApCi0gQ29uZmlndXJhdGlvbiB2aWE6CiAgLSBGaWxlcyAoYC9ldGMvYXBpc3Byb3V0L2NvbmZpZy5qc29ufHlhbWxgKQogIC0gRW52aXJvbm1lbnQgKHByZWZpeGVkIHdpdGggYFNQUk9VVF9gLCBlLmcuIGBTUFJPVVRfVkFMSURBVEVfU0VSVkVSYCkKICAtIENvbW1hbmRsaW5lIGZsYWdzCgpVc2FnZSBpcyBzaW1wbGU6CgpgYGBzaAojIExvYWQgZnJvbSBhIGxvY2FsIGZpbGUKYXBpc3Byb3V0IG15LWFwaS55YW1sCgojIFZhbGlkYXRlIHNlcnZlciBuYW1lIGFuZCB1c2UgYmFzZSBwYXRoCmFwaXNwcm91dCAtLXZhbGlkYXRlLXNlcnZlciBteS1hcGkueWFtbAoKIyBEeW5hbWljYWxseSBJbmNsdWRlIGEgbmV3IHNlcnZlciAvIHBhdGggaW4gdGhlIHZhbGlkYXRpb24KYXBpc3Byb3V0IC0tYWRkLXNlcnZlciBodHRwOi8vbG9jYWxob3N0OjgwODAvbW9jayAtLXZhbGlkYXRlLXNlcnZlciBteS1hcGkueWFtbAoKIyBMb2FkIGZyb20gYSBVUkwKYXBpc3Byb3V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL2FwaS13aXRoLWV4YW1wbGVzLnlhbWwKYGBgCgojIyBEb2NrZXIgSW1hZ2UKCkEgaG9zdGVkIFtBUEkgU3Byb3V0IERvY2tlciBpbWFnZV0oaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2RhbmllbGd0YXlsb3IvYXBpc3Byb3V0LykgaXMgcHJvdmlkZWQgdGhhdCBtYWtlcyBpdCBlYXN5IHRvIGRlcGxveSBtb2NrIHNlcnZlcnMgb3IgcnVuIGxvY2FsbHkuIEZvciBleGFtcGxlOgoKYGBgc2gKZG9ja2VyIHB1bGwgZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQKZG9ja2VyIHJ1biAtcCA4MDAwOjgwMDAgZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQgaHR0cDovL2V4YW1wbGUuY29tL215LWFwaS55YW1sCmBgYAoKQ29uZmlndXJhdGlvbiBjYW4gYmUgcGFzc2VkIHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIGUuZy4gc2V0dGluZyBgU1BST1VUX1ZBTElEQVRFX1JFUVVFU1Q9MWAsIG9yIGJ5IHBhc3NpbmcgY29tbWFuZGxpbmUgZmxhZ3MuIEl0IGlzIGFsc28gcG9zc2libGUgdG8gdXNlIGEgbG9jYWwgQVBJIGRlc2NyaXB0aW9uIGZpbGUgdmlhIFtEb2NrZXIgVm9sdW1lc10oaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vc3RvcmFnZS92b2x1bWVzLyk6CgpgYGAKIyBSZW1lbWJlciB0byBwdXQgdGhlIGZ1bGwgcGF0aCB0byBsb2NhbCBhcmNoaXZlIFlBTUwgaW4gLXYKZG9ja2VyIHJ1biAtcCA4MDAwOjgwMDAgLXYgJEZVTExQQVRIL2xvY2FsZmlsZS55YW1sOi9hcGkueWFtbCBkYW5pZWxndGF5bG9yL2FwaXNwcm91dCAvYXBpLnlhbWwKYGBgCgojIyBJbnN0YWxsYXRpb24KCkRvd25sb2FkIHRoZSBhcHByb3ByaWF0ZSBiaW5hcnkgZnJvbSB0aGUgW3JlbGVhc2VzXShodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsZ3RheWxvci9hcGlzcHJvdXQvcmVsZWFzZXMpIHBhZ2UuCgpBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSBgZ28gZ2V0YDoKCmBgYHNoCmdvIGdldCBnaXRodWIuY29tL2RhbmllbGd0YXlsb3IvYXBpc3Byb3V0CmBgYAoKIyMgRXh0cmEgRmVhdHVyZXMKCiMjIyBSZW1vdGUgUmVsb2FkCgpJZiB5b3VyIEFQSSBzcGVjIGlzIGxvYWRlZCBmcm9tIGEgcmVtb3RlIFVSTCwgeW91IGNhbiBsaXZlLXJlbG9hZCBpdCBieSBoaXR0aW5nIHRoZSBgL19fcmVsb2FkYCBlbmRwb2ludC4KCiMjIyBIZWFsdGggQ2hlY2sKCkEgc2ltcGxlIGVuZHBvaW50IHdoaWNoIHJldHVybnMgc3RhdHVzIGNvZGUgYDIwMGAgaXMgYXZhaWxhYmxlIGF0IGAvX19oZWFsdGhgLiBUaGlzIGVuZHBvaW50IHN1Y2Nlc3NmdWxseSByZXR1cm5zIGAyMDBgIGV2ZW4gaWYgYC0tdmFsaWRhdGUtc2VydmVyYCBpcyB0dXJuZWQgb24sIGFuZCB0aGUgZW5kcG9pbnQgaXMgYmVpbmcgYWNjZXNzZWQgZnJvbSBhIG5vbi12YWxpZGF0ZWQgaG9zdC4KCiMjIENvbnRyaWJ1dGluZwoKQ29udHJpYnV0aW9ucyBhcmUgdmVyeSB3ZWxjb21lLiBQbGVhc2Ugb3BlbiBhIHRyYWNraW5nIGlzc3VlIG9yIHB1bGwgcmVxdWVzdCBhbmQgd2UgY2FuIHdvcmsgdG8gZ2V0IHRoaW5ncyBtZXJnZWQgaW4uCgojIyBSZWxlYXNlIFByb2Nlc3MKClRoZSBmb2xsb3dpbmcgZGVzY3JpYmVzIHRoZSBzdGVwcyB0byBtYWtlIGEgbmV3IHJlbGVhc2Ugb2YgQVBJIFNwcm91dC4KCjEuIE1lcmdlIG9wZW4gUFJzIHlvdSB3YW50IHRvIHJlbGVhc2UuCjEuIFNlbGVjdCBhIG5ldyBzZW12ZXIgdmVyc2lvbiBudW1iZXIgKG1ham9yL21pbm9yL3BhdGNoIGRlcGVuZGluZyBvbiBjaGFuZ2VzKS4KMS4gVXBkYXRlIGBDSEFOR0VMT0cubWRgIHRvIGRlc2NyaWJlIGNoYW5nZXMuCjEuIENyZWF0ZSBhIGNvbW1pdCBmb3IgdGhlIHJlbGVhc2UuCjEuIFRhZyB0aGUgY29tbWl0IHdpdGggYGdpdCB0YWcgLWEgLW0gJ1RhZ2dpbmcgeC55LnogcmVsZWFzZScgdngueS56YC4KMS4gQnVpbGQgcmVsZWFzZSBiaW5hcmllcyB3aXRoIGAuL3JlbGVhc2Uuc2hgLgoxLiBQdXNoIHRoZSBjb21taXQgYW5kIHRhZ3MuCjEuIFVwbG9hZCB0aGUgcmVsZWFzZSBiaW5hcmllcy4KCiMjIExpY2Vuc2UKCkNvcHlyaWdodCAmY29weTsgMjAxOC0yMDE5IERhbmllbCBHLiBUYXlsb3IKCmh0dHA6Ly9kZ3QubWl0LWxpY2Vuc2Uub3JnLwo=
    readmeEtag: '"daa7f8b2ceb6405f401adfb7e06e248480cd371ebc526dbcd3d4b52f397e1d25"'
    readmeLastModified: Thu, 31 Oct 2019 06:11:48 GMT
    description: >-
      Lightweight, blazing fast, cross-platform OpenAPI 3 mock server with
      validation
    created: "2018-07-24T05:29:01Z"
    updated: "2022-04-22T23:07:36Z"
    language: Go
    archived: false
    stars: 585
    watchers: 585
    forks: 69
    owner: danielgtaylor
    logo: https://avatars.githubusercontent.com/u/106826?v=4
    license: MIT
    repoEtag: '"5c5a3fb8b08b4b13cbf1111f4fc3c1f9499602f98829170ae5c21eb15266ce63"'
    repoLastModified: Fri, 22 Apr 2022 23:07:36 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: Vert.x Web API Contract
  homepage: http://vertx.io/docs/#web
  language:
    - Java
    - Kotlin
    - JavaScript
    - Groovy
    - Ruby
    - Ceylon
    - Scala
  source_description: >-
    Create an API endpoint with Vert.x 3 and OpenAPI 3 with automatic requests
    validation
  category: Server Implementations
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: Fusio
  homepage: https://github.com/apioo/fusio
  language:
    - PHP
    - JavaScript
  source_description:
    - Build API endpoints based on OpenAPI 3
    - Open source API management platform
  category:
    - Server Implementations
    - Server
  link: https://www.fusio-project.org/
  repository: https://github.com/apioo/fusio
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"07c9be7978a72fd09b689a918f40a58d0fb7c8bc74a0a437f0f76682de1a11ff"'
    readmeLastModified: Tue, 19 Apr 2022 17:18:50 GMT
    description: Open source API management platform
    created: "2015-07-29T16:34:52Z"
    updated: "2022-04-27T10:25:05Z"
    language: PHP
    archived: false
    stars: 1127
    watchers: 1127
    forks: 162
    owner: apioo
    logo: https://avatars.githubusercontent.com/u/18172950?v=4
    license: AGPL-3.0
    repoEtag: '"4873896bb7fbd4e0cd3e6f277e8d9df4994a5d2762b633c4de334b102518b309"'
    repoLastModified: Wed, 27 Apr 2022 10:25:05 GMT
  foundInMaster: true
- source: IMPLEMENTATIONS.md
  name: Fastify OpenAPI v3
  homepage: https://gitlab.com/m03geek/fastify-oas
  language: Node.JS
  source_description: >-
    Fastify OpenAPI v3+ plugin. Generates OpenAPI specification from fastify
    schemas and routes. Also serves swagger ui and spec in json/yaml formats.
  category: Server Implementations
  foundInMaster: true
  readme: null
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: openapi-backend
  homepage: https://github.com/anttiviljami/openapi-backend
  language:
    - Node.js
    - TypeScript
  source_description:
    - >-
      Build, Validate, Route, and Mock in the backend using OpenAPI v3 spec in
      your favourite framework
    - >-
      Build, Validate, Route, and Mock using OpenAPI specification.
      Framework-agnostic
  category:
    - Server Implementations
    - Server
  link: https://www.npmjs.com/package/openapi-backend
  repository: https://github.com/anttiviljami/openapi-backend
  v2: false
  v3: true
  v3_1: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"ef4e77f3cbf1e077d44ea427f09441214905cdb2cf7714ff508556076f493166"'
    readmeLastModified: Sat, 26 Mar 2022 12:45:47 GMT
    description: Build, Validate, Route, Authenticate and Mock using OpenAPI
    created: "2018-10-27T02:31:25Z"
    updated: "2022-04-24T06:13:12Z"
    language: TypeScript
    archived: false
    stars: 350
    watchers: 350
    forks: 58
    owner: anttiviljami
    logo: https://avatars.githubusercontent.com/u/6105650?v=4
    license: MIT
    repoEtag: '"b46d7246c46cdfa9d8eca0a0ad4aa27d6a2a16c4286f43a4df4d575677ed015a"'
    repoLastModified: Sun, 24 Apr 2022 06:13:12 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: Connexion
  category:
    - Server Implementations
    - Mock
  language: Python
  link: https://connexion.readthedocs.io/en/latest/
  repository: https://github.com/zalando/connexion
  source_description:
    - >-
      Swagger/OpenAPI First framework for Python on top of Flask with automatic
      endpoint validation & OAuth2 support
    - >-
      OpenAPI First framework for Python on top of Flask with automatic endpoint
      validation & OAuth2 support
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"5f027523f5f6c2f140cd80223cceb3fe33f1c89d442751680917b4770a7331ca"'
    readmeLastModified: Tue, 19 Apr 2022 20:55:20 GMT
    description: >-
      Swagger/OpenAPI First framework for Python on top of Flask with automatic
      endpoint validation & OAuth2 support
    created: "2015-05-19T13:05:58Z"
    updated: "2022-04-27T02:17:48Z"
    language: Python
    archived: false
    stars: 3983
    watchers: 3983
    forks: 703
    owner: spec-first
    logo: https://avatars.githubusercontent.com/u/58754196?v=4
    license: NOASSERTION
    repoEtag: '"974683e17275ec0836801c48fae1e045c5d5a0efe01d24f81fc8923360787f68"'
    repoLastModified: Wed, 27 Apr 2022 02:17:48 GMT
  foundInMaster: true
  homepage: https://github.com/zalando/connexion
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
    - openapi3 tags
  name: restful-react
  homepage: https://github.com/contiamo/restful-react
  language:
    - Typescript
    - React (Typescript)
  source_description:
    - >-
      Well tested library to generate typesafe hooks and components. Easy to
      integrate into your development process.
    - >-
      Generate React hooks with appropriate type-signatures from OpenAPI
      descriptions
  category:
    - Client Implementations
    - Sdk
  link: https://github.com/contiamo/restful-react
  repository: https://github.com/contiamo/restful-react
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"eb4aedf0bb2d05ca2b2cd04fe898920402d9c985ba0f60358bb1874bbaee49d5"'
    readmeLastModified: Thu, 10 Feb 2022 15:48:45 GMT
    description: >-
      A consistent, declarative way of interacting with RESTful backends,
      featuring code-generation from Swagger and OpenAPI specs 🔥
    created: "2018-06-29T12:52:25Z"
    updated: "2022-04-26T10:01:15Z"
    language: TypeScript
    archived: false
    stars: 1851
    watchers: 1851
    forks: 107
    owner: contiamo
    logo: https://avatars.githubusercontent.com/u/862286?v=4
    license: MIT
    repoEtag: '"84156fa8937a672fbcb4b67f2ce48248a07dfde0461fe1fe6d859ac3646fcdb7"'
    repoLastModified: Tue, 26 Apr 2022 10:01:15 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name:
    - baucis-openapi3
    - BaucisJS + baucis-openapi3
  homepage: https://github.com/metadevpro/baucis-openapi3
  language:
    - Node.js
    - JavaScript
  source_description:
    - >-
      [Baucis.js](https://github.com/wprl/baucis) plugin for generating OpenAPI
      3.0 compliant API contracts.
    - >-
      Create REST resources with persistence on MongoDB and expose OpenAPI v.3
      contracts
  category:
    - Code Generators
    - Server
  link: https://www.npmjs.com/package/baucis-openapi3
  repository: https://github.com/metadevpro/baucis-openapi3
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      YmF1Y2lzLW9wZW5hcGkzCj09PT09PT09PT09PT09PQoKClshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vYmF1Y2lzLW9wZW5hcGkzLnN2ZyldKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL2JhdWNpcy1vcGVuYXBpMykKWyFbQ292ZXJhZ2UgU3RhdHVzXShodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvbWV0YWRldnByby9iYXVjaXMtb3BlbmFwaTMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9iYXVjaXMtb3BlbmFwaTM/YnJhbmNoPW1hc3RlcikKWyFbRGVwZW5kZW5jeSBTdGF0dXNdKGh0dHBzOi8vZGF2aWQtZG0ub3JnL21ldGFkZXZwcm8vYmF1Y2lzLW9wZW5hcGkzLnN2ZyldKGh0dHBzOi8vZGF2aWQtZG0ub3JnL21ldGFkZXZwcm8vYmF1Y2lzLW9wZW5hcGkzKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L25wbS9iYXVjaXMtb3BlbmFwaTMvYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvbnBtL2JhdWNpcy1vcGVuYXBpMykKWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vYmFkZ2UuZnVyeS5pby9qcy9iYXVjaXMtb3BlbmFwaTMuc3ZnKV0oaHR0cDovL2JhZGdlLmZ1cnkuaW8vanMvYmF1Y2lzLW9wZW5hcGkzKQpbIVtHcmVlbmtlZXBlciBiYWRnZV0oaHR0cHM6Ly9iYWRnZXMuZ3JlZW5rZWVwZXIuaW8vbWV0YWRldnByby9iYXVjaXMtb3BlbmFwaTMuc3ZnKV0oaHR0cHM6Ly9ncmVlbmtlZXBlci5pby8pCgpbIVtOUE1dKGh0dHBzOi8vbm9kZWkuY28vbnBtL2JhdWNpcy1vcGVuYXBpMy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL2JhdWNpcy1vcGVuYXBpMy8pCgoKVGhpcyBtb2R1bGUgZ2VuZXJhdGVzIGN1c3RvbWl6YWJsZSBbT3BlbkFQSSAzLjBdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMC4wLm1kKSBkZWZpbml0aW9ucyBmb3IgeW91ciBCYXVjaXMgQVBJLgpVc2UgdGhpcyBtb2R1bGUgaW4gY29uanVuY3Rpb24gd2l0aCBbQmF1Y2lzXShodHRwczovL2dpdGh1Yi5jb20vd3BybC9iYXVjaXMpLgoKClVzYWdlCi0tLS0tCgpJbnN0YWxsIHdpdGg6CgogICAgbnBtIGluc3RhbGwgLS1zYXZlIGJhdWNpcyBiYXVjaXMtb3BlbmFwaTMKCkluY2x1ZGUgdGhlIHBhY2thZ2UgYWZ0ZXIgYmF1Y2lzIGlzIGluY2x1ZGVkLCBhbmQgYmVmb3JlIHlvdXIgQVBJIGlzIGJ1aWx0LgoKYGBgamF2YXNjcmlwdAogICAgdmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7CiAgICB2YXIgYmF1Y2lzID0gcmVxdWlyZSgnYmF1Y2lzJyk7CiAgICB2YXIgYXBpRG9jID0gcmVxdWlyZSgnYmF1Y2lzLW9wZW5hcGkzJyk7CgogICAgdmFyIGFwcCA9IGV4cHJlc3MoKTsKCiAgICAvLyAuLi4gU2V0IHVwIGEgbW9uZ29vc2Ugc2NoZW1hIC4uLgoKICAgIGJhdWNpcy5yZXN0KCd2ZWdldGFibGUnKTsKICAgIGFwcC51c2UoJy9hcGknLCBiYXVjaXMoKSk7CmBgYAoKVGhlbiwgYWNjZXNzIGUuZy4gYEdFVCBodHRwOi8vbG9jYWxob3N0OjMzMzMvYXBpL29wZW5hcGkuanNvbmAuICBTZWUgdGhlIFtCYXVjaXNdKGh0dHBzOi8vZ2l0aHViLmNvbS93cHJsL2JhdWNpcykgcmVwbyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBidWlsZGluZyBSRVNUIEFQSXMgd2l0aCBbQmF1Y2lzXShodHRwczovL2dpdGh1Yi5jb20vd3BybC9iYXVjaXMpLgoKVGVzdHMKLS0tLS0KQ2hhbmdlIHRoZSBgdGVzdC9maXh1cmVzL2NvbmZpZy5qc29uYCBpZiBuZWVkZWQsIHRvIHBvaW50IHRvIGEgdmFsaWQgbW9uZ29kYiBkYXRhYmFzZS4KVGhlbiBydW46CgpgYGAKbnBtIHRlc3QKYGBgCgoKRXh0ZW5zaWJpbGl0eQotLS0tLS0tLS0tLS0tCgpJZiB5b3Ugd2FudCB0byBtb2RpZnkgdGhlIE9wZW5BUEkgZGVmaW5pdGlvbiwgZ2VuZXJhdGUgdGhlIGRlZmluaXRpb24gZmlyc3QuICAoVGhpcyB3aWxsIGhhcHBlbiBhdXRvbWF0aWNhbGx5IG90aGVyd2lzZS4pCgpVc2UgdGhlIGBvcGVuQXBpM2AgbWVtYmVyIG9mIHRoZSBjb250cm9sbGVyIHRvIGV4dGVuZCBgcGF0aHNgIGFuZCBgY29tcG9uZW50c2AgcGVyIGNvbnRyb2xsZXIuCgpgYGBqYXZhc2NyaXB0CmNvbnRyb2xsZXIuZ2VuZXJhdGVPcGVuQXBpMygpOwpjb250cm9sbGVyLm9wZW5BcGkzLnBhdGhzLnh5eiA9ICcxMjMnOwpjb250cm9sbGVyLm9wZW5BcGkzLmNvbXBvbmVudHMuc2NoZW1hcy54eXogPSB7fTsKYGBgCgpPciB1c2UgdGhlIGBvcGVuQXBpM0RvY3VtZW50YCBvZiB0aGUgYmF1Y2lzIGluc3RhbmNlIG1vZHVsZSB0byBhY2Nlc3MgYW5kIG1vZGlmeSBkaXJyZWN0eSB0aGUgZnVsbCBkb2N1bWVudCBhZnRlciBjYWxsaW5nIGBnZW5lcmF0ZU9wZW5BcGkzKClgIG9uIHRoZSBBUEkuCgpgYGBqYXZhc2NyaXB0CnZhciBiYXVjaXNJbnN0YW5jZSA9IGJhdWNpcygpOwoKLy9nZW5lcmF0ZSBzdGFuZGFyZCB0ZW1wbGF0ZSBmb3IgT3BlbkFQSTMKYmF1Y2lzSW5zdGFuY2UuZ2VuZXJhdGVPcGVuQXBpMygpOwovL2V4dGVuZCBPcGVuQVBJMyBkZWZpbml0aW9ucwpiYXVjaXNJbnN0YW5jZS5vcGVuQXBpM0RvY3VtZW50LmluZm8udGl0bGUgPSAibXlBcGkiOwoKYXBwLnVzZSgnL2FwaScsIGJhdWNpc0luc3RhbmNlKTsKYGBgCgpCYWNrd2FyZCBjb21wYXRpYmlsaXR5Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkluIGNhc2UgeW91IHdhbnQgdG8gcHJvdmlkZSBhbiBlYXN5IHRyYW5zaXRpb24gYXMgcG9zc2libGUgZm9yIHlvdXIgY3VycmVudCBBUEkgY2xpZW50cy4gWW91IGNhbiBleHBvc2UgYm90aCBBUEkgZGVzY3JpcHRpb25zIGF0IHRoZSBzYW1lIHRpbWUgaW5jbHVkaW5nIGJvdGggbW9kdWxlczoKCmBgYGphdmFzY3JpcHQKICAgIHZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpOwogICAgdmFyIGJhdWNpcyA9IHJlcXVpcmUoJ2JhdWNpcycpOwogICAgdmFyIHN3YWdnZXIgPSByZXF1aXJlKCdiYXVjaXMtc3dhZ2dlcicpOwogICAgdmFyIHN3YWdnZXIyID0gcmVxdWlyZSgnYmF1Y2lzLXN3YWdnZXIyJyk7CiAgICB2YXIgb3BlbmFwaTMgPSByZXF1aXJlKCdiYXVjaXMtb3BlbmFwaTMnKTsKCiAgICB2YXIgYXBwID0gZXhwcmVzcygpOwoKICAgIC8vIC4uLiBTZXQgdXAgYSBtb25nb29zZSBzY2hlbWEgLi4uCgogICAgYmF1Y2lzLnJlc3QoJ3ZlZ2V0YWJsZScpOwogICAgYXBwLnVzZSgnL2FwaScsIGJhdWNpcygpKTsKYGBgCgpBZnRlciB0aGF0OgotIFN3YWdnZXIgMS4xIGRvYyB3aWxsIGJlIGV4cG9zZWQgYXQgYC9hcGkvZG9jdW1lbnRhdGlvbmAKLSBTd2FnZ2VyIDIuMCBkb2Mgd2lsbCBiZSBleHBvc2VkIGF0IGAvYXBpL3N3YWdnZXIuanNvbmAKLSBPcGVuQVBJIDMuMCBkb2Mgd2lsbCBiZSBleHBvc2VkIGF0IGAvYXBpL29wZW5hcGkuanNvbmAKCgpDb250YWN0Ci0tLS0tLS0KCiAqIFtAbWV0YWQzdl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9tZXRhZDN2KSBodHRwczovL21ldGFkZXYucHJvCiAqIFtAcG1vbGluYW1dKGh0dHBzOi8vdHdpdHRlci5jb20vcG1vbGluYW0pCgpSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZS4gJmNvcHk7IDIwMTctMjAxOCBNZXRhZGV2Cg==
    description: BaucisJS pluging for generating OpenAPI 3.0 compliance API contracts.
    created: "2017-03-03T22:41:11Z"
    updated: "2020-10-09T16:51:43Z"
    language: JavaScript
    archived: false
    stars: 13
    watchers: 13
    forks: 2
    owner: metadevpro
    logo: https://avatars.githubusercontent.com/u/24300914?v=4
    license: MIT
    repoEtag: '"37c6f6c05e37f1bb59a50dc8446e53b6d8cc5f14449df8123ba2e3944c5584be"'
    repoLastModified: Fri, 09 Oct 2020 16:51:43 GMT
    readmeEtag: '"968074b15cc89fb0d9834bfb8a1f966ef0c544c5ee7521a3eeba9f5a13e0deaa"'
    readmeLastModified: Mon, 01 Apr 2019 21:55:30 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: Google Gnostic
  homepage: https://github.com/googleapis/gnostic
  language: Go
  source_description:
    - >-
      Compile OpenAPI descriptions into equivalent Protocol Buffer
      representations.
    - >-
      Compile OpenAPI descriptions into equivalent Protocol Buffer
      representations
  category:
    - Code Generators
    - Converters
  repository: https://github.com/googleapis/gnostic
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      WyFbR28gQWN0aW9ucyBTdGF0dXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvZ25vc3RpYy93b3JrZmxvd3MvR28vYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nbm9zdGljL2FjdGlvbnMpCgojIOKogSBnbm9zdGljCgpUaGlzIHJlcG9zaXRvcnkgY29udGFpbnMgYSBHbyBjb21tYW5kIGxpbmUgdG9vbCB3aGljaCBjb252ZXJ0cyBKU09OIGFuZCBZQU1MCltPcGVuQVBJXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbikgZGVzY3JpcHRpb25zIHRvIGFuZApmcm9tIGVxdWl2YWxlbnQgUHJvdG9jb2wgQnVmZmVyIHJlcHJlc2VudGF0aW9ucy4KCltQcm90b2NvbCBCdWZmZXJzXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzLykgcHJvdmlkZSBhCmxhbmd1YWdlLW5ldXRyYWwsIHBsYXRmb3JtLW5ldXRyYWwsIGV4dGVuc2libGUgbWVjaGFuaXNtIGZvciBzZXJpYWxpemluZwpzdHJ1Y3R1cmVkIGRhdGEuICoqZ25vc3RpYyoqJ3MgUHJvdG9jb2wgQnVmZmVyIG1vZGVscyBmb3IgdGhlIE9wZW5BUEkKU3BlY2lmaWNhdGlvbiBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSBjb2RlIHRoYXQgaW5jbHVkZXMgZGF0YSBzdHJ1Y3R1cmVzIHdpdGgKZXhwbGljaXQgZmllbGRzIGZvciB0aGUgZWxlbWVudHMgb2YgYW4gT3BlbkFQSSBkZXNjcmlwdGlvbi4gVGhpcyBtYWtlcyBpdApwb3NzaWJsZSBmb3IgZGV2ZWxvcGVycyB0byB3b3JrIHdpdGggT3BlbkFQSSBkZXNjcmlwdGlvbnMgaW4gdHlwZS1zYWZlIHdheXMsCndoaWNoIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgaW4gc3Ryb25nbHktdHlwZWQgbGFuZ3VhZ2VzIGxpa2UgR28gYW5kCltEYXJ0XShodHRwczovL2RhcnQuZGV2LykuCgoqKmdub3N0aWMqKiByZWFkcyBPcGVuQVBJIGRlc2NyaXB0aW9ucyBpbnRvIHRoZXNlIGdlbmVyYXRlZCBkYXRhIHN0cnVjdHVyZXMsCnJlcG9ydHMgZXJyb3JzLCByZXNvbHZlcyBpbnRlcm5hbCBkZXBlbmRlbmNpZXMsIGFuZCB3cml0ZXMgdGhlIHJlc3VsdHMgaW4gYQpiaW5hcnkgZm9ybSB0aGF0IGNhbiBiZSB1c2VkIGluIGFueSBsYW5ndWFnZSB0aGF0IGlzIHN1cHBvcnRlZCBieSB0aGUgUHJvdG9jb2wKQnVmZmVyIHRvb2xzLiBBIHBsdWdpbiBpbnRlcmZhY2Ugc2ltcGxpZmllcyBpbnRlZ3JhdGlvbiB3aXRoIEFQSSB0b29scyB3cml0dGVuCmluIGEgdmFyaWV0eSBvZiBkaWZmZXJlbnQgbGFuZ3VhZ2VzLCBhbmQgd2hlbiBuZWNlc3NhcnksIFByb3RvY29sIEJ1ZmZlcgpPcGVuQVBJIGRlc2NyaXB0aW9ucyBjYW4gYmUgcmVleHBvcnRlZCBhcyBKU09OIG9yIFlBTUwuCgoqKmdub3N0aWMqKiBjb21waWxhdGlvbiBjb2RlIGFuZCBPcGVuQVBJIFByb3RvY29sIEJ1ZmZlciBtb2RlbHMgYXJlCmF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gYW4KW09wZW5BUEkgSlNPTiBTY2hlbWFdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NjaGVtYXMvdjIuMC9zY2hlbWEuanNvbikuClNvdXJjZSBjb2RlIGZvciB0aGUgZ2VuZXJhdG9yIGlzIGluIHRoZSBbZ2VuZXJhdGUtZ25vc3RpY10oZ2VuZXJhdGUtZ25vc3RpYykKZGlyZWN0b3J5LgoKIyMgRGlzY2xhaW1lcgoKRmVlZGJhY2sgYW5kIGNvbnRyaWJ1dGlvbnMgYXJlIHdlbGNvbWUhIFVudGlsIHRoZXJlIGlzIGEgMS4wIHJlbGVhc2UsIHBsZWFzZQpjb25zaWRlciB0aGlzIHByZXJlbGVhc2Ugc29mdHdhcmUgYW5kIHdvcmsgaW4gcHJvZ3Jlc3MuIFRvIGVuc3VyZSBzdGFibGUKYnVpbGRzLCB3ZSByZXF1ZXN0IHRoYXQgZGVwZW5kZW50IHByb2plY3RzIGFsd2F5cyByZWZlciB0byB0YWdnZWQgcmVsZWFzZXMgb2YKKipnbm9zdGljKiouCgojIyBSZXF1aXJlbWVudHMKCioqZ25vc3RpYyoqIGNhbiBiZSBydW4gaW4gYW55IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgW0dvXShodHRwOi8vZ29sYW5nLm9yZykKYW5kIHRoZQpbUHJvdG9jb2wgQnVmZmVyIENvbXBpbGVyXShodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmKS4KCiMjIEluc3RhbGxhdGlvbiBhbmQgR2V0dGluZyBTdGFydGVkCgpUaGUgZm9sbG93aW5nIGluc3RydWN0aW9ucyBhcmUgZm9yIGluc3RhbGxpbmcgKipnbm9zdGljKiogdXNpbmcKW0dvIG1vZHVsZXNdKGh0dHBzOi8vYmxvZy5nb2xhbmcub3JnL3VzaW5nLWdvLW1vZHVsZXMpLCBzdXBwb3J0ZWQgYnkgR28gMS4xMQphbmQgbGF0ZXIuCgoxLiAgR2V0IHRoaXMgcGFja2FnZSBieSBkb3dubG9hZGluZyBpdCB3aXRoIGBnaXQgY2xvbmVgLgoKICAgICAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nbm9zdGljCiAgICAgICAgY2QgZ25vc3RpYwoKMi4gIFZlcmlmeSB0aGF0IHlvdSBoYXZlIGEgbG9jYWwgaW5zdGFsbGF0aW9uIG9mIGBwcm90b2NgLiBZb3UgY2FuIGdldCBwcm90b2MKICAgIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmKS4KCjMuICBCdWlsZCAqKmdub3N0aWMqKiB3aXRoIGBtYWtlYC4gVGhpcyB1c2VzCiAgICBbZ28gZ2VuZXJhdGVdKGh0dHBzOi8vYmxvZy5nb2xhbmcub3JnL2dlbmVyYXRlKSB0byBidWlsZCBzdXBwb3J0IGNvZGUKICAgIGluY2x1ZGluZyBjb2RlIGdlbmVyYXRlZCBieSBgcHJvdG9jYCBhbmQgdGhlIEdvIHByb3RvYyBwbHVnaW4sIHdoaWNoIGlzCiAgICBhdXRvbWF0aWNhbGx5IGRvd25sb2FkZWQgZnJvbQogICAgW2dpdGh1Yi5jb20vZ29sYW5nL3Byb3RvYnVmXShodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL3Byb3RvYnVmKSBieSB0aGUKICAgIFtDT01QSUxFLVBST1RPUy5zaF0oQ09NUElMRS1QUk9UT1Muc2gpIHNjcmlwdC4gVGhpcyBhbHNvIGJ1aWxkcyBhbGwgcGx1Z2lucwogICAgYW5kIGFzc29jaWF0ZWQgdG9vbHMgaW4gdGhpcyByZXBvLgoKNC4gIFZlcmlmeSAqKmdub3N0aWMqKiB3aXRoIGBtYWtlIHRlc3RgLiBUaGVzZSB0ZXN0cyBhcmUgcnVuIGJ5ICoqZ25vc3RpYyoqJ3MKICAgIGNvbnRpbnVvdXMgaW50ZWdyYXRpb24sIHNvIHlvdSBzaG91bGQgZXhwZWN0IHRoZW0gdG8gcGFzcyBmb3IgYWxsIHJlbGVhc2UKICAgIHZlcnNpb25zLgoKNS4gIFJ1biAqKmdub3N0aWMqKi4gVGhpcyBzYW1wbGUgaW52b2NhdGlvbiBjcmVhdGVzIGEgZmlsZSBpbiB0aGUgY3VycmVudAogICAgZGlyZWN0b3J5IG5hbWVkIGBwZXRzdG9yZS5wYmAgdGhhdCBjb250YWlucyBhIGJpbmFyeSBQcm90b2NvbCBCdWZmZXIKICAgIGRlc2NyaXB0aW9uIG9mIGEgc2FtcGxlIEFQSS4KCiAgICAgICAgICAgIGdub3N0aWMgLS1wYi1vdXQ9LiBleGFtcGxlcy92Mi4wL2pzb24vcGV0c3RvcmUuanNvbgoKNi4gIFlvdSBjYW4gYWxzbyBjb21waWxlIGZpbGVzIHRoYXQgeW91IHNwZWNpZnkgd2l0aCBhIFVSTC4gSGVyZSdzIGFub3RoZXIgd2F5CiAgICB0byBjb21waWxlIHRoZSBwcmV2aW91cyBleGFtcGxlLiBUaGlzIHRpbWUgd2UncmUgY3JlYXRpbmcgYHBldHN0b3JlLnRleHRgLAogICAgd2hpY2ggY29udGFpbnMgYSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBQcm90b2NvbCBCdWZmZXIgZGVzY3JpcHRpb24uCiAgICBUaGlzIGlzIG1haW5seSBmb3IgdXNlIGluIHRlc3RpbmcgYW5kIGRlYnVnZ2luZy4KCiAgICAgICAgICAgIGdub3N0aWMgLS10ZXh0LW91dD1wZXRzdG9yZS50ZXh0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9nb29nbGUvZ25vc3RpYy9tYXN0ZXIvZXhhbXBsZXMvdjIuMC9qc29uL3BldHN0b3JlLmpzb24KCjcuICBGb3IgYSBzYW1wbGUgYXBwbGljYXRpb24sIHNlZSBhcHBzL3JlcG9ydC4gVGhpcyByZWFkcyBhIGJpbmFyeSBQcm90b2NvbAogICAgQnVmZmVyIGVuY29kaW5nIGNyZWF0ZWQgYnkgKipnbm9zdGljKiouCgogICAgICAgIGdvIGluc3RhbGwgLi9hcHBzL3JlcG9ydCAjIyBhdXRvbWF0aWNhbGx5IGluc3RhbGxlZCBieSB0aGUgdG9wLWxldmVsIE1ha2VmaWxlCiAgICAgICAgcmVwb3J0IHBldHN0b3JlLnBiCgo4LiAgKipnbm9zdGljKiogYWxzbyBzdXBwb3J0cyBwbHVnaW5zLiAqKmdub3N0aWMqKidzIHBsdWdpbiBpbnRlcmZhY2UgaXMKICAgIG1vZGVsZWQgb24gYHByb3RvY2AncwogICAgW3BsdWdpbi5wcm90b10oaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9ibG9iL21hc3Rlci9zcmMvZ29vZ2xlL3Byb3RvYnVmL2NvbXBpbGVyL3BsdWdpbi5wcm90bykKICAgIGFuZCBpcyBkZXNjcmliZWQgaW4gW3BsdWdpbnMvcGx1Z2luLnByb3RvXShwbHVnaW5zL3BsdWdpbi5wcm90bykuIFNldmVyYWwKICAgIHBsdWdpbnMgYXJlIGltcGxlbWVudGVkIGluIHRoZSBgcGx1Z2luc2AgZGlyZWN0b3J5LiBPdGhlcnMsIGxpa2UKICAgIFtnbm9zdGljLWdycGNdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvZ25vc3RpYy1ncnBjKSBhbmQKICAgIFtnbm9zdGljLWdvLWdlbmVyYXRvcl0oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nbm9zdGljLWdvLWdlbmVyYXRvciksCiAgICBhcmUgcHVibGlzaGVkIGluIHRoZWlyIG93biByZXBvc2l0b3JpZXMuIE9uZSBzdWNoIHBsdWdpbiBpcwogICAgW2dub3N0aWMtdm9jYWJ1bGFyeV0ocGx1Z2lucy9nbm9zdGljLXZvY2FidWxhcnkpLCB3aGljaCBwcm9kdWNlcyBhIHN1bW1hcnkKICAgIG9mIHRoZSB3b3JkIHVzYWdlIGluIGFuIEFQSXMgaW50ZXJmYWNlcy4gWW91IGNhbiBydW4gYGdub3N0aWMtdm9jYWJ1bGFyeWAKICAgIHdpdGggdGhlIGZvbGxvd2luZzoKCiAgICAgICAgICAgIGdub3N0aWMgZXhhbXBsZXMvdjIuMC9qc29uL3BldHN0b3JlLmpzb24gLS12b2NhYnVsYXJ5X291dD0uCgogICAgVGhpcyB3aWxsIHByb2R1Y2UgZmlsZXMgbmFtZWQgYHZvY2FidWxhcnkucGJgIGFuZCBgdm9jYWJ1bGFyeS5qc29uYCBpbgogICAgYGV4YW1wbGVzL3YyLjAvanNvbmAuIEZvciB0aGUgZm9ybWF0IG9mIGB2b2NhYnVsYXJ5LnBiYCwgc2VlCiAgICBbbWV0cmljcy92b2NhYnVsYXJ5LnByb3RvXShtZXRyaWNzL3ZvY2FidWxhcnkucHJvdG8pLgoKOS4gIFtPcHRpb25hbF0gQSBsYXJnZSBwYXJ0IG9mICoqZ25vc3RpYyoqIGlzIGF1dG9tYXRpY2FsbHktZ2VuZXJhdGVkIGJ5IHRoZQogICAgW2dlbmVyYXRlLWdub3N0aWNdKGdlbmVyYXRlLWdub3N0aWMpIHRvb2wuIFRoaXMgdXNlcyBKU09OIHNjaGVtYXMgdG8KICAgIGdlbmVyYXRlIFByb3RvY29sIEJ1ZmZlciBsYW5ndWFnZSBmaWxlcyB0aGF0IGRlc2NyaWJlIHN1cHBvcnRlZCBBUEkKICAgIHNwZWNpZmljYXRpb24gZm9ybWF0cyBhbmQgR28tbGFuZ3VhZ2UgZmlsZXMgb2YgY29kZSB0aGF0IHdpbGwgcmVhZCBKU09OIG9yCiAgICBZQU1MIEFQSSBkZXNjcmlwdGlvbnMgaW50byB0aGUgZ2VuZXJhdGVkIHByb3RvY29sIGJ1ZmZlciBtb2RlbHMuCiAgICBQcmUtZ2VuZXJhdGVkIHZlcnNpb25zIG9mIHRoZXNlIGZpbGVzIGFyZSBjaGVja2VkIGludG8gdGhlCiAgICBbb3BlbmFwaXYyXShvcGVuYXBpdjIpLCBbb3BlbmFwaXYzXShvcGVuYXBpdjMpLCBhbmQgW2Rpc2NvdmVyeV0oZGlzY292ZXJ5KQogICAgZGlyZWN0b3JpZXMuIFlvdSBjYW4gcmVnZW5lcmF0ZSB0aGlzIGNvZGUgd2l0aCB0aGUgZm9sbG93aW5nOgoKICAgICAgICBnbyBpbnN0YWxsIC4vZ2VuZXJhdGUtZ25vc3RpYwogICAgICAgIGdlbmVyYXRlLWdub3N0aWMgLS12MgogICAgICAgIGdlbmVyYXRlLWdub3N0aWMgLS12MwogICAgICAgIGdlbmVyYXRlLWdub3N0aWMgLS1kaXNjb3ZlcnkKCiMjIENvcHlyaWdodAoKQ29weXJpZ2h0IDIwMTctMjAyMCwgR29vZ2xlIExMQy4KCiMjIExpY2Vuc2UKClJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UuCg==
    readmeEtag: '"f290899ade82a84e3299744c9a2a45fceb778f6b262f19edd040f78386bd9174"'
    readmeLastModified: Sun, 24 Apr 2022 15:40:14 GMT
    description: >-
      A compiler for APIs described by the OpenAPI Specification with plugins
      for code generation and other API support tasks.
    created: "2016-11-15T19:21:53Z"
    updated: "2022-04-27T23:01:07Z"
    language: Go
    archived: false
    stars: 1344
    watchers: 1344
    forks: 159
    owner: google
    logo: https://avatars.githubusercontent.com/u/1342004?v=4
    license: Apache-2.0
    repoEtag: '"06e42b9e9af33efaf6337a450434ad71f42d028c3ebe216cf4053ad3bb3e22cd"'
    repoLastModified: Wed, 27 Apr 2022 23:01:07 GMT
  foundInMaster: true
- source:
    - IMPLEMENTATIONS.md
    - https://openapi.tools/
  name: Object Oriented OpenAPI Specification
  homepage: https://github.com/goldspecdigital/oooas
  language: PHP
  source_description:
    - Generates OpenAPI documents using PHP.
    - >-
      An object oriented approach to generating OpenAPI Descriptions,
      implemented in PHP
  category:
    - Code Generators
    - Parsers
  repository: https://github.com/goldspecdigital/oooas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PHAgYWxpZ249ImNlbnRlciI+CiAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzIj48aW1nIAogICAgICAgIGFsdD0iT2JqZWN0IE9yaWVudGVkIE9wZW5BUEkgU3BlY2lmaWNhdGlvbiIKICAgICAgICBzcmM9Imh0dHBzOi8vc3Znc2hhcmUuY29tL2kvRDcwLnN2ZyIgd2lkdGg9IjQwMHB4IgogICAgPjwvYT4KPC9wPgoKPHAgYWxpZ249ImNlbnRlciI+CiAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzIj48aW1nIAogICAgICAgIGFsdD0iR2l0SHViIHN0YXJzIiAKICAgICAgICBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3N0YXJzL2dvbGRzcGVjZGlnaXRhbC9vb29hcy5zdmc/c3R5bGU9c29jaWFsIgogICAgPjwvYT4KPC9wPgoKPHAgYWxpZ249ImNlbnRlciI+CiAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzL3RhZ3MiPjxpbWcgCiAgICAgICAgYWx0PSJHaXRIdWIgdGFnIChsYXRlc3QgU2VtVmVyKSIgCiAgICAgICAgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi90YWcvZ29sZHNwZWNkaWdpdGFsL29vb2FzLnN2ZyIKICAgID48L2E+CiAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzL2FjdGlvbnMiPjxpbWcgCiAgICAgICAgYWx0PSJCdWlsZCBzdGF0dXMiCiAgICAgICAgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzL3dvcmtmbG93cy9UZXN0cy9iYWRnZS5zdmciIAogICAgPjwvYT4KICAgIDxhIGhyZWY9Imh0dHBzOi8vcGFja2FnaXN0Lm9yZy9wYWNrYWdlcy9nb2xkc3BlY2RpZ2l0YWwvb29vYXMiPjxpbWcgCiAgICAgICAgYWx0PSJQYWNrYWdpc3QiIAogICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9wYWNrYWdpc3QvZHQvZ29sZHNwZWNkaWdpdGFsL29vb2FzLnN2ZyIKICAgID48L2E+CiAgICA8aW1nIAogICAgICAgIGFsdD0iUEhQIGZyb20gUGFja2FnaXN0IiAKICAgICAgICBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vcGFja2FnaXN0L3BocC12L2dvbGRzcGVjZGlnaXRhbC9vb29hcy5zdmciCiAgICA+CiAgICA8aW1nIAogICAgICAgIGFsdD0iRGVwZW5kZW5jeSBjb3VudCIKICAgICAgICBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvZGVwZW5kZW5jaWVzLTAtYnJpZ2h0Z3JlZW4uc3ZnIiAKICAgID4KICAgIDxpbWcgCiAgICAgICAgYWx0PSJQYWNrYWdpc3QiIAogICAgICAgIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9wYWNrYWdpc3QvbC9nb2xkc3BlY2RpZ2l0YWwvb29vYXMuc3ZnIgogICAgPgo8L3A+CgojIyBJbnRyb2R1Y3Rpb24KCkFuIG9iamVjdCBvcmllbnRlZCBhcHByb2FjaCB0byBnZW5lcmF0aW5nIE9wZW5BUEkgc3BlY3MsIGltcGxlbWVudGVkIGluIFBIUC4gCgpZb3UgY2FuIGJ1aWxkIHVwIHlvdXIgQVBJIHNwZWMgdXNpbmcgaW1tdXRhYmxlIFBIUCBjbGFzc2VzLCBhbmQgdGhlbiBleHBvcnQgdGhlIApzcGVjIHRvIEpTT04gKG9yIFlBTUwgd2l0aCB0aGUgaGVscCBvZiBhbm90aGVyIHBhY2thZ2UpLgoKVGhpcyBwYWNrYWdlIGlzICoqZGVwZW5kZW5jeSBmcmVlKiogYW5kIG1ha2VzIGhlYXZ5IHVzZSBvZiAqKlBIUCA3IGZlYXR1cmVzKiosIAptYWlubHkgYmVpbmcgKip0eXBlIGhpbnRzKiogYW5kIGVuYWJsaW5nICoqc3RyaWN0IHR5cGVzKiouIFRoaXMgc2hvdWxkIG1ha2UgeW91ciAKbGlmZSBhIGxvdCBlYXNpZXIgd2hlbiB3b3JraW5nIHdpdGggYSBnb29kIElERSB0aGF0IGNhbiB1c2UgdGhpcyBpbmZvcm1hdGlvbi4KCiMjIEluc3RhbGxpbmcKCllvdSBjYW4gaW5zdGFsbCB0aGUgcGFja2FnZSB2aWEgY29tcG9zZXI6CmBgYGJhc2gKY29tcG9zZXIgcmVxdWlyZSBnb2xkc3BlY2RpZ2l0YWwvb29vYXMKYGBgCgojIyBFeGFtcGxlCgpTZWUgdGhlIGNvZGUgc2FtcGxlIGJlbG93IGZvciB0aGUgbW9zdCBiYXNpYyB1c2FnZToKCmBgYHBocAp1c2UgR29sZFNwZWNEaWdpdGFsXE9iamVjdE9yaWVudGVkT0FTXE9iamVjdHNcewogICAgSW5mbywgTWVkaWFUeXBlLCBPcGVyYXRpb24sIFBhdGhJdGVtLCBSZXNwb25zZSwgU2NoZW1hLCBUYWcKfTsKdXNlIEdvbGRTcGVjRGlnaXRhbFxPYmplY3RPcmllbnRlZE9BU1xPcGVuQXBpOwoKLy8gQ3JlYXRlIGEgdGFnIGZvciBhbGwgdGhlIHVzZXIgZW5kcG9pbnRzLgokdXNlcnNUYWcgPSBUYWc6OmNyZWF0ZSgpCiAgICAtPm5hbWUoJ1VzZXJzJykKICAgIC0+ZGVzY3JpcHRpb24oJ0FsbCB1c2VyIHJlbGF0ZWQgZW5kcG9pbnRzJyk7CgovLyBDcmVhdGUgdGhlIGluZm8gc2VjdGlvbi4KJGluZm8gPSBJbmZvOjpjcmVhdGUoKQogICAgLT50aXRsZSgnQVBJIFNwZWNpZmljYXRpb24nKQogICAgLT52ZXJzaW9uKCd2MScpCiAgICAtPmRlc2NyaXB0aW9uKCdGb3IgdXNpbmcgdGhlIEV4YW1wbGUgQXBwIEFQSScpOwogICAgCi8vIENyZWF0ZSB0aGUgdXNlciBzY2hlbWEuCiR1c2VyU2NoZW1hID0gU2NoZW1hOjpvYmplY3QoKQogICAgLT5wcm9wZXJ0aWVzKAogICAgICAgIFNjaGVtYTo6c3RyaW5nKCdpZCcpLT5mb3JtYXQoU2NoZW1hOjpGT1JNQVRfVVVJRCksCiAgICAgICAgU2NoZW1hOjpzdHJpbmcoJ25hbWUnKSwKICAgICAgICBTY2hlbWE6OmludGVnZXIoJ2FnZScpLT5leGFtcGxlKDIzKSwKICAgICAgICBTY2hlbWE6OnN0cmluZygnY3JlYXRlZF9hdCcpLT5mb3JtYXQoU2NoZW1hOjpGT1JNQVRfREFURV9USU1FKQogICAgKTsKICAgIAovLyBDcmVhdGUgdGhlIHVzZXIgcmVzcG9uc2UuCiR1c2VyUmVzcG9uc2UgPSBSZXNwb25zZTo6Y3JlYXRlKCkKICAgIC0+c3RhdHVzQ29kZSgyMDApCiAgICAtPmRlc2NyaXB0aW9uKCdPSycpCiAgICAtPmNvbnRlbnQoCiAgICAgICAgTWVkaWFUeXBlOjpqc29uKCktPnNjaGVtYSgkdXNlclNjaGVtYSkKICAgICk7CiAgICAKLy8gQ3JlYXRlIHRoZSBvcGVyYXRpb24gZm9yIHRoZSByb3V0ZSAoaS5lLiBHRVQsIFBPU1QsIGV0Yy4pLgokc2hvd1VzZXIgPSBPcGVyYXRpb246OmdldCgpCiAgICAtPnJlc3BvbnNlcygkdXNlclJlc3BvbnNlKQogICAgLT50YWdzKCR1c2Vyc1RhZykKICAgIC0+c3VtbWFyeSgnR2V0IGFuIGluZGl2aWR1YWwgdXNlcicpCiAgICAtPm9wZXJhdGlvbklkKCd1c2Vycy5zaG93Jyk7CiAgICAKLy8gRGVmaW5lIHRoZSAvdXNlcnMgcGF0aCBhbG9uZyB3aXRoIHRoZSBzdXBwb3J0ZWQgb3BlcmF0aW9ucy4KJHVzZXJzUGF0aCA9IFBhdGhJdGVtOjpjcmVhdGUoKQogICAgLT5yb3V0ZSgnL3VzZXJzJykKICAgIC0+b3BlcmF0aW9ucygkc2hvd1VzZXIpOwogICAgCi8vIENyZWF0ZSB0aGUgbWFpbiBPcGVuQVBJIG9iamVjdCBjb21wb3NlZCBvZmYgZXZlcnl0aGluZyBjcmVhdGVkIGFib3ZlLgokb3BlbkFwaSA9IE9wZW5BcGk6OmNyZWF0ZSgpCiAgICAtPm9wZW5hcGkoT3BlbkFwaTo6T1BFTkFQSV8zXzBfMikKICAgIC0+aW5mbygkaW5mbykKICAgIC0+cGF0aHMoJHVzZXJzUGF0aCkKICAgIC0+dGFncygkdXNlcnNUYWcpOwogICAgCmhlYWRlcignQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyk7CmVjaG8gJG9wZW5BcGktPnRvSnNvbigpOwpgYGAKCiMjIyBZQU1MIG91dHB1dAoKVXNpbmcgdGhlIHNhbWUgY29kZSBhYm92ZSB3aWxsIG91dHB1dCB0aGUgZm9sbG93aW5nIFlBTUw6Cgo+IEluIHRoaXMgZXhhbXBsZSwgdGhlIFlBTUwgbWF5IHNlZW0gc2ltcGxlciB0byBsb29rIGF0LCBob3dldmVyIG9uY2UgdGhlIHNwZWMKc3RhcnRzIHRvIGluY3JlYXNlIGluIHNpemUgLSB0aGUgYWJpbGl0eSB0byByZXVzZSBvYmplY3RzIGFuZCBzcGxpdCB0aGVtIGludG8Kc2VwYXJhdGUgZmlsZXMgZWFzaWx5IHdpbGwgYmUgYSBtYXNzaXZlIGhlbHAuCgpgYGB5YW1sCm9wZW5hcGk6IDMuMC4yCmluZm86CiAgdGl0bGU6IEFQSSBTcGVjaWZpY2F0aW9uCiAgZGVzY3JpcHRpb246IEZvciB1c2luZyB0aGUgRXhhbXBsZSBBcHAgQVBJCiAgdmVyc2lvbjogdjEKcGF0aHM6CiAgIi91c2VycyI6CiAgICBnZXQ6CiAgICAgIHRhZ3M6CiAgICAgIC0gVXNlcnMKICAgICAgc3VtbWFyeTogR2V0IGFuIGluZGl2aWR1YWwgdXNlcgogICAgICBvcGVyYXRpb25JZDogdXNlcnMuc2hvdwogICAgICByZXNwb25zZXM6CiAgICAgICAgJzIwMCc6CiAgICAgICAgICBkZXNjcmlwdGlvbjogT0sKICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHV1aWQKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgYWdlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAyMwogICAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OgogICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCnRhZ3M6Ci0gbmFtZTogVXNlcnMKICBkZXNjcmlwdGlvbjogQWxsIHVzZXIgcmVsYXRlZCBlbmRwb2ludHMKYGBgCgojIyMgT3V0cHV0dGluZyBhcyBKU09OIG9yIFlBTUwKCkJ1aWx0IGluIG91dHB1dCB0byBZQU1MIGhhcyBiZWVuIG9taXR0ZWQgb24gcHVycG9zZSB0byBrZWVwIHRoaXMgcGFja2FnZQpkZXBlbmRlbmN5IGZyZWUuIEhvd2V2ZXIsIHlvdSBjYW4gZWFzaWx5IGNvbnZlcnQgdGhlIGFycmF5IHRvIGEgWUFNTCBzdHJpbmcgCnVzaW5nIHNldmVyYWwgb3BlbiBzb3VyY2UgcGFja2FnZXMuIFNlZSBiZWxvdyBmb3IgYW4gZXhhbXBsZSBvZiAgb3V0cHV0dGluZyB0byAKYm90aCBKU09OIGFuZCBZQU1MOgoKYGBgcGhwCnVzZSBHb2xkU3BlY0RpZ2l0YWxcT2JqZWN0T3JpZW50ZWRPQVNcT3BlbkFwaTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFlhbWxcWWFtbDsKCiRvcGVuQXBpID0gT3BlbkFwaTo6Y3JlYXRlKCk7CgokanNvbiA9ICRvcGVuQXBpLT50b0pzb24oKTsKJGFycmF5ID0gJG9wZW5BcGktPnRvQXJyYXkoKTsKJHlhbWwgPSBZYW1sOjpkdW1wKCRhcnJheSk7CmBgYAoKIyMgR3VpZGFuY2UKCklmIHlvdSB3YW50IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIE9wZW5BUEkgc2NoZW1hLCB0aGVuIGhhdmUgYSBsb29rIGF0IHRoZSAKb2ZmaWNpYWwgW09wZW5BUEkgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQpLgoKQWx0ZXJuYXRpdmVseSwgaWYgeW91IHdvdWxkIGxpa2UgYSBxdWljayByZWZlcmVuY2UsIHRoZW4gY2hlY2sgb3V0IHRoZSAKW09wZW5BUEkgTWFwXShodHRwczovL29wZW5hcGktbWFwLmFwaWhhbmR5bWFuLmlvLz92ZXJzaW9uPTMuMCkgcHJvamVjdCBjcmVhdGVkIApieSBbQXJuYXVkIExhdXJldF0oaHR0cDovL2FwaWhhbmR5bWFuLmlvLykuCgpZb3UgY2FuIHVzZSB0aGlzIGludGVyYWN0aXZlIHRvb2wgdG8gZmlndXJlIG91dCB3aGF0IG9iamVjdHMgZ28gd2hlcmUgYW5kIGhvdwp0aGV5IHJlbGF0ZSB0byBvbmUgYW5vdGhlci4KCiMjIFVzYWdlCgojIyMgU2V0dGluZyBhbmQgdW5zZXR0aW5nIHByb3BlcnRpZXMKCkVhY2ggb2JqZWN0IGhhcyBzZXR0ZXIgbWV0aG9kcyBmb3IgaXQncyBzdXBwb3J0ZWQgcHJvcGVydGllcy4gTW9zdCBvZiB0aGVzZSAKbWV0aG9kcyBhbGxvdyBgbnVsbGAgdmFsdWVzIHdoaWNoIHdpbGwgbmVlZCB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCAoc2VlIHRoZSAKbmV4dCBleGFtcGxlIGZvciBob3cgdG8gdW5zZXQgdXNpbmcgdmFyaWFkaWMgc2V0dGVyIG1ldGhvZHMpLiBUaGlzIHdpbGwgaGF2ZSB0aGUgCmVmZmVjdCBvZiB1bnNldHRpbmcgdGhlIHByb3BlcnR5OgoKYGBgcGhwCiRpbmZvID0gSW5mbzo6Y3JlYXRlKCkKICAgIC0+dGl0bGUoJ0V4YW1wbGUgQVBJJyk7Cgokb3BlbkFwaSA9IE9wZW5BcGk6OmNyZWF0ZSgpCiAgICAtPmluZm8oJGluZm8pOwplY2hvICRvcGVuQXBpLT50b0pzb24oKTsgLy8gJ3siaW5mbyI6IHsidGl0bGUiOiAiRXhhbXBsZSBBUEkifX0nCgokb3BlbkFwaSA9ICRvcGVuQXBpLT5pbmZvKG51bGwpOwplY2hvICRvcGVuQXBpLT50b0pzb24oKTsgLy8gJ3t9JwpgYGAKCkZvciB2YXJpYWRpYyBzZXR0ZXIgbWV0aG9kcywgaWYgeW91IGNhbGwgdGhlIG1ldGhvZCBhbmQgZG9uJ3Qgc3VwcGx5IGFueQpwYXJhbWV0ZXJzLCB0aGVuIHRoaXMgd2lsbCBoYXZlIHRoZSBlZmZlY3Qgb2YgdW5zZXR0aW5nIHRoZSBwcm9wZXJ0eToKCmBgYHBocAokcGF0aCA9IFBhdGhJdGVtOjpjcmVhdGUoKQogICAgLT5yb3V0ZSgnL3VzZXJzJyk7Cgokb3BlbkFwaSA9IE9wZW5BcGk6OmNyZWF0ZSgpCiAgICAtPnBhdGhzKCRwYXRoKTsKZWNobyAkb3BlbkFwaS0+dG9Kc29uKCk7IC8vICd7InBhdGhzIjogeyIvdXNlcnMiOiBbXX19JwoKJG9wZW5BcGkgPSAkb3BlbkFwaS0+cGF0aHMoKTsKZWNobyAkb3BlbkFwaS0+dG9Kc29uKCk7IC8vICd7fScKYGBgCgojIyMgUmV0cmlldmluZyBwcm9wZXJ0aWVzCgpZb3UgY2FuIGVhc2lseSByZXRyaWV2ZSBhIHByb3BlcnR5IHVzaW5nIGEgbWFnaWMgZ2V0dGVyLiBUaGVzZSBoYXZlIGJlZW4KaW1wbGVtZW50ZWQgZm9yIGFsbCBwcm9wZXJ0aWVzIGZvciBldmVyeSBvYmplY3QuIERvY0Jsb2NrcyBoYXZlIGJlZW4gcHJvdmlkZWQKdG8gZ2l2ZSBiZXR0ZXIgYXV0by1jb21wbGV0aW9uIGluIElERXM6CgpgYGBwaHAKJGluZm8gPSBJbmZvOjpjcmVhdGUoKS0+dGl0bGUoJ0V4YW1wbGUgQVBJJyk7CgplY2hvICRpbmZvLT50aXRsZTsgLy8gJ0V4YW1wbGUgQVBJJwpgYGAKCiMjIyBPYmplY3QgSUQKCkV2ZXJ5IG9iamVjdCBoYXMgYW4gb3B0aW9uYWwgYCRvYmplY3RJZGAgcHJvcGVydHkgd2hpY2ggaXMgYSBgc3RyaW5nYCBhbmQgY2FuIAplaXRoZXIgYmUgc2V0IGluIHRoZSBjbGFzcyBjb25zdHJ1Y3RvciBvciB0aGUgcHJlZmVycmVkIGBjcmVhdGUoKWAgbWV0aG9kLiBUaGlzIApwcm9wZXJ0eSBpcyB1c2VkIHdoZW4gYSBwYXJlbnQgb2JqZWN0IG5lZWRzIHRvIHVzZSBhIG5hbWUgZm9yIHRoZSBjaGlsZHJlbi4KCkFuIGV4YW1wbGUgb2YgdGhpcyBpbiB1c2UgaXMgd2hlbiBhIHNjaGVtYSBvYmplY3QgaXMgY29tcG9zZWQgb2Ygb3RoZXIgc2NoZW1hCnByb3BlcnRpZXM6CgpgYGBwaHAKJHNjaGVtYSA9IFNjaGVtYTo6Y3JlYXRlKCkKICAgIC0+dHlwZShTY2hlbWE6OlRZUEVfT0JKRUNUKQogICAgLT5wcm9wZXJ0aWVzKAogICAgICAgIFNjaGVtYTo6Y3JlYXRlKCd1c2VybmFtZScpLT50eXBlKFNjaGVtYTo6VFlQRV9TVFJJTkcpLAogICAgICAgIFNjaGVtYTo6Y3JlYXRlKCdhZ2UnKS0+dHlwZShTY2hlbWE6OlRZUEVfSU5URUdFUikKICAgICk7CiAgICAKZWNobyAkc2NoZW1hLT50b0pzb24oKTsKLyogCnsKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInVzZXJuYW1lIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImFnZSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgIH0KICB9Cn0gCiovCmBgYCAKCklmIGFuIG9iamVjdCBjb250YWlucyBhbnkgaGVscGVyIGNyZWF0aW9uIG1ldGhvZHMsIHRoZW4gdGhlc2UgbWV0aG9kcyBhbHNvIGFsbG93CnlvdSB0byBzcGVjaWZ5IHRoZSBgJG9iamVjdElkYCBwcm9wZXJ0eSBhcyBhIHBhcmFtZXRlci4gVGhlIGNvZGUgc2FtcGxlIGJlbG93IGlzCmZ1bmN0aW9uYWxseSBpZGVudGljYWwgdG8gdGhlIG9uZSBhYm92ZToKCmBgYHBocAokc2NoZW1hID0gU2NoZW1hOjpvYmplY3QoKQogICAgLT5wcm9wZXJ0aWVzKAogICAgICAgIFNjaGVtYTo6c3RyaW5nKCd1c2VybmFtZScpLAogICAgICAgIFNjaGVtYTo6aW50ZWdlcignYWdlJykKICAgICk7CiAgICAKZWNobyAkc2NoZW1hLT50b0pzb24oKTsKLyogCnsKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInVzZXJuYW1lIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImFnZSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgIH0KICB9Cn0gCiovCmBgYCAKCiMjIyAkcmVmCgpUaGUgdXNlIG9mIGAkcmVmYCBoYXMgYmVlbiBhcHBsaWVkIHRvIGV2ZXJ5IHNpbmdsZSBvYmplY3QgdG8gdXNlIGFzIHlvdSB3aXNoLgpZb3UgbWF5IHN1YnN0aXR1dGUgYW55IG9iamVjdCBmb3IgYSBgJHJlZmAgYnkgaW52b2tpbmcgdGhlIGByZWYoKWAgc3RhdGljIG1ldGhvZCAKb24gdGhlIG9iamVjdCBjbGFzczogCgpgYGBwaHAKJHNjaGVtYSA9IEFsbE9mOjpjcmVhdGUoKQogICAgLT5zY2hlbWFzKAogICAgICAgIFNjaGVtYTo6cmVmKCcjL2NvbXBvbmVudHMvc2NoZW1hcy9FeGFtcGxlU2NoZW1hJykKICAgICk7CiAgICAKZWNobyAkc2NoZW1hLT50b0pzb24oKTsKLyoKewogICJhbGxPZiI6IFsKICAgIFsiJHJlZiI6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9FeGFtcGxlU2NoZW1hIl0KICBdCn0KKi8KYGBgCgojIyMgU3BlY2lmaWNhdGlvbiBleHRlbnNpb25zCgpZb3UgY2FuIGFkZCBbc3BlY2lmaWNhdGlvbiBleHRlbnNpb25zXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci92ZXJzaW9ucy8zLjAuMi5tZCNzcGVjaWZpY2F0aW9uRXh0ZW5zaW9ucykKdG8gYWxsIG9iamVjdHM6CgpgYGBwaHAKJHNjaGVtYSA9IFNjaGVtYTo6Y3JlYXRlKCkKICAgIC0+eCgnZm9vJywgJ2JhcicpCiAgICAtPngoJ2l0ZW1zJywgU2NoZW1hOjphcnJheSgpLT5pdGVtcyhTY2hlbWE6OnN0cmluZygpKSk7CiAgICAKZWNobyAkc2NoZW1hLT50b0pzb24oKTsKLyoKewogICJ4LWZvbyI6ICJiYXIiLAogICJ4LWl0ZW1zIjogewogICAgInR5cGUiOiAiYXJyYXkiLAogICAgIml0ZW1zIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9CiAgfQp9CiovCgplY2hvICRzY2hlbWEtPnsneC1mb28nfTsgLy8gJ2JhcicKYGBgCgpZb3UgY2FuIGFsc28gdW5zZXQgc3BlY2lmaWNhdGlvbiBleHRlbnNpb25zIGJ5IGludm9raW5nIHRoZSBgeCgpYCBtZXRob2QgYW5kCm9ubHkgcHJvdmlkaW5nIHRoZSBrZXk6CgpgYGBwaHAKJHNjaGVtYSA9IFNjaGVtYTo6Y3JlYXRlKCkKICAgIC0+eCgnZm9vJywgJ2JhcicpCiAgICAtPngoJ2l0ZW1zJywgU2NoZW1hOjphcnJheSgpLT5pdGVtcyhTY2hlbWE6OnN0cmluZygpKSk7Cgokc2NoZW1hID0gJHNjaGVtYS0+eCgnZm9vJyk7CiAgICAKZWNobyAkc2NoZW1hLT50b0pzb24oKTsKLyoKewogICJ4LWl0ZW1zIjogewogICAgInR5cGUiOiAiYXJyYXkiLAogICAgIml0ZW1zIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9CiAgfQp9CiovCmBgYAoKVG8gcmV0cmlldmUgYW4gYXJyYXkgb2YgYWxsIHRoZSBzcGVjaWZpY2F0aW9uIGV4dGVuc2lvbnMgeW91IGNhbiBjYWxsIHRoZSBgJHhgCnByb3BlcnR5OgoKYGBgcGhwCiRzY2hlbWEgPSBTY2hlbWE6OmNyZWF0ZSgpCiAgICAtPngoJ2ZvbycsICdiYXInKQogICAgLT54KCdpdGVtcycsIFNjaGVtYTo6YXJyYXkoKS0+aXRlbXMoU2NoZW1hOjpzdHJpbmcoKSkpOwoKZWNobyBqc29uX2VuY29kZSgkc2NoZW1hLT54KTsKLyoKewogICJ4LWZvbyI6ICJiYXIiLAogICJ4LWl0ZW1zIjogewogICAgInR5cGUiOiAiYXJyYXkiLAogICAgIml0ZW1zIjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9CiAgfQp9CiovCmBgYAoKIyMjIFZhbGlkYXRpb24KCkluIG9yZGVyIHRvIHBlcmZvcm0gc2NoZW1hIHZhbGlkYXRpb24geW91IG11c3QgZmlyc3QgaW5zdGFsbCB0aGUKYGp1c3RpbnJhaW5ib3cvanNvbi1zY2hlbWFgIHBhY2thZ2U6CgpgYGBiYXNoCmNvbXBvc2VyIHJlcXVpcmUganVzdGlucmFpbmJvdy9qc29uLXNjaGVtYTpeNS4yCmBgYAoKT25jZSBpbnN0YWxsZWQsIHlvdSBtYXkgbm93IG1ha2UgdXNlIG9mIHRoZSBgdmFsaWRhdGUoKWAgbWV0aG9kIG9uIHRoZSBgT3BlbkFwaWAKb2JqZWN0OgoKYGBgcGhwCiRvcGVuQXBpID0gT3BlbkFwaTo6Y3JlYXRlKCk7CiRvcGVuQXBpLT52YWxpZGF0ZSgpOwpgYGAKCl9JZiB5b3UgaGF2ZW4ndCBpbnN0YWxsZWQgdGhlIGBqdXN0aW5yYWluYm93L2pzb24tc2NoZW1hYCBwYWNrYWdlIGFuZCBhdHRlbXB0IHRvIAp1c2UgdGhlIGB2YWxpZGF0ZSgpYCBtZXRob2QsIHRoZW4gYSBgUnVudGltZUV4Y2VwdGlvbmAgd2lsbCBiZSB0aHJvd24uXwoKSWYgdmFsaWRhdGlvbiBmYWlscyBmb3IgdGhlIHNjaGVtYSwgdGhlbiBhIApgR29sZFNwZWNEaWdpdGFsXE9iamVjdE9yaWVudGVkT0FTXEV4Y2VwdGlvbnNcVmFsaWRhdGlvbkV4Y2VwdGlvbmAgd2lsbCBiZSAKdGhyb3duLiBZb3UgY2FuIHVzZSB0aGUgYGdldEVycm9ycygpYCBtZXRob2Qgb24gdGhpcyBleGNlcHRpb24gdG8gcmV0cmlldmUgYWxsCm9mIHRoZSB2YWxpZGF0aW9uIGVycm9ycy4KCiMjIFJ1bm5pbmcgdGhlIHRlc3RzCgpUbyBydW4gdGhlIHRlc3Qgc3VpdGUgeW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZyBjb21tYW5kczoKCmBgYGJhc2gKIyBUbyBydW4gYm90aCBzdHlsZSBhbmQgdW5pdCB0ZXN0cy4KY29tcG9zZXIgdGVzdAoKIyBUbyBydW4gb25seSBzdHlsZSB0ZXN0cy4KY29tcG9zZXIgdGVzdDpzdHlsZQoKIyBUbyBydW4gb25seSB1bml0IHRlc3RzLgpjb21wb3NlciB0ZXN0OnVuaXQKYGBgCgpJZiB5b3UgcmVjZWl2ZSBhbnkgZXJyb3JzIGZyb20gdGhlIHN0eWxlIHRlc3RzLCB5b3UgY2FuIGF1dG9tYXRpY2FsbHkgZml4IG1vc3QsCmlmIG5vdCBhbGwgb2YgdGhlIGlzc3VlcyB3aXRoIHRoZSBmb2xsb3dpbmcgY29tbWFuZDoKCmBgYGJhc2gKY29tcG9zZXIgZml4OnN0eWxlCmBgYAoKIyMgQ29udHJpYnV0aW5nCgpQbGVhc2UgcmVhZCBbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBkZXRhaWxzIG9uIG91ciBjb2RlIG9mIApjb25kdWN0LCBhbmQgdGhlIHByb2Nlc3MgZm9yIHN1Ym1pdHRpbmcgcHVsbCByZXF1ZXN0cyB0byB1cy4KCiMjIFZlcnNpb25pbmcKCldlIHVzZSBbU2VtVmVyXShodHRwOi8vc2VtdmVyLm9yZy8pIGZvciB2ZXJzaW9uaW5nLiBGb3IgdGhlIHZlcnNpb25zIGF2YWlsYWJsZSwgCnNlZSB0aGUgW3RhZ3Mgb24gdGhpcyByZXBvc2l0b3J5XShodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzL3RhZ3MpLiAKCiMjIEF1dGhvcnMKCiogW0dvbGRTcGVjIERpZ2l0YWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb2xkc3BlY2RpZ2l0YWwpCgpTZWUgYWxzbyB0aGUgbGlzdCBvZiBbY29udHJpYnV0b3JzXShodHRwczovL2dpdGh1Yi5jb20vZ29sZHNwZWNkaWdpdGFsL29vb2FzL2NvbnRyaWJ1dG9ycykgCndobyBwYXJ0aWNpcGF0ZWQgaW4gdGhpcyBwcm9qZWN0LgoKIyMgTGljZW5zZQoKVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAtIHNlZSB0aGUgW0xJQ0VOU0UubWRdKExJQ0VOU0UubWQpIApmaWxlIGZvciBkZXRhaWxzLgo=
    readmeEtag: '"6101471bdfa76e2d452d10d8161b41cb75f596c840e2146f2c8f0d1d4022cad8"'
    readmeLastModified: Mon, 21 Mar 2022 13:58:30 GMT
    description: >-
      An object oriented approach to generating OpenAPI specs, implemented in
      PHP.
    created: "2018-09-26T20:11:56Z"
    updated: "2022-04-08T21:55:44Z"
    language: PHP
    archived: false
    stars: 183
    watchers: 183
    forks: 13
    owner: goldspecdigital
    logo: https://avatars.githubusercontent.com/u/31162012?v=4
    license: MIT
    repoEtag: '"dbf16b7b8f0f5c3348f36b32625ad4cb8fd856e8af4e078ee76ecc29905cb0d6"'
    repoLastModified: Fri, 08 Apr 2022 21:55:44 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: CUE
  category: dsl
  language: CUE
  source_description: >-
    CUE is an open source language, with a rich set of APIs and tooling, for
    defining, generating, and validating all kinds of data configuration, APIs,
    database schemas, code, etc. CUE currently supports generating OpenAPI
    through its API.
  link: https://cuelang.org/docs/integrations/openapi/
  v2: false
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Supermodel
  category: dsl
  language: SaaS
  source_description: >-
    Model your data using JSON Schema, refer and remix the models freely,
    convert to various formats including OAS v2/v3.
  link: https://supermodel.io
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Apimatic Transformer
  category: converters
  language: SaaS
  source_description: >-
    Transform API Descriptions to and from RAML, API Blueprint, OAI v2/v3, WSDL,
    etc.
  link: https://apimatic.io/transformer
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source:
    - https://openapi.tools/
    - openapi3 tags
  name:
    - OpenAPI Filter
    - openapi-filter
  category:
    - Converters
    - Parsers
  language: Node.js
  source_description:
    - Filter internal components from OpenAPI Descriptions
    - >-
      OpenAPI 2.0 and 3.0 filter utility. A CLI/module to filter out
      internal/private paths, operations, parameters, schemas etc from OpenAPI
      v1/OpenAPI v2/AsyncAPI definitions. Simply flag any OpenAPI object within
      the definition with an `x-internal` specification extension or target a
      OpenAPI property (tags, methods, OperationId), and it will be removed from
      the output.
  repository: https://github.com/mermade/openapi-filter
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLWZpbHRlcgoKIVtjaV0oaHR0cHM6Ly9naXRodWIuY29tL01lcm1hZGUvb3BlbmFwaS1maWx0ZXIvd29ya2Zsb3dzL2NpL2JhZGdlLnN2ZykKCkZpbHRlciBpbnRlcm5hbCBwYXRocywgb3BlcmF0aW9ucywgcGFyYW1ldGVycywgc2NoZW1hcyBldGMgZnJvbSBPcGVuQVBJL1N3YWdnZXIvQXN5bmNBUEkgZGVmaW5pdGlvbnMuCgpTaW1wbHkgZmxhZyBhbnkgb2JqZWN0IHdpdGhpbiB0aGUgZGVmaW5pdGlvbiB3aXRoIGFuIGB4LWludGVybmFsYCBzcGVjaWZpY2F0aW9uIGV4dGVuc2lvbiwgYW5kIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBvdXRwdXQuCgpGb3IgZXhhbXBsZToKCmBgYHlhbWwKb3BlbmFwaTogMy4wLjAKaW5mbzoKICB0aXRsZTogQVBJCiAgdmVyc2lvbjogMS4wLjAKcGF0aHM6CiAgLzoKICAgIGdldDoKICAgICAgeC1pbnRlcm5hbDogdHJ1ZQogICAgICAuLi4KYGBgCgpXb3JrcyB3aXRoIE9wZW5BUEkvU3dhZ2dlciAyLjAgYW5kIDMuMC54IGFuZCBBc3luY0FQSSBkZWZpbml0aW9ucy4KCmBgYApvcGVuYXBpLWZpbHRlci5qcyA8aW5maWxlPiBbb3V0ZmlsZV0KClBvc2l0aW9uYWxzOgogIGluZmlsZSAgIHRoZSBpbnB1dCBmaWxlCiAgb3V0ZmlsZSAgdGhlIG91dHB1dCBmaWxlCgpPcHRpb25zOgoKICAtLWluZm8gICAgICAgICAgIGluY2x1ZGUgY29tcGxldGUgaW5mbyBvYmplY3Qgd2l0aCAtLXZhbGlkICAgICAgICAgICBbYm9vbGVhbl0KICAtLWludmVyc2UsIC1pICAgIG91dHB1dCBmaWx0ZXJlZCBlbGVtZW50cyBvbmx5ICAgICAgICAgICAgICAgICAgICAgICBbYm9vbGVhbl0KICAtLWZsYWdzLCAtZiAgICAgIGZsYWdzIHRvIGZpbHRlciBieSAgICAgICAgICBbYXJyYXldIFtkZWZhdWx0OiBbIngtaW50ZXJuYWwiXV0KICAtLWZsYWdWYWx1ZXMsIC12IGZsYWcgU3RyaW5nIHZhbHVlcyB0byBtYXRjaCAgICAgICAgICAgICBbYXJyYXldIFtkZWZhdWx0OiBbXV0KICAtLWNoZWNrVGFncyAgICAgIGZpbHRlciBpZiBmbGFncyBnaXZlbiBpbiAtLWZsYWdzIGFyZSBpbiB0aGUgdGFncyBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtib29sZWFuXQogIC0tb3ZlcnJpZGVzLCAtbyAgcHJlZml4ZXMgdXNlZCB0byBvdmVycmlkZSBuYW1lZCBwcm9wZXJ0aWVzW2Fycl0gW2RlZmF1bHQ6IFtdXQogIC0tdmFsaWQgICAgICAgICAgdHJ5IHRvIGVuc3VyZSBpbnZlcnNlIG91dHB1dCBpcyB2YWxpZCAgICAgICAgICAgICAgIFtib29sZWFuXQogIC0tc3RyaXAsIC1zICAgICAgc3RyaXAgdGhlIGZsYWdzIGZyb20gdGhlIGZpbmlzaGVkIHByb2R1Y3QgICAgICAgICAgIFtib29sZWFuXQogIC0tc2VydmVycyAgICAgICAgaW5jbHVkZSBjb21wbGV0ZSBzZXJ2ZXJzIG9iamVjdCB3aXRoIC0tdmFsaWQgICAgICAgIFtib29sZWFuXQogIC0tbGluZVdpZHRoLCAtbCAgbWF4IGxpbmUgd2lkdGggb2YgeWFtbCBvdXRwdXQgICAgICAgICAgW251bWJlcl0gW2RlZmF1bHQ6IC0xXQogIC0tbWF4QWxpYXNDb3VudCAgbWF4aW11bSBZQU1MIGFsaWFzZXMgYWxsb3dlZCAgICAgICAgICBbbnVtYmVyXSBbZGVmYXVsdDogMTAwXQogIC0tY29uZmlnRmlsZSAgICAgVGhlIGZpbGUgJiBwYXRoIGZvciB0aGUgZmlsdGVyIG9wdGlvbnMgICAgICAgICAgICAgICAgIFtwYXRoXQogIC0taGVscCAgICAgICAgICAgU2hvdyBoZWxwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtib29sZWFuXQogIC0tdmVyYm9zZSAgICAgICAgT3V0cHV0IG1vcmUgZGV0YWlscyBvZiB0aGUgZmlsdGVyIHByb2Nlc3MgICAgICAgICAgICAgW2NvdW50XQpgYGAKCnVzZSBgLS1gIHRvIHNlcGFyYXRlIGZsYWdzIG9yIG90aGVyIGFycmF5IG9wdGlvbnMgZnJvbSBmb2xsb3dpbmcgb3B0aW9ucywgaS5lLjoKCmBvcGVuYXBpLWZpbHRlciAtLWZsYWdzIHgtcHJpdmF0ZSB4LWhpZGRlbiAtLSBzb3VyY2UueWFtbCB0YXJnZXQueWFtbGAKCm9yCgpgYGBqYXZhc2NyaXB0CmxldCBvcGVuYXBpRmlsdGVyID0gcmVxdWlyZSgnb3BlbmFwaS1maWx0ZXInKTsKbGV0IG9wdGlvbnMgPSB7fTsgLy8gZGVmYXVsdHMgYXJlIHNob3duCi8vb3B0aW9ucy5pbnZlcnNlID0gZmFsc2U7Ci8vb3B0aW9ucy52YWxpZCA9IGZhbHNlOwovL29wdGlvbnMuZmxhZ3MgPSBbJ3gtaW50ZXJuYWwnXTsKbGV0IHJlcyA9IG9wZW5hcGlGaWx0ZXIuZmlsdGVyKG9iaixvcHRpb25zKTsKYGBgCgpTZWUgdGhlIFt3aWtpXShodHRwczovL2dpdGh1Yi5jb20vTWVybWFkZS9vcGVuYXBpLWZpbHRlci93aWtpKSBmb3IgZnVydGhlciBleGFtcGxlcy4K
    readmeEtag: '"9a4f0985577a31b669d402cd19b751a672aa4a9d858e41dc4c6d61021810b0b0"'
    readmeLastModified: Wed, 28 Jul 2021 08:25:53 GMT
    description: >-
      Filter internal paths, operations, parameters, schemas etc from
      OpenAPI/Swagger/AsyncAPI definitions
    created: "2017-08-02T13:42:57Z"
    updated: "2022-04-24T17:56:35Z"
    language: JavaScript
    archived: false
    stars: 96
    watchers: 96
    forks: 24
    owner: Mermade
    logo: https://avatars.githubusercontent.com/u/15950345?v=4
    license: BSD-3-Clause
    repoEtag: '"b782950442ceae72765d2f69c54621ca387c984b90da24fc56939f3bd06916a1"'
    repoLastModified: Sun, 24 Apr 2022 17:56:35 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: ReadMe
  category: documentation
  link: https://readme.com
  language: SaaS
  source_description: Build beautiful, personalized, interactive developer hubs. 🦉
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: APIMatic Developer Experience Portal
  category: documentation
  link: https://apimatic.io/developer-experience-portal
  language: SaaS
  source_description: >-
    Customizable developer portals packed with language specific documentation,
    client libraries, code samples, an API console and much more.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: APITree
  category: documentation
  repository: https://github.com/apitree
  link: https://apitree.com/
  language: SaaS
  source_description: >-
    HUB for managing and sharing APIs. Converts OpenAPI v2 / v3 files into
    beautiful API documentation.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Kong Enterprise Edition
  category: documentation
  link: https://konghq.com/kong-enterprise-edition/
  language: Lua
  source_description: >-
    Highly customizable developer portal with developer onboarding, integrated
    with the Kong API Gateway
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: RestCase Docs
  category: documentation
  link: https://www.restcase.com/platform/docs
  language: SaaS
  source_description: >-
    An API-first and security-first management platform. Design visually and we
    will create a beautiful API documentation for your APIs.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Stoplight Docs
  category: documentation
  link: https://stoplight.io/api-documentation
  language: SaaS
  source_description: >-
    Create beautiful, customizable, interactive API documentation generated from
    OpenAPI, integrated with Stoplight Studio.
  v2: true
  v3: true
  v3_1: true
  readme: null
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: OpenAPI Server Code Generator (oapi-codegen)
  category:
    - Code Generators
    - Parsers
  link: https://github.com/deepmap/oapi-codegen
  repository: https://github.com/deepmap/oapi-codegen
  language: Go
  source_description: >-
    Generate a web service using the [Echo](https://github.com/labstack/echo)
    framework from an OpenAPI v3 specification
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"ed1bf8785f0f67695663a3698694c3cfe508b6372ac9585ae866a6eaffe0c6fa"'
    readmeLastModified: Tue, 19 Apr 2022 20:14:40 GMT
    description: Generate Go client and server boilerplate from OpenAPI 3 specifications
    created: "2019-02-27T23:59:59Z"
    updated: "2022-04-28T06:49:23Z"
    language: Go
    archived: false
    stars: 1888
    watchers: 1888
    forks: 375
    owner: deepmap
    logo: https://avatars.githubusercontent.com/u/47459865?v=4
    license: Apache-2.0
    repoEtag: '"1af3dc8fc217523b5086a944d54e88d6fd32a3d7c1153694d629fdfb38d344db"'
    repoLastModified: Thu, 28 Apr 2022 06:49:23 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: OpenAPI Client Generators
  category:
    - Code Generators
    - Sdk
  link: https://github.com/zijianhuang/openapiclientgen
  language: C#
  repository: https://github.com/zijianhuang/openapiclientgen
  source_description: >-
    .NET Core command line program to generate strongly typed client API codes
    in C# on .NET Frameworks and .NET Core, and in TypeScript for Angular 5+,
    Aurelia, jQuery, AXIOS and Fetch API.
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"f48f99f94e20c3f684c8429f3aaca7ced611f681d8228fb15e51cf95468e51df"'
    readmeLastModified: Sat, 23 Apr 2022 01:59:46 GMT
    description: >-
      Generate C# and TypeScript client codes from Open API / Swagger
      definitions
    created: "2020-03-14T00:15:16Z"
    updated: "2022-04-11T18:35:27Z"
    language: TypeScript
    archived: false
    stars: 31
    watchers: 31
    forks: 9
    owner: zijianhuang
    logo: https://avatars.githubusercontent.com/u/8484970?v=4
    license: MIT
    repoEtag: '"9a82cf4568c74221464d87dfd1d28184afe968787d538f42a1baf4ad798e5409"'
    repoLastModified: Mon, 11 Apr 2022 18:35:27 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: OpenAPI Generator
  category:
    - Code Generators
    - Sdk
  link: https://openapi-generator.tech
  language: Java
  repository: https://github.com/openapitools/openapi-generator
  source_description: >-
    A template-driven engine to generate documentation, API clients and server
    stubs in different languages by parsing your OpenAPI Description
    (community-driven fork of swagger-codegen)
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"fea556c7e5a3315b5ca80dca38a89652b833415670bf30f958dc7e9fc982a09f"'
    readmeLastModified: Wed, 27 Apr 2022 12:45:24 GMT
    description: >-
      OpenAPI Generator allows generation of API client libraries (SDK
      generation), server stubs, documentation and configuration automatically
      given an OpenAPI Spec (v2, v3)
    created: "2018-05-12T09:57:56Z"
    updated: "2022-04-28T08:25:41Z"
    language: Java
    archived: false
    stars: 11956
    watchers: 11956
    forks: 4137
    owner: OpenAPITools
    logo: https://avatars.githubusercontent.com/u/37325267?v=4
    license: Apache-2.0
    repoEtag: '"9a8eda8d8841e4859cea9f9e39aa635bed9d8d59a2d28ae98e4655b2b48af80f"'
    repoLastModified: Thu, 28 Apr 2022 08:25:41 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Bump
  category: documentation
  link: https://bump.sh
  language: SaaS
  source_description: >-
    Bump generates elegant documentation and changelogs from your OpenAPI
    specifications. Git diff, for your API.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Apitive Studio
  category:
    - documentation
    - gui-editors
    - mock
  language:
    - Angular 7.0
    - Java
    - Saas
  link: https://www.apitive.com
  source_description: >
    A platform for Digital Product Managers and API Consultants to design REST
    APIs with in-built mock and documentation.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Atom/linter-swagger
  category: text-editors
  language: JavaScript
  repository: https://atom.io/packages/linter-swagger
  license: MIT
  source_description: >-
    This plugin for Atom Linter will lint OpenAPI, both JSON and YAML using
    swagger-parser node package.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Atom/linter-openapi
  category: text-editors
  language: JavaScript
  repository: https://atom.io/packages/linter-openapi
  license: MIT
  source_description: >-
    This plugin for Atom Linter will lint OpenAPI YAML files using
    openapi-enforcer node package.
  v2: false
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: SwaggerHub
  category: text-editors
  language:
    - SaaS
    - On-Premise NodeJS
  repository: null
  link: https://swagger.io/tools/swaggerhub/
  source_description: >-
    API design and documentation platform to improve collaboration, standardize
    development workflow and centralize their API discovery and consumption.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Senya Editor
  category: text-editors
  language: Java
  link: https://senya.io
  source_description: >-
    JetBrains IDE plugin to show Swagger UI as a preview, for visual feedback as
    you edit.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: RepreZen API Studio
  category: gui-editors
  language: Java
  link: https://www.reprezen.com/
  repository: null
  source_description: >
    RepreZen API Studio is an integrated workbench that brings API-first design
    into focus for your whole team, harmonizes your API designs, and

    generates APIs that click into client apps.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Stoplight Studio
  category:
    - gui-editors
    - text-editor
  language:
    - Desktop
    - SaaS
  link: https://stoplight.io/studio
  source_description: >
    Stoplight Studio is a GUI/text editor with linting and mocking built right
    in.  It can run on the desktop with local files, and in the browser powered
    by your  existing GitHub, GitLab, or BitBucket repos.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: ApiBldr
  category: gui-editors
  language:
    - Angular 9.0
    - Saas
  link: https://www.apibldr.com/
  source_description: |
    Web-Based API Designer for OpenAPI (swagger) and AsyncAPI specifications.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: RestCase Designer
  category: gui-editors
  language:
    - Angular 9.0
    - Saas
  link: https://www.restcase.com/platform/design
  source_description: >
    A design-first API managment platform with WYSIWYG API Designer for OpenAPI
    and AsyncAPI specifications.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Meeshkan
  category:
    - Learning
    - Mock
    - Server Implementations
  language: Python
  link: https://github.com/meeshkan/meeshkan
  repository: https://github.com/meeshkan/meeshkan
  source_description: >-
    Mock HTTP APIs through a combination of API definitions, recorded traffic
    and code. Used for sandboxes, as well as automated and exploratory testing.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBNZWVzaGthbiDigJQgdGhlIGZyb250ZW5kIG1vbm8tcmVwbwoKVGhpcyByZXBvIGNvbnRhaW5zIDQgYXBwcyB0aGF0IGhhdmUgc29tZSAnZnJvbnRlbmQnIHV0aWxpdHkgdG8gdGhlIGNvbXBhbnkuCgoxLiBgY3VzdG9tLWdyYXBocWxgIHRoaXMgaXMgd2hlcmUgb3VyIDhiYXNlIGN1c3RvbSBsb2dpYyBsaXZlcy4gWzhiYXNlIGxvZ2ljXShodHRwczovL2RvY3MuOGJhc2UuY29tL2RvY3MvOGJhc2UtY29uc29sZS9wbGF0Zm9ybS10b29scy9mdW5jdGlvbnMvKSBhbGxvd3MgeW91IHRvIGRlcGxveSBjdXN0b20gZnVuY3Rpb25hbGl0eSBhbmQgaXMgdGhlIGJhc2VsaW5lIGZvciBjb21taXR0aW5nIGRhdGFiYXNlIG1pZ3JhdGlvbnMuIEluIG91ciBjYXNlIHdlIGhhdmUgYW4gaW52aXRlIGxpbmsgW3RyaWdnZXIgYW5kIHVwZGF0ZXJdKC9Vc2Vycy9tYWtlbm5hc211dHovRG9jdW1lbnRzL0dpdEh1Yi9tZWVzaGthbi9hcHBzL2N1c3RvbS1ncmFwaHFsLzhiYXNlLnltbCkuIEluIG9yZGVyIHRvIHVzZSB0aGlzIHJlcG8sIHlvdSdsbCBuZWVkIHRvIGJlIGZhbWlsaWFyIHdpdGggdGhlIFs4YmFzZSBDTEldKGh0dHBzOi8vZG9jcy44YmFzZS5jb20vZG9jcy9kZXZlbG9wbWVudC10b29scy9jbGkpLgoyLiBgb2ctY2FyZHNgIGlzIGEgZnJvbnRlbmQgbWljcm8tc2VydmljZSB0aGF0IGdlbmVyYXRlcyBkeW5hbWljIGltYWdlcyBmb3IgdGhlIHNoYXJpbmcgY2FyZHMgc2hvd24gb24gc29jaWFscyBmb3Igb3VyIHdlYnNpdGUuIEl0IGlzIGRlcGxveWVkIG9uIFZlcmNlbCBhbmQgc28gZmFyIGhhcyBuZWVkZWQgbGl0dGxlIHRvIG5vIG1haW50YWluYW5jZS4KMy4gYHdlYmFwcGAgdGhpcyBpcyB0aGUgbW9zdCBhY3RpdmUgYXBwIGluIHRoaXMgcmVwby4gSXQgaXMgdGhlIG1lZXNoa2FuIHdlYmFwcCAoaHR0cHM6Ly9hcHAubWVlc2hrYW4uY29tKSB3aGljaCBpcyBkZXBsb3llZCBvbiBWZXJjZWwuCjQuIGB3ZWJzaXRlYCB0aGlzIGlzIGhlcmUgaW4gYSBob3BlZnVsIG1lYXN1cmUgYnV0IG5vdCBjdXJyZW50bHkgaW4gdXNlLiBDdXJyZW50bHkgb3VyIGxpdmUgd2Vic2l0ZSByZXBvIGlzIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWVzaGthbi93ZWJzaXRlLiBXZSdkIGxpa2UgdG8gdHJhbnNpdGlvbiB0aGlzIGhlcmUgdG8gc2hhcmUgdGhlIGNoYWtyYS11aSBsaWJyYXJ5LgoKVGhpcyByZXBvIGFsc28gY29udGFpbnMgMyBgbGlic2Agb3IgTlggbGlicmFyaWVzIHdoaWNoIGFyZSBzaGFyZWQgY29kZSBiZXR3ZWVuIGFsbCBvZiB0aGUgZnJvbnRlbmQgcHJvamVjdHMuCgoxLiBgY2hha3JhLXRoZW1lYCBzZXJ2ZXMgYXMgdGhlIGN1c3RvbSBbQ2hha3JhIFVJXShodHRwczovL2NoYWtyYS11aS5jb20vKSBzZXR1cCB0aGF0IHdlIHVzZSBhY2Nyb3NzIGFueSBmcm9udGVuZCBwcm9qZWN0cy4KMi4gYGRvd25sb2FkYWJsZS1zY3JpcHRgIGlzIHRoZSBtaWNyb3NlcnZpY2UgdGhhdCBjb252ZXJ0cyB0aGUgdXNlciBzdG9yeSBldmVudHMvY29tbWFuZHMgaW4gOGJhc2UgaW50byBhIFB1cHBldGVlciBzY3JpcHQuCjMuIGBtZWVzaGthbi10eXBlc2AgaXMgYSBjZW50cmFsaXplZCBwbGFjZSBmb3IgY3VzdG9tIFR5cGVTY3JpcHQgaW50ZXJmYWNlcyB3ZSB1c2UuIFNvbWUgYXJlIGJ1aWx0IGN1c3RvbSBidXQgbW9zdCBjb21lIGZyb20gOGJhc2UgdXNpbmcgYSBwYWNrYWdlIGNhbGxlZCBgZ3JhcGhxbC1jb2RlLWdlbmAuCgojIyBHZXR0aW5nIHRoZSBgd2ViYXBwYCBwcm9qZWN0IHdvcmtpbmcgbG9jYWxseQoKVGhpcyBndWlkZSB3aWxsIHVzZSBgeWFybmAuIEZlZWwgZnJlZSB0byB1c2UgdGhlIGBucG1gIGVxdWl2YWxlbnQgdG8gbXkgaW5zdHJ1Y3Rpb25zIGlmIHRoYXQgd29ya3MgYmV0dGVyIGZvciB5b3UhCgoxLiBBZnRlciBjbG9uaW5nIHRoaXMgcmVwbyB0byB5b3VyIGNvbXB1dGVyIOKAlCBgY2RgIGludG8gdGhlIGJhc2UgcmVwb3NpdG9yeSAoYG1lZXNoa2FuYCkuCjIuIER1cGxpY2F0ZSB0aGUgYC5lbnYudGVtcGxhdGVgIGZpbGUsIHJlbmFtaW5nIGl0IHRvIGAuZW52YC4KICAgLSBgQVVUSDBfQ0xJRU5UX0lEYCwgYEFVVEgwX0NMSUVOVF9TRUNSRVRgLCBhbmQgYFNFU1NJT05fQ09PS0lFX1NFQ1JFVGAgY2FuIGFsbCBiZSBmb3VuZCBpbiBBdXRoMC4gSWYgeW91IGRvIG5vdCBoYXZlIGFjY2VzcyB0byBBdXRoMCwgY29udGFjdCBAazRtNCBvciBAS2Vuem9CZW56byB0byBnZXQgeW91IHRoZSB0b2tlbnMuIFRoZSB2YWx1ZSBvZiBgQVVUSDBfRE9NQUlOYCBpcyAibWVlc2hrYW4uZXUuYXV0aDAuY29tIi4KICAgLSBUaGUgdG9rZW4gYE5FWFRfUFVCTElDX0VJR0hUQkFTRV9FTkRQT0lOVGAgY2hhbmdlcyB0aGUgOGJhc2UgZW52aXJvbm1lbnQgYmV0d2VlbiBgc3RhZ2luZ2AgImh0dHBzOi8vYXBpLjhiYXNlLmNvbS9ja2hxZHo1bXUwMXIzMDdtbjZzemNiZGtlX3N0YWdpbmciIGFuZCBgTWFzdGVyYCAiaHR0cHM6Ly9hcGkuOGJhc2UuY29tL2NraHFkejVtdTAxcjMwN21uNnN6Y2Jka2UiLgogICAtIFRoZSB0b2tlbiBgRUlHSFRfQkFTRV9BVVRIX1BST0ZJTEVfSURgIGNhbiBiZSBmb3VuZCBpbiA4YmFzZSAobG9nIGluIGZvdW5kIGluIDFwdykuCiAgIC0gVGhlIGBURVNUX1VSTGAgZGVwZW5kcyBvbiBob3cgeW91IHNlcnZlIHlvdXIgd2ViYXBwIGxvY2FsbHkuIElmIHlvdSB1c2UgdGhlIGNvbW1hbmQgYHlhcm4gc3RhcnQgd2ViYXBwYCB0aGUgdmFsdWUgd2lsbCBiZSAibG9jYWxob3N0OjMwMDAiLiBDaGFuZ2UgYWNjb3JkaW5nbHkgZm9yIGEgZGlmZmVyZW50IHBvcnQuCiAgIC0gVGhlIGBDT09LSUVgIHRva2VuIGNhbiBiZSBmb3VuZCBpbiBBdXRoMCwgb3IgaHR0cHM6Ly9hcHAubWVlc2hrYW4uY29tIHVuZGVyIG91ciBpbnRlcm5hbCBgTWVlc2hrYW4gd2ViYXBwYCBwcm9qZWN0LCBhdXRoIHRva2Vucy4KICAgLSBUaGUgYE1JWFBBTkVMX1RPS0VOYCBjYW4gYmUgZm91bmQgaW4gTWl4cGFuZWwsIGJ1dCBmb3IgbG9jYWwgZGV2ZWxvcG1lbnQgKHRvIG5vdCBwb2xsdXRlIHByb2R1Y3Rpb24gYW5hbHl0aWNzKSBJJ2Qgc3VnZ2VzdCB5b3UgdXNlIHRoZSBgVGVzdCBkYXRhYCBwcm9qZWN0IHRva2VuIG9mICJkZDdmZWJjOGMyNjk3ZmNhOGVkMmQ1NTIzNDA5YTI4MSIuCjMuIFdoaWxlIHN0aWxsIGluIHRoZSBiYXNlIHJlcG9zaXRvcnksIGluc3RhbGwgdGhlIHByb2plY3QgZGVwZW5kZW5jaWVzIHdpdGggYHlhcm5gLgo0LiBTdGFydCBhIGRldmVsb3BtZW50IHNlcnZlciBvZiB0aGUgd2ViYXBwIHVzaW5nIHRoZSBjb21tYW5kIGB5YXJuIHN0YXJ0IHdlYmFwcGAuIFlvdSBzaG91bGQgdGhlbiBzZWUgYSBtZXNzYWdlIHRoYXQgdGhlIHBvcnQgMzAwMCBpcyBub3cgb3BlbiBhbmQgeW91IGNhbiB2aXNpdCBgbG9jYWxob3N0OjMwMDBgLgo=
    readmeEtag: '"cf6d4cdd8902b6967c2411601561ad7f98ae2a51882482f4bb5024759b9ca8c0"'
    readmeLastModified: Sun, 05 Sep 2021 00:37:40 GMT
    description: The Meeshkan frontend stack monorepo.
    created: "2020-11-12T02:01:32Z"
    updated: "2022-02-01T12:49:53Z"
    language: TypeScript
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: meeshkan
    logo: https://avatars.githubusercontent.com/u/32298527?v=4
    repoEtag: '"8467afad6b5568c02320c197c34a5c7dce04b17c4f3a37d1e0fb4087fd25ca23"'
    repoLastModified: Tue, 01 Feb 2022 12:49:53 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Swagger Inspector
  category: learning
  language: SaaS
  link: https://swagger.io/tools/swagger-inspector/
  source_description: >-
    Run mock requests in a webapp and Swagger Inspector infers your OpenAPI
    description.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: MockLab
  category: mock
  language: SaaS
  link: https://www.mocklab.io/docs/getting-started/
  repository: https://www.mocklab.io/docs/getting-started/
  source_description: SaaS platform to upload your spec to create a mock server
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Unmock
  category:
    - Mock
    - Testing
  link: https://unmock.io
  language: Node.js
  repository: https://github.com/unmock/unmock-js
  source_description: >-
    API integration testing library that intercepts outgoing requests and serves
    back mock data based on the OpenAPI descriptions.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"db660d556aec059c5517c0f2723fdae08ed9d46ee416ce2d401d6406d63a41bc"'
    readmeLastModified: Mon, 23 Nov 2020 10:05:08 GMT
    description: Fuzz test your REST API calls
    created: "2018-11-18T16:24:30Z"
    updated: "2022-03-06T12:45:17Z"
    language: TypeScript
    archived: false
    stars: 91
    watchers: 91
    forks: 6
    owner: meeshkan
    logo: https://avatars.githubusercontent.com/u/32298527?v=4
    repoEtag: '"e8b1307b50f1d0edebb728fe797a09f1620ef4798f960a76a6d50138b4e01e9e"'
    repoLastModified: Sun, 06 Mar 2022 12:45:17 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Mockintosh
  category: mock
  language:
    - CLI
    - Docker
  link: https://mockintosh.io
  source_description: >-
    Mocks for CloudNative Environments - Converts OpenAPI files to Mocks and use
    them to develop in isolated environments and test edge cases, Async call to
    queues such as Kafka or RabbitMQ or simulate performance & chaos testing
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: tsoa
  category:
    - Server
    - Data Validation
  language: TypeScript
  link: https://github.com/lukeautry/tsoa
  repository: https://github.com/lukeautry/tsoa
  source_description: >-
    Creates OpenAPI docs and provides free runtime validation for your Koa,
    Express, Hapi (and more) services
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGRpdiBhbGlnbj0iY2VudGVyIj4KICA8YSBocmVmPSJodHRwczovL3Rzb2EtY29tbXVuaXR5LmdpdGh1Yi5pby9kb2NzLyIgdGFyZ2V0PSJibGFuayI+CiAgICA8aDE+dHNvYTwvaDE+CiAgPC9hPgpQcm9ub3VuY2VkIHNvwrd1aAoKT3BlbkFQSS1jb21wbGlhbnQgUkVTVCBBUElzIHVzaW5nIFR5cGVTY3JpcHQgYW5kIE5vZGUKCiFbYnVpbGQgc3RhdHVzXShodHRwczovL2dpdGh1Yi5jb20vbHVrZWF1dHJ5L3Rzb2EvYWN0aW9ucy93b3JrZmxvd3MvcnVuVGVzdHNPblB1c2gueW1sL2JhZGdlLnN2ZykKWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvdHNvYS9sYXRlc3QpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90c29hKQoKPC9kaXY+CgojIyBHb2FsCgotIFR5cGVTY3JpcHQgY29udHJvbGxlcnMgYW5kIG1vZGVscyBhcyB0aGUgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCBmb3IgeW91ciBBUEkKLSBBIHZhbGlkIE9wZW5BUEkgKGZvcm1lcmx5IFN3YWdnZXIpIHNwZWMgKDIuMCBvciAzLjAgaWYgeW91IGNob29zZSDwn5iNKSBpcyBnZW5lcmF0ZWQgZnJvbSB5b3VyIGNvbnRyb2xsZXJzIGFuZCBtb2RlbHMsIGluY2x1ZGluZzoKICAtIFBhdGhzIChlLmcuIEdFVCAvdXNlcnMpCiAgLSBEZWZpbml0aW9ucyBiYXNlZCBvbiBUeXBlU2NyaXB0IGludGVyZmFjZXMgKG1vZGVscykKICAtIFBhcmFtZXRlcnMvbW9kZWwgcHJvcGVydGllcyBtYXJrZWQgYXMgcmVxdWlyZWQgb3Igb3B0aW9uYWwgYmFzZWQgb24gVHlwZVNjcmlwdCAoZS5nLiBteVByb3BlcnR5Pzogc3RyaW5nIGlzIG9wdGlvbmFsIGluIHRoZSBPcGVuQVBJIHNwZWMpCiAgLSBqc0RvYyBzdXBwb3J0ZWQgZm9yIG9iamVjdCBkZXNjcmlwdGlvbnMgKG1vc3Qgb3RoZXIgbWV0YWRhdGEgY2FuIGJlIGluZmVycmVkIGZyb20gVHlwZVNjcmlwdCB0eXBlcykKLSBSb3V0ZXMgYXJlIGdlbmVyYXRlZCBmb3IgbWlkZGxld2FyZSBvZiBjaG9pY2UKICAtIEV4cHJlc3MsIEhhcGksIGFuZCBLb2EgY3VycmVudGx5IHN1cHBvcnRlZCwgb3RoZXIgbWlkZGxld2FyZSBjYW4gYmUgc3VwcG9ydGVkIHVzaW5nIGEgc2ltcGxlIGhhbmRsZWJhcnMgdGVtcGxhdGUKICAtIFZhbGlkYXRlIHJlcXVlc3QgcGF5bG9hZHMKCiMjIFBoaWxvc29waHkKCi0gUmVseSBvbiBUeXBlU2NyaXB0IHR5cGUgYW5ub3RhdGlvbnMgdG8gZ2VuZXJhdGUgQVBJIG1ldGFkYXRhIGlmIHBvc3NpYmxlCi0gSWYgcmVndWxhciB0eXBlIGFubm90YXRpb25zIGFyZW4ndCBhbiBhcHByb3ByaWF0ZSB3YXkgdG8gZXhwcmVzcyBtZXRhZGF0YSwgdXNlIGRlY29yYXRvcnMKLSBVc2UganNkb2MgZm9yIHB1cmUgdGV4dCBtZXRhZGF0YSAoZS5nLiBlbmRwb2ludCBkZXNjcmlwdGlvbnMpCi0gTWluaW1pemUgYm9pbGVycGxhdGUKLSBNb2RlbHMgYXJlIGJlc3QgcmVwcmVzZW50ZWQgYnkgaW50ZXJmYWNlcyAocHVyZSBkYXRhIHN0cnVjdHVyZXMpLCBidXQgY2FuIGFsc28gYmUgcmVwcmVzZW50ZWQgYnkgY2xhc3NlcwotIFJ1bnRpbWUgdmFsaWRhdGlvbiBvZiB0c29hIHNob3VsZCBiZWhhdmUgYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0byB0aGUgc3BlY2lmaWNhdGlvbnMgdGhhdCB0aGUgZ2VuZXJhdGVkIE9wZW5BUEkgMi8zIHNjaGVtYSBkZXNjcmliZXMuIEFueSBkaWZmZXJlbmNlcyBpbiB2YWxpZGF0aW9uIGxvZ2ljIGFyZSBjbGFyaWZpZWQgYnkgbG9nZ2luZyB3YXJuaW5ncyBkdXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgdGhlIE9wZW5BUEkgU3BlY2lmaWNhdGlvbiAoT0FTKSBhbmQvb3IgdGhlIHJvdXRlcy4KICAtIFBsZWFzZSBub3RlIHRoYXQgYnkgZW5hYmxpbmcgT3BlbkFQSSAzIHlvdSBtaW5pbWl6ZSB0aGUgY2hhbmNlcyBvZiBkaXZlcmdlbnQgdmFsaWRhdGlvbiBsb2dpYyBzaW5jZSBPcGVuQVBJIDMgaGFzIGEgbW9yZSBleHByZXNzaXZlIHNjaGVtYSBzeW50YXguCgojIyBHZXR0aW5nIFN0YXJ0ZWQKCi0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vdHNvYS1jb21tdW5pdHkuZ2l0aHViLmlvL2RvY3MvKQotIFtBUEkgUmVmZXJlbmNlXShodHRwczovL3Rzb2EtY29tbXVuaXR5LmdpdGh1Yi5pby9yZWZlcmVuY2UvKQotIFtHZXR0aW5nIHN0YXJ0ZWQgZ3VpZGVdKGh0dHBzOi8vdHNvYS1jb21tdW5pdHkuZ2l0aHViLmlvL2RvY3MvZ2V0dGluZy1zdGFydGVkKQoKIyMgRXhhbXBsZXMKCkNoZWNrIG91dCB0aGUgW2d1aWRlc10oaHR0cHM6Ly90c29hLWNvbW11bml0eS5naXRodWIuaW8vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQpCgpTZWUgZXhhbXBsZSBjb250cm9sbGVycyBpbiBbdGhlIHRlc3RzXSh0ZXN0cy9maXh0dXJlcy9jb250cm9sbGVycykKClNlZSBleGFtcGxlIG1vZGVscyBpbiBbdGhlIHRlc3RzXSh0ZXN0cy9maXh0dXJlcy90ZXN0TW9kZWwudHMpCgojIyBIZWxwIHdhbnRlZAoKIyMjIENvbnRyaWJ1dGluZyBjb2RlCgpUbyBjb250cmlidXRlICh2aWEgYSBQUiksIHBsZWFzZSBmaXJzdCBzZWUgdGhlIFtDb250cmlidXRpbmcgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlYXV0cnkvdHNvYS90cmVlL21hc3Rlci9kb2NzL0NPTlRSSUJVVElORy5tZCkKCiMjIyBCZWNvbWluZyBhIG1haW50YWluZXIKCnRzb2Egd2FudHMgYWRkaXRpb25hbCBtYWludGFpbmVycyEgVGhlIGxpYnJhcnkgaGFzIGluY3JlYXNlZCBpbiBwb3B1bGFyaXR5IGFuZCBoYXMgcXVpdGUgYSBsb3Qgb2YgcHVsbCByZXF1ZXN0cyBhbmQgaXNzdWVzLiBbUGxlYXNlIHBvc3QgaW4gdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL2x1a2VhdXRyeS90c29hL2lzc3Vlcy8yMzYpIGlmIHlvdSdyZSB3aWxsaW5nIHRvIHRha2Ugb24gdGhlIHJvbGUgb2YgYSBtYWludGFpbmVyLgo=
    readmeEtag: '"1dd7fcf27dc7c8c710dc9406db17d37c22e269cd8c1d8d9bf9d9ff6b16572cce"'
    readmeLastModified: Tue, 19 Apr 2022 14:08:08 GMT
    description: Build OpenAPI-compliant REST APIs using TypeScript and Node
    created: "2016-06-17T10:42:50Z"
    updated: "2022-04-28T09:54:58Z"
    language: TypeScript
    archived: false
    stars: 2103
    watchers: 2103
    forks: 373
    owner: lukeautry
    logo: https://avatars.githubusercontent.com/u/8770560?v=4
    license: MIT
    repoEtag: '"9251980d4ee0b42d3e6b314c384018cba52b75c53dcabdcd9f41c8c4d09177ce"'
    repoLastModified: Thu, 28 Apr 2022 09:54:58 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: yii2-app-api
  category:
    - Server
    - Mock
  language: PHP
  repository: https://github.com/cebe/yii2-app-api
  source_description: >
    Generate Server side API code with routing, models, data validation and
    database schema from an OpenAPI description. Based on Yii Framework.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"d7107de90443e4ebeb34487dd2f6a0c6d87eac983d46d7f2dd89e9ade894efb9"'
    readmeLastModified: Thu, 28 Oct 2021 07:33:05 GMT
    description: OpenAPI Spec to API in 3, 2, 1... done!
    created: "2019-03-13T11:03:55Z"
    updated: "2022-03-11T05:19:54Z"
    language: PHP
    archived: false
    stars: 89
    watchers: 89
    forks: 11
    owner: cebe
    logo: https://avatars.githubusercontent.com/u/189796?v=4
    license: MIT
    repoEtag: '"f3c03743bc9c1e1b533aa460e075fc05f24678e860693a3b794497cce48d1965"'
    repoLastModified: Fri, 11 Mar 2022 05:19:54 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: Falcon Heavy
  category:
    - Server
    - Mock
  language: Python
  link: https://github.com/NotJustAToy/falcon-heavy
  repository: https://github.com/notjustatoy/falcon-heavy
  source_description: >
    The framework for building app backends and microservices via the API
    design-first workflow.
  v3: true
  repositoryMetadata:
    base64Readme: >-
      KioqKioqKioqKioqCkZhbGNvbiBIZWF2eQoqKioqKioqKioqKioKCgpBYm91dAojIyMjIwoKVGhlIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgYXBwIGJhY2tlbmRzIGFuZCBtaWNyb3NlcnZpY2VzIGJ5IHNwZWNpZmljYXRpb24tZmlyc3QgQVBJIGRlc2lnbiBhcHByb2FjaCBiYXNlZCBvbiB0aGUgYE9wZW5BUEkgU3BlY2lmaWNhdGlvbiAzIDxodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbj5gX18uCgpGYWxjb24gSGVhdnkgY29udmVydHMgYW5kIHZhbGlkYXRlcyByZXF1ZXN0cyBhbmQgcmVuZGVycyByZXNwb25zZXMgY29ycmVzcG9uZGVkIHNwZWNpZmljYXRpb24uIEl0IGNhbiBiZSB1c2VkIHdpdGggYERqYW5nbyA8aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vPmBfXywgYEZhbGNvbiA8aHR0cHM6Ly9mYWxjb25mcmFtZXdvcmsub3JnLz5gX18gYW5kIGBGbGFzayA8aHR0cHM6Ly9wYWxsZXRzcHJvamVjdHMuY29tL3AvZmxhc2svPmBfXyB3ZWIgZnJhbWV3b3Jrcy4KCkluc3RhbGxhdGlvbgojIyMjIyMjIyMjIyMKClJlY29tbWVuZGVkIHdheSAodmlhIHBpcCk6CgouLiBjb2RlOjogYmFzaAoKICAgICQgcGlwIGluc3RhbGwgZmFsY29uLWhlYXZ5CgpVc2FnZQojIyMjIwoKMS4gSW1wbGVtZW50IGFsbCBhYnN0cmFjdCBtZXRob2RzIGZyb20gYSBjb3JyZXNwb25kaW5nIGRlY29yYXRvciBjbGFzcy4KMi4gU2V0IHVwIHJvdXRpbmcgYmFzZWQgb24gYSBzcGVjaWZpY2F0aW9uLgozLiBEZWNvcmF0ZSB2aWV3cyB3aXRoIHlvdXIgZGVjb3JhdG9yLgoKTGltaXRhdGlvbnMKIyMjIyMjIyMjIyMKCiogWE1MIGlzIG5vdCBzdXBwb3J0ZWQuCiogQ2FuJ3QgdXNlIHJlc2VydmVkIGNoYXJhY3RlcnMgaW4gcGF0aCBhbmQgcXVlcnkgcGFyYW1ldGVycy4KKiBSZWN1cnNpdmUgZGVwZW5kZW5jaWVzIGRldGVjdGlvbiBub3QgaW1wbGVtZW50ZWQuCgpMaWNlbnNlCiMjIyMjIyMKCkNvcHlyaWdodCAyMDE5LTIwMjAgTm90IEp1c3QgQSBUb3kgQ29ycC4KCkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwp5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoKICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCgpVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgpTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgo=
    readmeEtag: '"b6f00606b32f3c6d34db73ff30c0e1b96ae6b7fec962a62b6a2c35dd72128c2e"'
    readmeLastModified: Mon, 02 Mar 2020 08:05:48 GMT
    description: >-
      The framework for building app backends and microservices by
      specification-first API design approach based on the OpenAPI Specification
      3
    created: "2019-12-05T08:57:06Z"
    updated: "2022-04-09T00:09:07Z"
    language: Python
    archived: false
    stars: 16
    watchers: 16
    forks: 0
    owner: NotJustAToy
    logo: https://avatars.githubusercontent.com/u/58468738?v=4
    license: Apache-2.0
    repoEtag: '"cc390e154154a544cafb983a93aa26d1fda67f6c5e224408f0a77938d03e5a83"'
    repoLastModified: Sat, 09 Apr 2022 00:09:07 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: express-openapi-validator
  category:
    - Description Validators
    - Data Validators
  repository: https://github.com/cdimascio/express-openapi-validator
  language: JavaScript
  source_description: 🦋 Auto-validate API requests and responses in ExpressJS.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyDwn6aLIGV4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3IKClshW10oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yLnN2Zz9icmFuY2g9bWFzdGVyKV0oIykgWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3Iuc3ZnKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvcikgWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9kbS9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yP2NvbG9yPWJsdWUpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yKSBbIVtBbGwgQ29udHJpYnV0b3JzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2FsbF9jb250cmlidXRvcnMtNTQtZGFya2N5YW4uc3ZnP3N0eWxlPWZsYXQpXSgjY29udHJpYnV0b3JzKSBbIVtDb3ZlcmFnZSBTdGF0dXNdKGh0dHBzOi8vY292ZXJhbGxzLmlvL3JlcG9zL2dpdGh1Yi9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvcj9icmFuY2g9bWFzdGVyKSBbIVtDb2RhY3kgQmFkZ2VdKGh0dHBzOi8vYXBpLmNvZGFjeS5jb20vcHJvamVjdC9iYWRnZS9HcmFkZS8xNTcwYTA2ZjYwOTM0NWRkYjIzNzExNGJiZDZjZWVkNyldKGh0dHBzOi8vd3d3LmNvZGFjeS5jb20vbWFudWFsL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yP3V0bV9zb3VyY2U9Z2l0aHViLmNvbSZ1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9jb250ZW50PWNkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yJnV0bV9jYW1wYWlnbj1CYWRnZV9HcmFkZSkgWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdHRlci9yb29tL2NkaW1hc2Npby1vc3MvY29tbXVuaXR5P2NvbG9yPSUyM2ViMjA1YSldKGh0dHBzOi8vZ2l0dGVyLmltL2NkaW1hc2Npby1vc3MvY29tbXVuaXR5KSBbIVtHaXRwb2QgUmVhZHktdG8tQ29kZV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9HaXRwb2QtUmVhZHktLXRvLS1Db2RlLWJsdWU/bG9nbz1naXRwb2QpXShodHRwczovL2dpdHBvZC5pby8jaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yKSBbIVtdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvZG9jdW1lbnRhdGlvbi13aWtpLWluZm9ybWF0aW9uYWwpXShodHRwczovL2dpdGh1Yi5jb20vY2RpbWFzY2lvL2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3Ivd2lraSkgWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2xpY2Vuc2UtTUlULWJsdWUuc3ZnKV0oI2xpY2Vuc2UpCgoqKkFuIE9wZW5BcGkgdmFsaWRhdG9yIGZvciBFeHByZXNzSlMqKiB0aGF0IGF1dG9tYXRpY2FsbHkgdmFsaWRhdGVzICoqQVBJKiogXyoqcmVxdWVzdHMqKl8gYW5kIF8qKnJlc3BvbnNlcyoqXyB1c2luZyBhbiAqKk9wZW5BUEkgMyoqIHNwZWNpZmljYXRpb24uCgo8cCBhbGlnbj0iY2VudGVyIj4KPGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci9tYXN0ZXIvYXNzZXRzL2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3ItbG9nby12Mi5wbmciIHdpZHRoPSI2MDAiPgo8L3A+Cgpb8J+mi2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3JdKGh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvcikgaXMgYW4gdW5vcGluaW9uYXRlZCBsaWJyYXJ5IHRoYXQgaW50ZWdyYXRlcyB3aXRoIG5ldyBhbmQgZXhpc3RpbmcgQVBJIGFwcGxpY2F0aW9ucy4gZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvciBsZXRzIHlvdSB3cml0ZSBjb2RlIHRoZSB3YXkgeW91IHdhbnQ7IGl0IGRvZXMgbm90IGltcG9zZSBhbnkgY29kaW5nIGNvbnZlbnRpb24gb3IgcHJvamVjdCBsYXlvdXQuIFNpbXBseSwgaW5zdGFsbCB0aGUgdmFsaWRhdG9yIG9udG8geW91ciBleHByZXNzIGFwcCwgcG9pbnQgaXQgdG8geW91ciBPcGVuQVBJIDMgc3BlY2lmaWNhdGlvbiwgdGhlbiBkZWZpbmUgYW5kIGltcGxlbWVudCByb3V0ZXMgdGhlIHdheSB5b3UgcHJlZmVyLiBTZWUgYW4gW2V4YW1wbGVdKCNleGFtcGxlLWV4cHJlc3MtYXBpLXNlcnZlcikuCgoqKkZlYXR1cmVzOioqCgotIOKclO+4jyByZXF1ZXN0IHZhbGlkYXRpb24KLSDinJTvuI8gcmVzcG9uc2UgdmFsaWRhdGlvbiAoanNvbiBvbmx5KQotIPCfka4gc2VjdXJpdHkgdmFsaWRhdGlvbiAvIGN1c3RvbSBzZWN1cml0eSBmdW5jdGlvbnMKLSDwn5G9IDNyZCBwYXJ0eSAvIGN1c3RvbSBmb3JtYXRzIC8gY3VzdG9tIGRhdGEgc2VyaWFsaXphdGlvbi1kZXNlcmlhbGl6YXRpb24KLSDwn6e1IG9wdGlvbmFsbHkgYXV0by1tYXAgT3BlbkFQSSBlbmRwb2ludHMgdG8gRXhwcmVzcyBoYW5kbGVyIGZ1bmN0aW9ucwotIOKcgu+4jyAqKlwkcmVmKiogc3VwcG9ydDsgc3BsaXQgc3BlY3Mgb3ZlciBtdWx0aXBsZSBmaWxlcwotIPCfjoggZmlsZSB1cGxvYWQKCioqRG9jczoqKgotIPCfk5YgW2RvY3VtZW5hdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yL3dpa2kpCgpbIVtHaXRIdWIgc3RhcnNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3N0YXJzL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yLnN2Zz9zdHlsZT1zb2NpYWwmbGFiZWw9U3RhciZtYXhBZ2U9MjU5MjAwMCldKGh0dHBzOi8vR2l0SHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci9zdGFyZ2F6ZXJzLykgWyFbVHdpdHRlciBVUkxdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vdHdpdHRlci91cmwvaHR0cHMvZ2l0aHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci5zdmc/c3R5bGU9c29jaWFsKV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dGV4dD1DaGVjayUyMG91dCUyMGV4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3IlMjBieSUyMCU0MENhcm1pbmVEaU1hc2NpbyUyMGh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmNkaW1hc2NpbyUyRmV4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3IlMjAlRjAlOUYlOTElOEQpCgpbTmVzdEpTXShodHRwczovL2dpdGh1Yi5jb20vY2RpbWFzY2lvL2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3IvdHJlZS9tYXN0ZXIvZXhhbXBsZXMvOS1uZXN0anMpCltLb2FdKGh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci90cmVlL2xlcm5hLWZhc3RpZnkvcGFja2FnZXMva29hLW9wZW5hcGktdmFsaWRhdG9yKSBhbmQgW0Zhc3RpZnldKGh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci90cmVlL2xlcm5hLWZhc3RpZnkvcGFja2FnZXMvZmFzdGlmeS1vcGVuYXBpLXZhbGlkYXRvcikgbm93IGF2YWlsYWJsZSEg8J+agAoKIyMgSW5zdGFsbAoKYGBgc2hlbGwKbnBtIGluc3RhbGwgZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvcgpgYGAKCiMjIFVzYWdlCgoxLiBSZXF1aXJlL2ltcG9ydCB0aGUgb3BlbmFwaSB2YWxpZGF0b3IKCmBgYGphdmFzY3JpcHQKY29uc3QgT3BlbkFwaVZhbGlkYXRvciA9IHJlcXVpcmUoJ2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3InKTsKYGBgCgpvcgoKYGBgamF2YXNjcmlwdAppbXBvcnQgKiBhcyBPcGVuQXBpVmFsaWRhdG9yIGZyb20gJ2V4cHJlc3Mtb3BlbmFwaS12YWxpZGF0b3InOwpgYGAKCjIuIEluc3RhbGwgdGhlIG1pZGRsZXdhcmUKCmBgYGphdmFzY3JpcHQKYXBwLnVzZSgKICBPcGVuQXBpVmFsaWRhdG9yLm1pZGRsZXdhcmUoewogICAgYXBpU3BlYzogJy4vb3BlbmFwaS55YW1sJywKICAgIHZhbGlkYXRlUmVxdWVzdHM6IHRydWUsIC8vIChkZWZhdWx0KQogICAgdmFsaWRhdGVSZXNwb25zZXM6IHRydWUsIC8vIGZhbHNlIGJ5IGRlZmF1bHQKICB9KSwKKTsKYGBgCgozLiBSZWdpc3RlciBhbiBlcnJvciBoYW5kbGVyCgpgYGBqYXZhc2NyaXB0CmFwcC51c2UoKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHsKICAvLyBmb3JtYXQgZXJyb3IKICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKS5qc29uKHsKICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLAogICAgZXJyb3JzOiBlcnIuZXJyb3JzLAogIH0pOwp9KTsKYGBgCgpfKipJbXBvcnRhbnQ6KiogRW5zdXJlIGV4cHJlc3MgaXMgY29uZmlndXJlZCB3aXRoIGFsbCByZWxldmFudCBib2R5IHBhcnNlcnMuIEJvZHkgcGFyc2VyIG1pZGRsZXdhcmUgZnVuY3Rpb25zIG11c3QgYmUgc3BlY2lmaWVkIHByaW9yIHRvIGFueSB2YWxpZGF0ZWQgcm91dGVzLiBTZWUgYW4gW2V4YW1wbGVdKCNleGFtcGxlLWV4cHJlc3MtYXBpLXNlcnZlcilfLgoKIyMgW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vZXhwcmVzcy1vcGVuYXBpLXZhbGlkYXRvci93aWtpKQoKU2VlIHRoZSBbd2lraV0oaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9leHByZXNzLW9wZW5hcGktdmFsaWRhdG9yL3dpa2kpIGZvciBjb21wbGV0ZSBkb2N1bWVuYXRpb24KCiMjIExpY2Vuc2UKCltNSVRdKExJQ0VOU0UpCgo8YSBocmVmPSJodHRwczovL3d3dy5idXltZWFjb2ZmZWUuY29tL205N3RBNWMiIHRhcmdldD0iX2JsYW5rIj48aW1nIHNyYz0iaHR0cHM6Ly9ibWMtY2RuLm55YzMuZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS9CTUMtYnV0dG9uLWltYWdlcy9jdXN0b21faW1hZ2VzL29yYW5nZV9pbWcucG5nIiBhbHQ9IkJ1eSBNZSBBIENvZmZlZSIgc3R5bGU9ImhlaWdodDogYXV0byAhaW1wb3J0YW50O3dpZHRoOiBhdXRvICFpbXBvcnRhbnQ7IiA+PC9hPgo=
    readmeEtag: '"3ed7d200b39699e061ae38e527ac4b98f625a69f0d1fe174398f049789360452"'
    readmeLastModified: Sun, 27 Mar 2022 01:52:29 GMT
    description: >-
      🦋 Auto-validates api requests, responses, and securities using ExpressJS
      and an OpenAPI 3.x specification
    created: "2019-03-19T19:08:05Z"
    updated: "2022-04-27T11:21:23Z"
    language: TypeScript
    archived: false
    stars: 631
    watchers: 631
    forks: 155
    owner: cdimascio
    logo: https://avatars.githubusercontent.com/u/4706618?v=4
    license: MIT
    repoEtag: '"409604d44f6098e8706f19edd209c14a8198ed2b66e0419ee7075e28231487ac"'
    repoLastModified: Wed, 27 Apr 2022 11:21:23 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: openapi-dev-tool
  category:
    - Testing
    - Documentation
  repository: https://github.com/lyra/openapi-dev-tool
  language: JavaScript
  source_description: >-
    OpenAPI Dev Tool proposes to developers a unique tool to address development
    and industrialization needs!
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"28be4586098940a1625cef174281fa5138fd88b841253e95ceb8dd1244a2cc38"'
    readmeLastModified: Tue, 08 Mar 2022 16:45:33 GMT
    description: >-
      OpenAPI Dev Tool proposes to developers a unique tool to address
      development and industrialization needs!
    created: "2020-11-05T07:50:31Z"
    updated: "2022-04-25T22:13:31Z"
    language: JavaScript
    archived: false
    stars: 25
    watchers: 25
    forks: 3
    owner: lyra
    logo: https://avatars.githubusercontent.com/u/572508?v=4
    license: Apache-2.0
    repoEtag: '"7a320b8e52b5579a717081f39d192fba14ec991d9c0a502a3a226081f6db20d4"'
    repoLastModified: Mon, 25 Apr 2022 22:13:31 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: portman
  category:
    - Testing
    - Converters
  link: http://getportman.com/
  repository: https://github.com/apideck-libraries/portman
  language: Node.js
  source_description: >-
    Port OpenAPI Spec to Postman Collection, with contract & variation tests
    included!
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"f17db0e3300cd039784f8235c8ca79fa053b703ab0fd0e43a4f04f554719c96c"'
    readmeLastModified: Wed, 13 Apr 2022 14:45:58 GMT
    description: >-
      Port OpenAPI Specs to Postman Collections, inject test suite and run via
      Newman 👨🏽‍🚀
    created: "2021-05-05T10:42:29Z"
    updated: "2022-04-22T12:37:56Z"
    language: TypeScript
    archived: false
    stars: 421
    watchers: 421
    forks: 29
    owner: apideck-libraries
    logo: https://avatars.githubusercontent.com/u/73573473?v=4
    license: Apache-2.0
    repoEtag: '"2b83522c4c033f074ceec0d1afc2a0c169f25572174303d78b89dd29ceefdb7a"'
    repoLastModified: Fri, 22 Apr 2022 12:37:56 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: openapi-spring-webflux-validator
  category:
    - Description Validators
    - Data Validators
  repository: https://github.com/cdimascio/openapi-spring-webflux-validator
  language:
    - Java
    - Kotlin
  source_description: >-
    🌱 A friendly kotlin library to validate API endpoints using an OpenAPI 3.0
    or OpenAPI 2.0 specification
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvcgohW10oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci5zdmc/YnJhbmNoPW1hc3RlcilbIVtNYXZlbiBDZW50cmFsXShodHRwczovL2ltZy5zaGllbGRzLmlvL21hdmVuLWNlbnRyYWwvdi9pby5naXRodWIuY2RpbWFzY2lvL29wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yLnN2Zz9sYWJlbD1NYXZlbiUyMENlbnRyYWwpXShodHRwczovL3NlYXJjaC5tYXZlbi5vcmcvc2VhcmNoP3E9ZzolMjJpby5naXRodWIuY2RpbWFzY2lvJTIyJTIwQU5EJTIwYTolMjJvcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvciUyMikgWyFbQ29kYWN5IEJhZGdlXShodHRwczovL2FwaS5jb2RhY3kuY29tL3Byb2plY3QvYmFkZ2UvR3JhZGUvZjc4YjcyY2E5MDEwNGU0MmIxMTE3MjNhNzcyMGFkZjMpXShodHRwczovL3d3dy5jb2RhY3kuY29tL2FwcC9jZGltYXNjaW8vb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3I/dXRtX3NvdXJjZT1naXRodWIuY29tJmFtcDt1dG1fbWVkaXVtPXJlZmVycmFsJmFtcDt1dG1fY29udGVudD1jZGltYXNjaW8vb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3ImYW1wO3V0bV9jYW1wYWlnbj1CYWRnZV9HcmFkZSkgIVtdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvbGljZW5zZS1BcGFjaGUlMjAyLjAtYmx1ZS5zdmcpPCEtLSBBTEwtQ09OVFJJQlVUT1JTLUJBREdFOlNUQVJUIC0gRG8gbm90IHJlbW92ZSBvciBtb2RpZnkgdGhpcyBzZWN0aW9uIC0tPgpbIVtBbGwgQ29udHJpYnV0b3JzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2FsbF9jb250cmlidXRvcnMtNi1vcmFuZ2Uuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oI2NvbnRyaWJ1dG9ycy0pCjwhLS0gQUxMLUNPTlRSSUJVVE9SUy1CQURHRTpFTkQgLS0+IAoKQSBmcmllbmRseSBrb3RsaW4gbGlicmFyeSB0byB2YWxpZGF0ZSBBUEkgZW5kcG9pbnRzIHVzaW5nIGFuIF9PcGVuQXBpIDNfIG9yIF9Td2FnZ2VyIDJfIHNwZWNpZmljYXRpb24uIEdyZWF0IHdpdGggd2ViZmx1eCBmdW5jdGlvbmFsLiAKSXQgKip3b3JrcyBoYXBwaWx5IHdpdGggYW55IEpWTSBsYW5ndWFnZSBpbmNsdWRpbmcgSmF2YSA+PTgqKi4gCjxwIGFsaWduPSJjZW50ZXIiPgoJPGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jZGltYXNjaW8vb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3IvbWFzdGVyL2Fzc2V0cy9vcGVuYXBpLXNwcmluZzUtd2ViZmx1eC12YWxpZGF0b3IucG5nIiB3aWR0aD0iNjAwIi8+CjwvcD4KClN1cHBvcnRzIHNwZWNpZmljYXRpb25zIGluIF9ZQU1MXyBhbmQgX0pTT05fCgpTZWUgdGhpcyBbY29tcGxldGUgU3ByaW5nIDUgV2ViZmx1eCBleGFtcGxlIHRoYXQgdXNlcyBvcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvcl0oaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9rb3RsaW4tc3dhZ2dlci1zcHJpbmctZnVuY3Rpb25hbC10ZW1wbGF0ZSkuCgojIyBQcmVxdWlzaXRlcwoKSmF2YSA4IG9yIGdyZWF0ZXIKCiMjIEluc3RhbGwKCiMjIyBNYXZlbgoKYGBgeG1sCjxkZXBlbmRlbmN5PgogICAgPGdyb3VwSWQ+aW8uZ2l0aHViLmNkaW1hc2NpbzwvZ3JvdXBJZD4KICAgIDxhcnRpZmFjdElkPm9wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yPC9hcnRpZmFjdElkPgogICAgPHZlcnNpb24+My41LjA8L3ZlcnNpb24+CjwvZGVwZW5kZW5jeT4KYGBgCgojIyMgR3JhZGxlCgpgYGBncm9vdnkKY29tcGlsZSAnaW8uZ2l0aHViLmNkaW1hc2NpbzpvcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvcjozLjUuMCcKYGBgCgpGb3Igc2J0LCBncmFwZSwgaXZ5IGFuZCBtb3JlLCBzZWUgW2hlcmVdKGh0dHBzOi8vc2VhcmNoLm1hdmVuLm9yZy8jYXJ0aWZhY3RkZXRhaWxzJTdDaW8uZ2l0aHViLmNkaW1hc2NpbyU3Q29wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yJTdDMi4wLjAlN0NqYXIpCgojIyBVc2FnZSAoS290bGluKQoKVGhpcyBzZWN0aW9uIGFuZCB0aGUgbmV4dCBkZXNjcmliZSB1c2FnZSB3aXRoIEtvdGxpbiBhbmQgSmF2YSByZXNwZWN0aXZlbHkuCgojIyMgQ29uZmlndXJlIChLb3RsaW4pCgpUaGlzIG9uZS10aW1lIGNvbmZpZ3VyYXRpb24gcmVxdWlyZXMgeW91IHRvIHByb3ZpZGUgdGhlIF9sb2NhdGlvbiBvZiB0aGUgb3BlbmFwaS9zd2FnZ2VyIHNwZWNpZmljYXRpb25fIGFuZCBhbiBvcHRpb25hbCBfY3VzdG9tIGVycm9yIGhhbmRsZXJfLgoKU3VwcG9ydHMgYEpTT05gIGFuZCBgWUFNTGAKCmBgYGtvdGxpbgppbXBvcnQgaW8uZ2l0aHViLmNkaW1hc2Npby5vcGVuYXBpLlZhbGlkYXRlCnZhbCB2YWxpZGF0ZSA9IFZhbGlkYXRlLmNvbmZpZ3VyZSgic3RhdGljL2FwaS55YW1sIikKYGBgCgp3aXRoIGN1c3RvbSBlcnJvciBoYW5kbGVyCgpgYGBrb3RsaW4KZGF0YSBjbGFzcyBNeUVycm9yKHZhbCBpZDogU3RyaW5nLCB2YWwgbWVzc2FnZXM6IExpc3Q8U3RyaW5nPikKdmFsIHZhbGlkYXRlID0gVmFsaWRhdGUuY29uZmlndXJlKCJzdGF0aWMvYXBpLmpzb24iKSB7IHN0YXR1cywgbWVzc2FnZXMgLT4KICAgRXJyb3Ioc3RhdHVzLm5hbWUsIG1lc3NhZ2VzKQp9CmBgYAoKd2l0aCBjdXN0b20gT2JqZWN0TWFwcGVyIGZhY3Rvcnk6CgpgYGBrb3RsaW4KdmFsIHZhbGlkYXRlID0gVmFsaWRhdGUuY29uZmlndXJlKAogICBvcGVuQXBpU3dhZ2dlclBhdGggPSAiYXBpLnlhbWwiLAogICBlcnJvckhhbmRsZXIgPSB7IHN0YXR1cywgbWVzc2FnZSAtPiBWYWxpZGF0aW9uRXJyb3Ioc3RhdHVzLnZhbHVlKCksIG1lc3NhZ2VbMF0pIH0sCiAgIG9iamVjdE1hcHBlckZhY3RvcnkgPSB7IE9iamVjdE1hcHBlcigpCiAgICAgICAucmVnaXN0ZXJLb3RsaW5Nb2R1bGUoKQogICAgICAgLnJlZ2lzdGVyTW9kdWxlKEphdmFUaW1lTW9kdWxlKCkpCiAgICAgICAuY29uZmlndXJlKFNlcmlhbGl6YXRpb25GZWF0dXJlLldSSVRFX0RBVEVTX0FTX1RJTUVTVEFNUFMsIGZhbHNlKSB9CikKYGBgCgojIyMgVmFsaWRhdGUgYSByZXF1ZXN0IChLb3RsaW4gKyBSZWFjdG9yKQoKWW91IGNhbiBub3cgdmFsaWRhdGUgYSByZXF1ZXN0IGluIGEgY29yb3V0aW5lIHN0eWxlLAp1c2luZyB0aGUgYHZhbGlkYXRlYCBpbnN0YW5jZSBjcmVhdGVkIFthYm92ZV0oI2NvbmZpZ3VyZS1rb3RsaW4pOgoKd2l0aG91dCBhIGJvZHkKCmBgYGtvdGxpbgp2YWxpZGF0ZS5yZXF1ZXN0KHJlcSkgewogICAgLy8gRG8gc3R1ZmYgZS5nLiByZXR1cm4gYSBsaXN0IG9mIG5hbWVzIAogICAgb2soKS5ib2R5KE1vbm8uanVzdChsaXN0T2YoImNhcm1pbmUiLCAiYWxleCIsICJlbGlhbmEiKSkpCn0KYGBgCgp3aXRoIGJvZHkKCmBgYGtvdGxpbgp2YWxpZGF0ZS5yZXF1ZXN0KHJlcSkud2l0aEJvZHkoVXNlcjo6Y2xhc3MuamF2YSkgeyBib2R5IC0+CiAgICAvLyBOb3RlIHRoYXQgYm9keSBpcyBkZXNlcmlhbGl6ZWQgYXMgVXNlciEKICAgIC8vIE5vdyB5b3UgY2FuIGRvIHN0dWZmLiAKICAgIC8vIEZvciBleGFtcGxlLCBsZXRzIGVjaG8gdGhlIHJlcXVlc3QgYXMgdGhlIHJlc3BvbnNlIAogICAgb2soKS5ib2R5KE1vbm8uanVzdChib2R5KSkKfQpgYGAKCndpdGggYm9keSB5b3Ugd2FudCB0byBwcm9jZXNzIGFzIHN0cmluZyAoZS5nLiBmb3IgY29tcHV0aW5nIGEgcmVxdWVzdCBzaWduYXR1cmUpLCBvciB0aGF0IHlvdSB3YW50IHRvIGRlc2VyaWFsaXplIHNvbWVob3cgc3BlY2lmaWNhbGx5CgpgYGBrb3RsaW4KdmFsIGlkZW50aXR5OiAoU3RyaW5nKSAtPiBTdHJpbmcgPSB7IGl0IH0KdmFsaWRhdGUucmVxdWVzdChyZXEpLndpdGhCb2R5KFN0cmluZzo6Y2xhc3MuamF2YSwgcmVhZFZhbHVlID0gaWRlbnRpdHkpIHsgYm9keSAtPgogICAgb2soKS5ib2R5KE1vbm8uanVzdCgiY29udGVudCBsZW5ndGggaXMgJHtib2R5Lmxlbmd0aH0iKSkKfQpgYGAKCiMjIyBWYWxpZGF0ZSBhIHJlcXVlc3QgKEtvdGxpbiArIGNvcm91dGluZXMpCgpPciB5b3UgY2FuIHZhbGlkYXRlIGEgcmVxdWVzdCBpbiBhIGNvcm91dGluZSBzdHlsZSwKdXNpbmcgdGhlIGB2YWxpZGF0ZWAgaW5zdGFuY2UgY3JlYXRlZCBbYWJvdmVdKCNjb25maWd1cmUta290bGluKToKCgp3aXRob3V0IGEgYm9keQoKYGBga290bGluCnZhbGlkYXRlLnJlcXVlc3RBbmRBd2FpdChyZXEpIHsKICAgIC8vIERvIHN0dWZmIGUuZy4gcmV0dXJuIGEgbGlzdCBvZiBuYW1lcyAKICAgIG9rKCkuYm9keVZhbHVlQW5kQXdhaXQobGlzdE9mKCJjYXJtaW5lIiwgImFsZXgiLCAiZWxpYW5hIikpCn0KYGBgCgp3aXRoIGJvZHkKCmBgYGtvdGxpbgp2YWxpZGF0ZS5yZXF1ZXN0KHJlcSkuYXdhaXRCb2R5KFVzZXI6OmNsYXNzLmphdmEpIHsgYm9keTogVXNlciAtPgogICAgLy8gTm90ZSB0aGF0IGJvZHkgaXMgZGVzZXJpYWxpemVkIGFzIFVzZXIhCiAgICAvLyBOb3cgeW91IGNhbiBkbyBzdHVmZi4gCiAgICAvLyBGb3IgZXhhbXBsZSwgbGV0cyBlY2hvIHRoZSByZXF1ZXN0IGFzIHRoZSByZXNwb25zZSAKICAgIG9rKCkuYm9keVZhbHVlQW5kQXdhaXQoYm9keSkKfQpgYGAKCndpdGggYm9keSB5b3Ugd2FudCB0byBwcm9jZXNzIGFzIHN0cmluZyAoZS5nLiBmb3IgY29tcHV0aW5nIGEgcmVxdWVzdCBzaWduYXR1cmUpLCBvciB0aGF0IHlvdSB3YW50IHRvIGRlc2VyaWFsaXplIHNvbWVob3cgc3BlY2lmaWNhbGx5CgpgYGBrb3RsaW4KdmFsIGlkZW50aXR5OiAoU3RyaW5nKSAtPiBTdHJpbmcgPSB7IGl0IH0KdmFsaWRhdGUucmVxdWVzdChyZXEpLmF3YWl0Qm9keShTdHJpbmc6OmNsYXNzLmphdmEsIGlkZW50aXR5KSB7IGJvZHk6IFN0cmluZyAtPgogICAgb2soKS5ib2R5VmFsdWVBbmRBd2FpdCgiY29udGVudCBsZW5ndGggaXMgJHtib2R5Lmxlbmd0aH0iKQp9CmBgYAoKIyMgVXNhZ2UgKEphdmEgOCBfb3IgZ3JlYXRlcl8pCgojIyMgQ29uZmlndXJlIChKYXZhKQpUaGlzIG9uZS10aW1lIGNvbmZpZ3VyYXRpb24gcmVxdWlyZXMgeW91IHRvIHByb3ZpZGUgdGhlIF9sb2NhdGlvbiBvZiB0aGUgb3BlbmFwaS9zd2FnZ2VyIHNwZWNpZmljYXRpb25fIGFuZCBhbiBvcHRpb25hbCBfY3VzdG9tIGVycm9yIGhhbmRsZXJfLgoKYGBgamF2YQppbXBvcnQgaW8uZ2l0aHViLmNkaW1hc2Npby5vcGVuYXBpLlZhbGlkYXRlOwpWYWxpZGF0ZTxWYWxpZGF0aW9uRXJyb3I+IHZhbGlkYXRlID0gVmFsaWRhdGUuY29uZmlndXJlKCJzdGF0aWMvYXBpLmpzb24iKQpgYGAKCndpdGggY3VzdG9tIGVycm9yIGhhbmRsZXIKCmBgYGphdmEKY2xhc3MgTXlFcnJvciB7CiAgICBwcml2YXRlIFN0cmluZyBpZDsKICAgIHByaXZhdGUgIFN0cmluZyBtZXNzYWdlczsKICAgIHB1YmxpYyBNeUVycm9yKFN0cmluZyBpZCwgTGlzdDxTdHJpbmc+IG1lc3NhZ2VzKSB7CiAgICAgICAgdGhpcy5pZCA9IGlkOwogICAgICAgIHRoaXMubWVzc2FnZXMgPSBtZXNzYWdlczsKICAgIH0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0SWQoKSB7CiAgICAgICAgcmV0dXJuIGlkOwogICAgfQogICAgcHVibGljIHZvaWQgc2V0SWQoU3RyaW5nIGlkKSB7CiAgICAgICAgdGhpcy5pZCA9IGlkOwogICAgfQogICAgcHVibGljIExpc3Q8U3RyaW5nPiBnZXRNZXNzYWdlcygpIHsKICAgICAgICByZXR1cm4gbWVzc2FnZXM7CiAgICB9CiAgICBwdWJsaWMgdm9pZCBzZXRNZXNzYWdlcyhMaXN0PFN0cmluZz4gbWVzc2FnZXMpIHsKICAgICAgICB0aGlzLm1lc3NhZ2VzID0gbWVzc2FnZXM7CiAgICB9ICAgICAKfQpgYGAKCmBgYGphdmEKVmFsaWRhdGU8VmFsaWRhdGlvbkVycm9yPiB2YWxpZGF0ZSA9IFZhbGlkYXRlLmNvbmZpZ3VyZSgic3RhdGljL2FwaS5qc29uIiwgKHN0YXR1cywgbWVzc2FnZXMpIC0+CiAgICBuZXcgTXlFcnJvcihzdGF0dXMuZ2V0TmFtZSgpLCBtZXNzYWdlcykKKTsKYGBgCgojIyMgVmFsaWRhdGUgYSByZXF1ZXN0IChKYXZhKQoKVXNpbmcgdGhlIGB2YWxpZGF0ZWAgaW5zdGFuY2UgY3JlYXRlZCBhYm92ZSwgeW91IGNhbiBub3cgdmFsaWRhdGUgYSByZXF1ZXN0OgoKd2l0aG91dCBhIGJvZHkKCmBgYGphdmEKQXJyYXlMaXN0PFN0cmluZz4gdXNlcnMgPSBuZXcgQXJyYXlMaXN0PFN0cmluZz4oKSB7ewogICAgYWRkKCJjYXJtaW5lIik7CiAgICBhZGQoImFsZXgiKTsKICAgIGFkZCgiZWxpYW5hIik7Cn19OwoKdmFsaWRhdGUucmVxdWVzdChyZXEsICgpIC0+CiAgICAvLyBEbyBzdHVmZiBlLmcuIHJldHVybiBhIGxpc3Qgb2YgdXNlciBuYW1lcwogICAgU2VydmVyUmVzcG9uc2Uub2soKS5ib2R5VmFsdWUodXNlcnMpCik7CmBgYAoKd2l0aCBib2R5CgpgYGBqYXZhCnZhbGlkYXRlCiAgICAucmVxdWVzdChyZXEpCiAgICAud2l0aEJvZHkoVXNlci5jbGFzcywgdXNlciAtPiAKICAgICAgICAvLyBOb3RlIHRoYXQgYm9keSBpcyBkZXNlcmlhbGl6ZWQgYXMgVXNlciEKICAgICAgICAvLyBOb3cgeW91IGNhbiBkbyBzdHVmZi4gCiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGxldHMgZWNobyB0aGUgcmVxdWVzdCBhcyB0aGUgcmVzcG9uc2UKICAgICAgICBTZXJ2ZXJSZXNwb25zZS5vaygpLmJvZHlWYWx1ZSh1c2VyKQogICAgKTsKYGBgCgp3aXRoIGJvZHkgeW91IHdhbnQgdG8gcHJvY2VzcyBhcyBzdHJpbmcgKGUuZy4gZm9yIGNvbXB1dGluZyBhIHJlcXVlc3Qgc2lnbmF0dXJlKQoKYGBgamF2YQp2YWxpZGF0ZQogICAgLnJlcXVlc3QocmVxKQogICAgLndpdGhCb2R5KFN0cmluZy5jbGFzcywgcyAtPiBzLCBib2R5IC0+CiAgICAgICAgU2VydmVyUmVzcG9uc2Uub2soKS5ib2R5VmFsdWUoImNvbnRlbnQgbGVuZ3RoIGlzICIgKyBib2R5Lmxlbmd0aCgpKQogICAgKTsKYGBgCgojIyBFeGFtcGxlIFZhbGlkYXRpb24gT3V0cHV0CgpMZXQncyBhc3N1bWUgYSBgUE9TVGAgcmVxdWVzdCB0byBjcmVhdGUgYSB1c2VyIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgcmVxdWVzdCBib2R5OgoKYGBganNvbgp7CiAgImZpcnN0bmFtZSI6ICJjYXJtaW5lIiwKICAibGFzdG5hbWUiOiAiZGltYXNpY28iCn0KYGBgCgpMZXQncyBub3cgYXNzdW1lIGFuIEFQSSB1c2VyIG1pc3NwZWxscyBgbGFzdG5hbWVgIGFzIGBsYXN0bmFtYAoKYGBgc2hlbGwKY3VybCAtWCBQT1NUIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdXNlcnMgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgLWQneyAKICAiZmlyc3RuYW1lIjogImMiLCAKICAibGFzdG5hbSI6ICJkIiAKfScKYGBgCgpgb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3JgIGF1dG9tYXRpY2FsbHkgdmFsaWRhdGVzIHRoZSByZXF1ZXN0IGFnYWluc3QgYSBTd2FnZ2VyIHNwZWN0IGFuZCByZXR1cm5zOgoKYGBganNvbgp7CiAgImNvZGUiOiA0MDAsCiAgIm1lc3NhZ2VzIjpbCgkgICJPYmplY3QgaW5zdGFuY2UgaGFzIHByb3BlcnRpZXMgd2hpY2ggYXJlIG5vdCBhbGxvd2VkIGJ5IHRoZSBzY2hlbWE6IFtcImxhc3RuYW1cIl0iLAoJICAiT2JqZWN0IGhhcyBtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnRpZXMgKFtcImxhc3RuYW1lXCJdKSIKICBdCn0gCmBgYAoKKipXb2FoISBDb29sISEqKiA6LUQgCgojIyBFeGFtcGxlCgpMZXQncyBzYXkgeW91IGhhdmUgYW4gZW5kcG9pbnQgYC91c2Vyc2AgdGhhdCBzdXBwb3J0cyBib3RoIGBHRVRgIGFuZCBgUE9TVGAgb3BlcmF0aW9ucy4KCllvdSBjYW4gY3JlYXRlIHRob3NlIHJvdXRlcyBhbmQgdmFsaWRhdGUgdGhlbSBsaWtlIHNvOgoKKipDcmVhdGUgdGhlIHJvdXRlcyBpbiBhIHJlYWN0aXZlIG9yIGNvcm91dGluZSBzdHlsZToqKgoKYGBga290bGluCnBhY2thZ2UgbXlwcm9qZWN0LmNvbnRyb2xsZXJzCgppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5jb3JlLmlvLkNsYXNzUGF0aFJlc291cmNlCmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLmh0dHAuTWVkaWFUeXBlLioKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnJlYWN0aXZlLmZ1bmN0aW9uLnNlcnZlci5TZXJ2ZXJSZXNwb25zZS5wZXJtYW5lbnRSZWRpcmVjdAppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay53ZWIucmVhY3RpdmUuZnVuY3Rpb24uc2VydmVyLmNvUm91dGVyCmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5yZWFjdGl2ZS5mdW5jdGlvbi5zZXJ2ZXIucGx1cwppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay53ZWIucmVhY3RpdmUuZnVuY3Rpb24uc2VydmVyLnJvdXRlcgppbXBvcnQgamF2YS5uZXQuVVJJCgpjbGFzcyBSb3V0ZXMocHJpdmF0ZSB2YWwgdXNlckhhbmRsZXI6IFVzZXJIYW5kbGVyKSB7CiAgICBmdW4gcm91dGVyKCkgPSByb3V0ZXIgewogICAgICAgICIvYXBpIi5uZXN0IHsKICAgICAgICAgICAgYWNjZXB0KEFQUExJQ0FUSU9OX0pTT04pLm5lc3QgewogICAgICAgICAgICAgICAgUE9TVCgiL3VzZXJzIiwgdXNlckhhbmRsZXI6OmNyZWF0ZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBhY2NlcHQoVEVYVF9FVkVOVF9TVFJFQU0pLm5lc3QgewogICAgICAgICAgICAgICAgR0VUKCIvdXNlcnMiLCB1c2VySGFuZGxlcjo6ZmluZEFsbCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gKyBjb1JvdXRlciB7IAogICAgICAgICIvY29BcGkiLm5lc3QgewogICAgICAgICAgICBhY2NlcHQoQVBQTElDQVRJT05fSlNPTikubmVzdCB7CiAgICAgICAgICAgICAgICBQT1NUKCIvdXNlcnMiLCB1c2VySGFuZGxlcjo6Y29DcmVhdGUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWNjZXB0KFRFWFRfRVZFTlRfU1RSRUFNKS5uZXN0IHsKICAgICAgICAgICAgICAgIEdFVCgiL3VzZXJzIiwgdXNlckhhbmRsZXI6OmNvRmluZEFsbCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQpgYGAKCmBgYGtvdGxpbgpwYWNrYWdlIG15cHJvamVjdAoKaW1wb3J0IGlvLmdpdGh1Yi5jZGltYXNjaW8ub3BlbmFwaS5WYWxpZGF0ZQp2YWwgdmFsaWRhdGUgPSBWYWxpZGF0ZS5jb25maWd1cmUoInN0YXRpYy9hcGkueWFtbCIpCmBgYAoKKipWYWxpZGF0ZSB3aXRoIG9wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yKioKCmBgYGtvdGxpbgpwYWNrYWdlIG15cHJvamVjdC5jb250cm9sbGVycwoKaW1wb3J0IG15cHJvamVjdC5tb2RlbHMuVXNlcgppbXBvcnQgbXlwcm9qZWN0LnZhbGlkYXRlCmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5yZWFjdGl2ZS5mdW5jdGlvbi5zZXJ2ZXIuU2VydmVyUmVxdWVzdAppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay53ZWIucmVhY3RpdmUuZnVuY3Rpb24uc2VydmVyLlNlcnZlclJlc3BvbnNlCmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5yZWFjdGl2ZS5mdW5jdGlvbi5zZXJ2ZXIuU2VydmVyUmVzcG9uc2Uub2sKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnJlYWN0aXZlLmZ1bmN0aW9uLnNlcnZlci5ib2R5VmFsdWVBbmRBd2FpdAppbXBvcnQgcmVhY3Rvci5jb3JlLnB1Ymxpc2hlci5GbHV4CmltcG9ydCByZWFjdG9yLmNvcmUucHVibGlzaGVyLk1vbm8KCmNsYXNzIFVzZXJIYW5kbGVyIHsKCiAgICBmdW4gZmluZEFsbChyZXE6IFNlcnZlclJlcXVlc3QpOiBNb25vPFNlcnZlclJlc3BvbnNlPiB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlLnJlcXVlc3QocmVxKSB7CiAgICAgICAgICAgIG9rKCkuYm9keVZhbHVlKGxpc3RPZigiY2FybWluZSIsICJhbGV4IiwgImVsaWFuYSIpKQogICAgICAgIH0KICAgIH0KCiAgICBmdW4gY3JlYXRlKHJlcTogU2VydmVyUmVxdWVzdCk6IE1vbm88U2VydmVyUmVzcG9uc2U+IHsKICAgICAgICByZXR1cm4gdmFsaWRhdGUucmVxdWVzdChyZXEpLndpdGhCb2R5KFVzZXI6OmNsYXNzLmphdmEpIHsKICAgICAgICAgICAgLy8gaXQgaXMgdGhlIHJlcXVlc3QgYm9keSBkZXNlcmlhbGl6ZWQgYXMgVXNlcgogICAgICAgICAgICBvaygpLmJvZHlWYWx1ZShpdCkKICAgICAgICB9CiAgICB9CgogICAgc3VzcGVuZCBmdW4gY29GaW5kQWxsKHJlcTogU2VydmVyUmVxdWVzdCk6IFNlcnZlclJlc3BvbnNlIHsKICAgICAgICByZXR1cm4gdmFsaWRhdGUucmVxdWVzdEFuZEF3YWl0KHJlcSkgewogICAgICAgICAgICBvaygpLmJvZHlWYWx1ZUFuZEF3YWl0KGxpc3RPZigiY2FybWluZSIsICJhbGV4IiwgImVsaWFuYSIpKQogICAgICAgIH0KICAgIH0KCiAgICBzdXNwZW5kIGZ1biBjb0NyZWF0ZShyZXE6IFNlcnZlclJlcXVlc3QpOiBTZXJ2ZXJSZXNwb25zZSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlLnJlcXVlc3QocmVxKS5hd2FpdEJvZHkoVXNlcjo6Y2xhc3MuamF2YSkgewogICAgICAgICAgICAvLyBpdCBpcyB0aGUgcmVxdWVzdCBib2R5IGRlc2VyaWFsaXplZCBhcyBVc2VyCiAgICAgICAgICAgIG9rKCkuYm9keVZhbHVlQW5kQXdhaXQoaXQpCiAgICAgICAgfQogICAgfQp9CmBgYAoKIyMgTGljZW5zZQoKW0FwYWNoZSAyLjBdKGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjApCgo8YSBocmVmPSJodHRwczovL3d3dy5idXltZWFjb2ZmZWUuY29tL205N3RBNWMiIHRhcmdldD0iX2JsYW5rIj48aW1nIHNyYz0iaHR0cHM6Ly9ibWMtY2RuLm55YzMuZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS9CTUMtYnV0dG9uLWltYWdlcy9jdXN0b21faW1hZ2VzL29yYW5nZV9pbWcucG5nIiBhbHQ9IkJ1eSBNZSBBIENvZmZlZSIgc3R5bGU9ImhlaWdodDogYXV0byAhaW1wb3J0YW50O3dpZHRoOiBhdXRvICFpbXBvcnRhbnQ7IiA+PC9hPgoKIyMgQ29udHJpYnV0b3JzIOKcqAoKVGhhbmtzIGdvZXMgdG8gdGhlc2Ugd29uZGVyZnVsIHBlb3BsZSAoW2Vtb2ppIGtleV0oaHR0cHM6Ly9hbGxjb250cmlidXRvcnMub3JnL2RvY3MvZW4vZW1vamkta2V5KSk6Cgo8IS0tIEFMTC1DT05UUklCVVRPUlMtTElTVDpTVEFSVCAtIERvIG5vdCByZW1vdmUgb3IgbW9kaWZ5IHRoaXMgc2VjdGlvbiAtLT4KPCEtLSBwcmV0dGllci1pZ25vcmUtc3RhcnQgLS0+CjwhLS0gbWFya2Rvd25saW50LWRpc2FibGUgLS0+Cjx0YWJsZT4KICA8dHI+CiAgICA8dGQgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2NpbyI+PGltZyBzcmM9Imh0dHBzOi8vYXZhdGFyczEuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvNDcwNjYxOD92PTQiIHdpZHRoPSIxMDBweDsiIGFsdD0iIi8+PGJyIC8+PHN1Yj48Yj5DYXJtaW5lIERpTWFzY2lvPC9iPjwvc3ViPjwvYT48YnIgLz48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vY2RpbWFzY2lvL29wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yL2NvbW1pdHM/YXV0aG9yPWNkaW1hc2NpbyIgdGl0bGU9IkNvZGUiPvCfkrs8L2E+IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3IvY29tbWl0cz9hdXRob3I9Y2RpbWFzY2lvIiB0aXRsZT0iVGVzdHMiPuKaoO+4jzwvYT4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj1jZGltYXNjaW8iIHRpdGxlPSJEb2N1bWVudGF0aW9uIj7wn5OWPC9hPjwvdGQ+CiAgICA8dGQgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2tyenlrcnVjeiI+PGltZyBzcmM9Imh0dHBzOi8vYXZhdGFyczEuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTgzNjQxNzc/dj00IiB3aWR0aD0iMTAwcHg7IiBhbHQ9IiIvPjxiciAvPjxzdWI+PGI+S3J6eXNpZWsgS3J1Y3p5xYRza2k8L2I+PC9zdWI+PC9hPjxiciAvPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9jZGltYXNjaW8vb3BlbmFwaS1zcHJpbmctd2ViZmx1eC12YWxpZGF0b3IvY29tbWl0cz9hdXRob3I9a3J6eWtydWN6IiB0aXRsZT0iQ29kZSI+8J+SuzwvYT4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj1rcnp5a3J1Y3oiIHRpdGxlPSJUZXN0cyI+4pqg77iPPC9hPiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vY2RpbWFzY2lvL29wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yL2NvbW1pdHM/YXV0aG9yPWtyenlrcnVjeiIgdGl0bGU9IkRvY3VtZW50YXRpb24iPvCfk5Y8L2E+PC90ZD4KICAgIDx0ZCBhbGlnbj0iY2VudGVyIj48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vY2hlamVybGFrYXJ0aGlrIj48aW1nIHNyYz0iaHR0cHM6Ly9hdmF0YXJzMC5naXRodWJ1c2VyY29udGVudC5jb20vdS8xMjg3MTA3OT92PTQiIHdpZHRoPSIxMDBweDsiIGFsdD0iIi8+PGJyIC8+PHN1Yj48Yj5DaGVqZXJsYSBLYXJ0aGlrPC9iPjwvc3ViPjwvYT48YnIgLz48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vY2RpbWFzY2lvL29wZW5hcGktc3ByaW5nLXdlYmZsdXgtdmFsaWRhdG9yL2NvbW1pdHM/YXV0aG9yPWNoZWplcmxha2FydGhpayIgdGl0bGU9IkNvZGUiPvCfkrs8L2E+PC90ZD4KICAgIDx0ZCBhbGlnbj0iY2VudGVyIj48YSBocmVmPSJodHRwOi8vd3d3LmthdGllbGV2eS5jb20iPjxpbWcgc3JjPSJodHRwczovL2F2YXRhcnMwLmdpdGh1YnVzZXJjb250ZW50LmNvbS91Lzg5NzUxODE/dj00IiB3aWR0aD0iMTAwcHg7IiBhbHQ9IiIvPjxiciAvPjxzdWI+PGI+S2F0aWUgTGV2eTwvYj48L3N1Yj48L2E+PGJyIC8+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj1rYXRpZWxldnkxIiB0aXRsZT0iQ29kZSI+8J+SuzwvYT48L3RkPgogICAgPHRkIGFsaWduPSJjZW50ZXIiPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWludGVycHJldGNhdCI+PGltZyBzcmM9Imh0dHBzOi8vYXZhdGFyczEuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTYxMTA3Nz92PTQiIHdpZHRoPSIxMDBweDsiIGFsdD0iIi8+PGJyIC8+PHN1Yj48Yj5JbHlhIEJ1aWx1azwvYj48L3N1Yj48L2E+PGJyIC8+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj1yZWludGVycHJldGNhdCIgdGl0bGU9IkNvZGUiPvCfkrs8L2E+PC90ZD4KICAgIDx0ZCBhbGlnbj0iY2VudGVyIj48YSBocmVmPSJodHRwOi8vc2ltb24uemFtYnJvdnNraS5vcmcvIj48aW1nIHNyYz0iaHR0cHM6Ly9hdmF0YXJzMC5naXRodWJ1c2VyY29udGVudC5jb20vdS82NzMxMjg/dj00IiB3aWR0aD0iMTAwcHg7IiBhbHQ9IiIvPjxiciAvPjxzdWI+PGI+U2ltb24gWmFtYnJvdnNraTwvYj48L3N1Yj48L2E+PGJyIC8+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj16YW1icm92c2tpIiB0aXRsZT0iQ29kZSI+8J+SuzwvYT4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NkaW1hc2Npby9vcGVuYXBpLXNwcmluZy13ZWJmbHV4LXZhbGlkYXRvci9jb21taXRzP2F1dGhvcj16YW1icm92c2tpIiB0aXRsZT0iVGVzdHMiPuKaoO+4jzwvYT48L3RkPgogIDwvdHI+CjwvdGFibGU+Cgo8IS0tIG1hcmtkb3dubGludC1lbmFibGUgLS0+CjwhLS0gcHJldHRpZXItaWdub3JlLWVuZCAtLT4KPCEtLSBBTEwtQ09OVFJJQlVUT1JTLUxJU1Q6RU5EIC0tPgoKVGhpcyBwcm9qZWN0IGZvbGxvd3MgdGhlIFthbGwtY29udHJpYnV0b3JzXShodHRwczovL2dpdGh1Yi5jb20vYWxsLWNvbnRyaWJ1dG9ycy9hbGwtY29udHJpYnV0b3JzKSBzcGVjaWZpY2F0aW9uLiBDb250cmlidXRpb25zIG9mIGFueSBraW5kIHdlbGNvbWUhCg==
    readmeEtag: '"b80d147240c62b310fb96ab183b8d816857f1faf0b95bbe24208024652c7072b"'
    readmeLastModified: Sat, 27 Nov 2021 20:00:47 GMT
    description: >-
      🌱 A friendly kotlin library to validate API endpoints using an OpenApi
      3.0 and Swagger 2.0 specification
    created: "2017-11-29T15:41:04Z"
    updated: "2022-04-21T20:37:03Z"
    language: Kotlin
    archived: false
    stars: 83
    watchers: 83
    forks: 10
    owner: cdimascio
    logo: https://avatars.githubusercontent.com/u/4706618?v=4
    license: NOASSERTION
    repoEtag: '"0bd65d439939028951aa84bfa3358ed87590b6f2fcb60fa7dc9e47ec8b533952"'
    repoLastModified: Thu, 21 Apr 2022 20:37:03 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
    - openapi31 tags
  name: "@redocly/openapi-cli"
  category:
    - Description Validators
    - Parsers
  link: https://redoc.ly/openapi-cli
  repository: https://github.com/redocly/openapi-cli
  language:
    - CLI
    - TypeScript
    - JavaScript
  source_description: OpenAPI 3 CLI toolbox with rich validation and bundling features.
  v2: true
  v3: true
  v3_1: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIENMSSB0b29sc2V0CgpPcGVuQVBJIENMSSB0b29sYm94IHdpdGggcmljaCB2YWxpZGF0aW9uIGFuZCBidW5kbGluZyBmZWF0dXJlcy4KCiFbVHJhdmlzICgub3JnKV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby90cmF2aXMvUmVkb2NseS9vcGVuYXBpLWNsaS9tYXN0ZXIpCiFbbnBtIChzY29wZWQpXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L0ByZWRvY2x5L29wZW5hcGktY2xpKQohW05QTV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vbC9AcmVkb2NseS9vcGVuYXBpLWNsaSkKCiFbT3BlbkFQSSAzIENMSSB0b29sc2V0XSguL21lZGlhL29wZW5hcGktY2xpLmdpZikKCiMjIEZlYXR1cmVzCgpDdXJyZW50bHksIEByZWRvY2x5L29wZW5hcGktY2xpIHN1cHBvcnRzIHRoZXNlIGZlYXR1cmVzOgoKLSBbeF0gTXVsdGktZmlsZSB2YWxpZGF0aW9uLiBObyBuZWVkIHRvIGJ1bmRsZSB5b3VyIGZpbGUgYmVmb3JlIHZhbGlkYXRpb24uCi0gW3hdIExpZ2h0bmluZy1mYXN0IHZhbGlkYXRpb24uIExpbnQgYSAxIE1CIGZpbGUgaW4gbGVzcyB0aGFuIG9uZSBzZWNvbmQuCi0gW3hdIEJ1aWx0LWluIHJ1bGVzIGZvciBjb21tb24gdmFsaWRhdGlvbnMuCi0gW3hdIENvbmZpZ3VyYWJsZSBzZXZlcml0eSBsZXZlbHMgZm9yIGVhY2ggcnVsZS4KLSBbeF0gSHVtYW4tcmVhZGFibGUgZXJyb3IgbWVzc2FnZXMgd2l0aCBjb2RlZnJhbWVzIGFuZCBzdHlsaXNoIGZvcm1hdCBvcHRpb25zLgotIFt4XSBJbnR1aXRpdmUgc3VnZ2VzdGlvbnMgZm9yIG1pc3NwZWxsZWQgdHlwZXMgb3IgcmVmZXJlbmNlcy4KLSBbeF0gRWFzeSB0byBpbXBsZW1lbnQgY3VzdG9tIHJ1bGVzLgotIFt4XSBCdW5kbGUgYSBtdWx0aS1maWxlIGRlZmluaXRpb24gaW50byBhIHNpbmdsZSBmaWxlLgotIFt4XSBEZWNvcmF0b3JzIHRvIG1vZGlmeSBhIHZhbGlkYXRlZCBkZWZpbml0aW9uIGR1cmluZyBidW5kbGluZy4KLSBbeF0gUHJldmlldyByZWZlcmVuY2UgZG9jcyBmb3IgbG9jYWwgZGV2ZWxvcG1lbnQuCi0gW3hdIFN1cHBvcnQgZm9yIE9wZW5BUEkgMiAoZmthIFN3YWdnZXIpIGFuZCBPcGVuQVBJIDMuMC4KLSBbeF0gQmFzaWMgc3VwcG9ydCBmb3IgT3BlbkFQSSAzLjEKCiMjIFdoYXQgbWFrZXMgdGhpcyB0b29sIGRpZmZlcmVudAoKVW5saWtlIG90aGVyIE9wZW5BUEkgbGludGVycywgYEByZWRvY2x5L29wZW5hcGktY2xpYCBkZWZpbmVzIHRoZSBwb3NzaWJsZSB0eXBlIHRyZWUgb2YgYSB2YWxpZCBPcGVuQVBJIGRlZmluaXRpb24gYW5kIHRoZW4gdHJhdmVyc2VzIGl0LiBUaGlzIGFwcHJvYWNoIGlzIHZlcnkgc2ltaWxhciB0byBob3cgbGludGVycyBmb3IgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzIHdvcmsgYW5kIHJlc3VsdHMgaW4gbWFqb3IgcGVyZm9ybWFuY2UgYmVuZWZpdHMgb3ZlciBvdGhlciBhcHByb2FjaGVzLiBFeHRlbmQgZnVuY3Rpb25hbGl0eSBhdCBkaWZmZXJlbnQgcG9pbnRzIGluIHRoZSBsaWZlY3ljbGUgd2l0aCBwcmVwcm9jZXNzb3JzLCBydWxlcywgYW5kIGRlY29yYXRvcnMuCgojIyBVc2FnZQoKIyMjIE5vZGUKCmBgYApucHggQHJlZG9jbHkvb3BlbmFwaS1jbGkgbGludCBwYXRoLXRvLXJvb3QtZmlsZS55YW1sCmBgYAoKQWx0ZXJuYXRpdmVseSwgaW5zdGFsbCBpdCBnbG9iYWxseSB3aXRoIGBucG1gOgoKYGBgCm5wbSBpbnN0YWxsIEByZWRvY2x5L29wZW5hcGktY2xpIC1nCmBgYAoKVGhlbiB5b3UgY2FuIHVzZSBpdCBhcyBgb3BlbmFwaSBbY29tbWFuZF0gW29wdGlvbnNdYCwgZm9yIGV4YW1wbGU6CgpgYGBvcGVuYXBpIGxpbnQgcGF0aC10by1yb290LWZpbGUueWFtbGBgYAoKIyMjIERvY2tlcgoKVG8gZ2l2ZSB0aGUgRG9ja2VyIGNvbnRhaW5lciBhY2Nlc3MgdG8gdGhlIE9wZW5BUEkgZGVmaW5pdGlvbiBmaWxlcywgeW91IG5lZWQgdG8KbW91bnQgdGhlIGNvbnRhaW5pbmcgZGlyZWN0b3J5IGFzIGEgdm9sdW1lLiBBc3N1bWluZyB0aGUgT0FTIGRlZmluaXRpb24gaXMgcm9vdGVkCmluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LCB5b3UgbmVlZCB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6CgpgYGAKZG9ja2VyIHJ1biAtLXJtIC12ICRQV0Q6L3NwZWMgcmVkb2NseS9vcGVuYXBpLWNsaSBsaW50IHBhdGgtdG8tcm9vdC1maWxlLnlhbWwKYGBgCgpUbyBidWlsZCBhbmQgcnVuIHdpdGggYSBsb2NhbCBpbWFnZSwgcnVuIHRoZSBmb2xsb3dpbmcgZnJvbSB0aGUgcHJvamVjdCByb290OgoKYGBgCmRvY2tlciBidWlsZCAtdCBvcGVuYXBpLWNsaSAuCmRvY2tlciBydW4gLS1ybSAtdiAkUFdEOi9zcGVjIG9wZW5hcGktY2xpIGxpbnQgcGF0aC10by1yb290LWZpbGUueWFtbApgYGAKCiMjIFtSZWFkIHRoZSBkb2NzXShodHRwczovL3JlZG9jLmx5L2RvY3MvY2xpLykKCiMjIENyZWRpdHMKClRoYW5rcyB0byBbZ3JhcGhxbC1qc10oaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcykgYW5kIFtlc2xpbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50KSBmb3IgaW5zcGlyYXRpb24gb2YgdGhlIGRlZmluaXRpb24gdHJhdmVyc2FsIGFwcHJvYWNoIGFuZCB0byBbU3dhZ2dlcl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItZWRpdG9yKSwgW1NwZWN0cmFsXShodHRwczovL2dpdGh1Yi5jb20vc3RvcGxpZ2h0aW8vc3BlY3RyYWwpLCBhbmQgW09BUy1LaXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQpIGZvciBpbnNwaXJpbmcgdGhlIHJ1bGVzZXQuCgojIyBEZXZlbG9wbWVudAoKU2VlIFtDT05UUklCVVRJTkcubWRdKC5naXRodWIvQ09OVFJJQlVUSU5HLm1kKQ==
    readmeEtag: '"3255f9ef42578cabaf8130caa01f2bbdb0c34d933e74e2e3d6c6277903105dec"'
    readmeLastModified: Wed, 20 Apr 2022 16:17:11 GMT
    description: ⚒️ OpenAPI CLI toolbox with rich validation and bundling features.
    created: "2019-09-10T14:56:25Z"
    updated: "2022-04-28T03:44:27Z"
    language: TypeScript
    archived: false
    stars: 369
    watchers: 369
    forks: 48
    owner: Redocly
    logo: https://avatars.githubusercontent.com/u/32099856?v=4
    license: MIT
    repoEtag: '"571964a2609f1947041ae9c5d35f0c3482680c844afb62ef0d822886bd5201a7"'
    repoLastModified: Thu, 28 Apr 2022 03:44:27 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: OpenAPI Enforcer
  category:
    - Data Validators
    - Description Validators
    - Testing
  language: Node.js
  link: https://www.npmjs.com/package/openapi-enforcer
  repository: https://github.com/byu-oit/openapi-enforcer
  source_description: >-
    Validate your OpenAPI document, serialize, deserialize, and validate
    incoming requests and outgoing responses, and simplify response building.
    You can even produce mock data.
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJLUVuZm9yY2VyCgpUb29scyBmb3IgdXNpbmcgdGhlIE9wZW4gQVBJIFNwZWNpZmljYXRpb24gKE9BUykKCioqU3VwcG9ydHMgT0FTIDIuMCAoZm9ybWVybHkgU3dhZ2dlcikgYW5kIE9BUyAzLngueCoqCgojIyBGZWF0dXJlcwoKLSBDcmVhdGUgYW4gQVBJLgotIFZhbGlkYXRlIHlvdXIgT0FTIGRvY3VtZW50cy4KLSBTZXJpYWxpemUsIGRlc2VyaWFsaXplLCBhbmQgdmFsaWRhdGUgdmFsdWVzIGFnYWluc3QgT0FTIHNjaGVtYXMuCi0gSWRlbnRpZnkgdGhlIG9wZXJhdGlvbiBhc3NvY2lhdGVkIHdpdGggYSByZXF1ZXN0LgotIFBhcnNlLCBkZXNlcmlhbGl6ZSwgYW5kIHZhbGlkYXRlIHJlcXVlc3QgcGFyYW1ldGVycy4KLSBGYWNpbGl0YXRlZCByZXNwb25zZSBidWlsZGluZy4KLSBHZW5lcmF0ZSByYW5kb20gdmFsaWQgdmFsdWVzIGZvciBhIHNjaGVtYS4KLSBQbHVnaW4gZW52aXJvbm1lbnQgZm9yIGN1c3RvbSBkb2N1bWVudCB2YWxpZGF0aW9uIGFuZCBleHRlbmRlZCBmdW5jdGlvbmFsaXR5IGluY2x1ZGluZyBjdXN0b20gZGF0YSB0eXBlIGZvcm1hdHMuCgojIyBXZWJzaXRlIC0gW29wZW5hcGktZW5mb3JjZXIuY29tXShodHRwczovL29wZW5hcGktZW5mb3JjZXIuY29tLykKCiMjIEluc3RhbGxhdGlvbgoKYGBgc2hlbGwKbnBtIGluc3RhbGwgb3BlbmFwaS1lbmZvcmNlcgpgYGAKCiMjIEV4YW1wbGVzCgojIyMgTG9hZGluZyBhbmQgVmFsaWRhdGluZyBhIERvY3VtZW50CgpVc2UgdGhlIEVuZm9yY2VyIHRvIGxvYWQgYW5kIHJlc29sdmUgYWxsICRyZWYgdmFsdWVzIGFuZCB0aGVuIHRvIHZhbGlkYXRlIHRoZSBjb21wbGV0ZSBkb2N1bWVudC4KCmBgYGpzCmNvbnN0IEVuZm9yY2VyID0gcmVxdWlyZSgnb3BlbmFwaS1lbmZvcmNlcicpCgphc3luYyBmdW5jdGlvbiBydW4gKCkgewogIGNvbnN0IFtvcGVuYXBpLCBlcnJvciwgd2FybmluZ10gPSBhd2FpdCBFbmZvcmNlcignLi9wYXRoL3RvL29wZW5hcGkueW1sJywgewogICAgZnVsbFJlc3VsdDogdHJ1ZQogIH0pCiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgaWYgKHdhcm5pbmcgIT09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKHdhcm5pbmcpCiAgaWYgKG9wZW5hcGkgIT09IHVuZGVmaW5lZCkgY29uc29sZS5sb2coJ0RvY3VtZW50IGlzIHZhbGlkJykKfQoKcnVuLmNhdGNoKGNvbnNvbGUuZXJyb3IpCmBgYAoKIyMjIFByb2Nlc3NpbmcgYW4gSW5jb21pbmcgUmVxdWVzdAoKYGBganMKY29uc3QgRW5mb3JjZXIgPSByZXF1aXJlKCdvcGVuYXBpLWVuZm9yY2VyJykKCmFzeW5jIGZ1bmN0aW9uIHJ1biAoKSB7CiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBzcGVjaWZ5IGBmdWxsUmVzdWx0OiB0cnVlYCwgYW55IGVycm9ycyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBhbmQKICAvLyB3YXJuaW5ncyB3aWxsIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS4KICBjb25zdCBvcGVuYXBpID0gYXdhaXQgRW5mb3JjZXIoJy4vcGF0aC90by9vcGVuYXBpLnltbCcpCgogIC8vIElmIHRoZSByZXF1ZXN0IGlzIHZhbGlkIHRoZW4gdGhlIHJlcSBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBwYXJzZWQgYW5kIHZhbGlkYXRlZCByZXF1ZXN0LgogIC8vIElmIGl0IGlzIGludmFsaWQgdGhlbiB0aGUgZXJyb3Igd2lsbCBjb250YWluIGRldGFpbHMgYWJvdXQgd2hhdCB3YXMgd3Jvbmcgd2l0aCB0aGUKICAvLyByZXF1ZXN0IGFuZCB0aGVzZSBkZXRhaWxzIGFyZSBzYWZlIHRvIHJldHVybiB0byB0aGUgY2xpZW50IHRoYXQgbWFkZSB0aGUgcmVxdWVzdC4KICBjb25zdCBbIHJlcSwgZXJyb3IgXSA9IG9wZW5hcGkucmVxdWVzdCh7CiAgICBtZXRob2Q6ICdQT1NUJywKICAgIHBhdGg6ICcvdGFza3MnLAogICAgLy8gdGhlIGJvZHkgc2hvdWxkIGJlIHBhcnNlZCBieSBhIEpTT04ucGFyc2UoKSBwcmlvciB0byBwYXNzaW5nIGluIChpZiBhcHBsaWNhYmxlKS4KICAgIGJvZHk6IHsgdGFzazogJ0J1eSBNaWxrJywgcXVhbnRpdHk6IDIgfQogIH0pCgogIC8vIFlvdSBjYW4gdXNlIHRoZSByZXEub3BlcmF0aW9uIHByb3BlcnR5IHRvIGxvb2sgYXQgdGhlIHByb3BlcnRpZXMgZnJvbSB5b3VyIE9wZW5BUEkgZG9jdW1lbnQuCiAgLy8gQSBnb29kIHVzZSBvZiB0aGlzIGlzIHRvIGxvb2sgYXQgdGhlIG9wZXJhdGlvbklkIHlvdSBkZWZpbmVkIHRoZXJlIHRvIGRldGVybWluZSB3aGljaCBwYXRoCiAgLy8gaXMgYmVpbmcgdXNlZCB0byBoYW5kbGUgdGhlIHJlcXVlc3QuCiAgaWYgKHJlcS5vcGVyYXRvbi5vcGVyYXRpb25JZCA9PT0gJ215LW9wZXJhdGlvbi1pZCcpIHsKICAgIC8vIC4uLiBhZGRpdGlvbmFsIHJlcXVlc3QgcHJvY2Vzc2luZwogIH0KfQoKcnVuLmNhdGNoKGNvbnNvbGUuZXJyb3IpCmBgYAoKIyMjIFByb2R1Y2luZyBhIFZhbGlkIFJlc3VsdAoKYGBganMKY29uc3QgRW5mb3JjZXIgPSByZXF1aXJlKCdvcGVuYXBpLWVuZm9yY2VyJykKCmFzeW5jIGZ1bmN0aW9uIHJ1biAoKSB7CiAgY29uc3Qgb3BlbmFwaSA9IGF3YWl0IEVuZm9yY2VyKCcuL3BhdGgvdG8vb3BlbmFwaS55bWwnKQoKICBjb25zdCBbIHJlcSBdID0gb3BlbmFwaS5yZXF1ZXN0KHsKICAgIG1ldGhvZDogJ1BPU1QnLAogICAgcGF0aDogJy90YXNrcycsCiAgICAvLyB0aGUgYm9keSBzaG91bGQgYmUgcGFyc2VkIGJ5IGEgSlNPTi5wYXJzZSgpIHByaW9yIHRvIHBhc3NpbmcgaW4gKGlmIGFwcGxpY2FibGUpLgogICAgYm9keTogeyB0YXNrOiAnQnV5IE1pbGsnLCBxdWFudGl0eTogMiB9CiAgfSkKCiAgY29uc3QgYm9keSA9IHsgaWQ6IDEsIHRhc2s6ICdCdXkgTWlsaycsIHF1YW50aXR5OiAyLCBkYXRlQ29tcGxldGVkOiBudWxsIH0KICBjb25zdCBoZWFkZXJzID0ge30KCiAgLy8gVGhpcyB3aWxsIHZhbGlkYXRlIHRoZSByZXNwb25zZSBjb2RlLCBib2R5LCBhbmQgaGVhZGVycy4gSXQgd2lsbCBhbHNvIGNvcnJlY3RseSBzZXJpYWxpemUKICAvLyB0aGUgYm9keSBhbmQgaGVhZGVycyBmb3Igc2VuZGluZyB0byB0aGUgY2xpZW50IHRoYXQgbWFkZSB0aGUgcmVxdWVzdC4gVXNpbmcgdGhpcyBtZXRob2QKICAvLyB5b3UnbGwgbmV2ZXIgc2VuZCBiYWNrIGEgcmVzcG9uc2UgdGhhdCBkb2VzIG5vdCBtYXRjaCB3aGF0IHlvdXIgT3BlbkFQSSBkb2N1bWVudCBkZWZpbmVzLgogIGNvbnN0IFsgcmVzLCBlcnJvciBdID0gcmVxLnJlc3BvbnNlKDIwMCwgYm9keSwgaGVhZGVycykKICBjb25zb2xlLmxvZyhyZXMuYm9keSwgcmVzLmhlYWRlcnMpCn0KCnJ1bi5jYXRjaChjb25zb2xlLmVycm9yKQpgYGAK
    readmeEtag: '"b58f8f3c7a3bbc1d6afb16905e4d7f3054dad07b0ee672ce3e2f18c1bc3767f8"'
    readmeLastModified: Thu, 31 Mar 2022 23:44:09 GMT
    description: null
    created: "2018-02-05T23:06:16Z"
    updated: "2022-04-27T02:34:16Z"
    language: JavaScript
    archived: false
    stars: 78
    watchers: 78
    forks: 19
    owner: Gi60s
    logo: https://avatars.githubusercontent.com/u/714117?v=4
    license: Apache-2.0
    repoEtag: '"b716163cab64ab193d7233be4af10408d6e9db7aa04f84da80d9ecc8c6c6af49"'
    repoLastModified: Wed, 27 Apr 2022 02:34:16 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: openapi4j
  category:
    - Data Validators
    - Schema Validators
    - Parsers
  repository: https://github.com/openapi4j/openapi4j
  language: Java
  source_description: >-
    Parse Description Document, validate API requests and responses using
    OpenAPI 3.x.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      WyFbQnVpbGQgU3RhdHVzXShodHRwczovL3RyYXZpcy1jaS5jb20vb3BlbmFwaTRqL29wZW5hcGk0ai5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHBzOi8vdHJhdmlzLWNpLmNvbS9vcGVuYXBpNGovb3BlbmFwaTRqKQpbIVtNYWludGFpbmFiaWxpdHkgUmF0aW5nXShodHRwczovL3NvbmFyY2xvdWQuaW8vYXBpL3Byb2plY3RfYmFkZ2VzL21lYXN1cmU/cHJvamVjdD1vcmcub3BlbmFwaTRqJTNBb3BlbmFwaTRqJm1ldHJpYz1zcWFsZV9yYXRpbmcpXShodHRwczovL3NvbmFyY2xvdWQuaW8vZGFzaGJvYXJkP2lkPW9yZy5vcGVuYXBpNGolM0FvcGVuYXBpNGopClshW1NlY3VyaXR5IFJhdGluZ10oaHR0cHM6Ly9zb25hcmNsb3VkLmlvL2FwaS9wcm9qZWN0X2JhZGdlcy9tZWFzdXJlP3Byb2plY3Q9b3JnLm9wZW5hcGk0aiUzQW9wZW5hcGk0aiZtZXRyaWM9c2VjdXJpdHlfcmF0aW5nKV0oaHR0cHM6Ly9zb25hcmNsb3VkLmlvL2Rhc2hib2FyZD9pZD1vcmcub3BlbmFwaTRqJTNBb3BlbmFwaTRqKQpbIVtDb3ZlcmFnZV0oaHR0cHM6Ly9zb25hcmNsb3VkLmlvL2FwaS9wcm9qZWN0X2JhZGdlcy9tZWFzdXJlP3Byb2plY3Q9b3JnLm9wZW5hcGk0aiUzQW9wZW5hcGk0aiZtZXRyaWM9Y292ZXJhZ2UpXShodHRwczovL3NvbmFyY2xvdWQuaW8vZGFzaGJvYXJkP2lkPW9yZy5vcGVuYXBpNGolM0FvcGVuYXBpNGopCgpfX1RoaXMgcmVwb3NpdG9yeSBpcyBub3cgYXJjaGl2ZWQuIEkgZG9uJ3QgaGF2ZSBlbm91Z2ggc3BhcmUgdGltZSB0byBtYWludGFpbiB0aGlzIHByb2plY3QgKHdlbGwgYWN0dWFsbHkgcmV2YW1wKSBhbmQgZm9sbG93IE9BSSBzcGVjcy4gVGhpcyBwcm9qZWN0IGRlc2VydmVzIG11Y2ggbW9yZSB0aGF0IEkgY2FuIGdpdmUgdG8gc291cmNlIGNvZGUgYW5kIGZvbGxvd2VycyB0byBwcm92aWRlIGFwcHJvcHJpYXRlIG91dHB1dC5fXwoKIyBPcGVuQVBJIGZvciBqYXZhIHByb2plY3QgaG9tZQoKVGhpcyBpcyB0aGUgaG9tZSBwYWdlIG9mIHRoZSBvcGVuYXBpNGogcHJvamVjdCBmb3IgSmF2YSAoSmFrYXJ0YSBvciBKVk0gcGxhdGZvcm0gaW4gZ2VuZXJhbCkuCgpvcGVuYXBpNGogaXMgYSBzdWl0ZSBvZiB0b29scywgaW5jbHVkaW5nIHRoZSBmb2xsb3dpbmcgOgoqIFtPcGVuIEFQSSBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci92ZXJzaW9ucy8zLjAuMy5tZCkgcGFyc2VyIGFuZCB2YWxpZGF0b3IuCiogT3BlbiBBUEkgW1NjaGVtYSBPYmplY3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMC4zLm1kI3NjaGVtYU9iamVjdCkgdmFsaWRhdG9yLgoqIFtKU09OIHJlZmVyZW5jZV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBicnlhbi16eXAtanNvbi1yZWYtMDMpIGltcGxlbWVudGF0aW9uLgoqIFJlcXVlc3QvcmVzcG9uc2UgdmFsaWRhdG9yIGFnYWluc3Qgb3BlcmF0aW9uLgoqIEZvciBpbnRlcm5hbCB1c2Ugb25seSwgcGVyZm9ybWFuY2UgcHJvamVjdCByZXBvcnRzIHNvbWUgbnVtYmVycyB0byAnbWFudWFsbHknIGNoZWNrIGFueSBpbXByb3ZlbWVudHMgb3IgcmVncmVzc2lvbnMgYmV0d2VlbiB2ZXJzaW9ucy4KCiMjIE1vZHVsZXMKCiogW1BhcnNlcl0ob3BlbmFwaS1wYXJzZXIpIGFsbG93cyB0aGUgKGRlLSlzZXJpYWxpemF0aW9uIGFuZCBtYW5pcHVsYXRpb24gb2YgdGhlIHNjaGVtYSBhbmQgaXRzIHZhbGlkYXRpb24uCiogW1NjaGVtYSB2YWxpZGF0b3JdKG9wZW5hcGktc2NoZW1hLXZhbGlkYXRvcikgYWxsb3dzIHRoZSB2YWxpZGF0aW9uIG9mIGRhdGEgYWdhaW5zdCBhIGdpdmVuIHNjaGVtYS4KKiBbUmVxdWVzdCB2YWxpZGF0b3JdKG9wZW5hcGktb3BlcmF0aW9uLXZhbGlkYXRvcikgaXMgaGlnaCBsZXZlbCBtb2R1bGUgdG8gbWFuYWdlIHZhbGlkYXRpb24gZm9yIHJlcXVlc3RzIGFuZC9vciByZXNwb25zZXMgYWdhaW5zdCBvcGVyYXRpb25zLiBNb3JlIGRldGFpbHMgaW4gdGhlIHJlbGF0ZWQgcHJvamVjdC4KKiBbUmVxdWVzdCBhZGFwdGVyc10ob3BlbmFwaS1vcGVyYXRpb24tYWRhcHRlcnMpIGlzIHRoZSByZXBvc2l0b3J5IG9mIHNwZWNpZmljIGFkYXB0ZXJzIHRvIHdyYXAgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcy4KCiMjIERvY3VtZW50YXRpb24KClRoZSBkb2N1bWVudGF0aW9uIGZvciBhbGwgbW9kdWxlcyBpcyBhdmFpbGFibGUgW2hlcmVdKGh0dHBzOi8vb3BlbmFwaTRqLmdpdGh1Yi5pby9vcGVuYXBpNGovKS4KCiMjIFZlcnNpb25pbmcgYW5kIGNvbXBhdGliaWxpdHkKCkFsbCBtb2R1bGVzIGZvbGxvdyB0aGUgW1NlbWFudGljIFZlcnNpb25pbmcgMi4wLjBdKGh0dHBzOi8vc2VtdmVyLm9yZykgYW5kIGFyZSBhbGlnbmVkIG9uIGVhY2ggcmVsZWFzZSBldmVuIHRoZXJlJ3Mgbm8gY2hhbmdlcy4KCmBgYHhtbAo8ZGVwZW5kZW5jeT4KICAgIDxncm91cElkPm9yZy5vcGVuYXBpNGo8L2dyb3VwSWQ+CiAgICA8YXJ0aWZhY3RJZD5vcGVuYXBpLVttb2R1bGVdPC9hcnRpZmFjdElkPgo8L2RlcGVuZGVuY3k+CmBgYAoKWyFbUmVsZWFzZSB2ZXJzaW9uXShodHRwczovL2ltZy5zaGllbGRzLmlvL25leHVzL3Ivb3JnLm9wZW5hcGk0ai9vcGVuYXBpLW9wZXJhdGlvbi12YWxpZGF0b3I/c3R5bGU9Zm9yLXRoZS1iYWRnZSZjb2xvcj1ibHVlJmxhYmVsPVJlbGVhc2Umc2VydmVyPWh0dHBzJTNBJTJGJTJGb3NzLnNvbmF0eXBlLm9yZyldKGh0dHBzOi8vc2VhcmNoLm1hdmVuLm9yZy9zZWFyY2g/cT1nOm9yZy5vcGVuYXBpNGopClshW1NuYXBzaG90IHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbmV4dXMvcy9vcmcub3BlbmFwaTRqL29wZW5hcGktb3BlcmF0aW9uLXZhbGlkYXRvcj9zdHlsZT1mb3ItdGhlLWJhZGdlJmNvbG9yPWJsdWUmbGFiZWw9U25hcHNob3Qmc2VydmVyPWh0dHBzJTNBJTJGJTJGb3NzLnNvbmF0eXBlLm9yZyldKGh0dHBzOi8vb3NzLnNvbmF0eXBlLm9yZy9jb250ZW50L3JlcG9zaXRvcmllcy9zbmFwc2hvdHMvb3JnL29wZW5hcGk0ai8pCgpTbmFwc2hvdCBpcyBhdmFpbGFibGUgZm9yIGxhdGVzdCB2YWxpZCBjb21taXQgb24gJ21hc3RlcicgYnJhbmNoLgoKIyMgUGVyZm9ybWFuY2UKCkNoZWNrIFtoZXJlXShodHRwczovL3d3dy5vcGVuYXBpNGoub3JnL3BlcmYtdmFsdWVzLmh0bWwpIGZvciBzb21lIHZhbHVlcy4KCiMjIE5hdGl2ZSBjb21waWxhdGlvbiAoR3JhYWxWTSkKCkZyb20gdmVyc2lvbiAwLjcsIHRoZSB0b29sc2V0IGlzIGZ1bGx5IGNvbXBsaWFudCB3aXRoIG5hdGl2ZSBjb21waWxhdGlvbiAoQU9UKS4KVGhpcyB3YXMgdGVzdGVkIHdpdGggR3JhYWxWTSAxOS4zLjEuCk5vIGZ1cnRoZXIgY29uZmlndXJhdGlvbiBvciBkaXJlY3RpdmUgaXMgbmVlZGVkIHRvIGluY2x1ZGUgdGhlIG1vZHVsZXMgaWYgYXZhaWxhYmxlIG9uIGNsYXNzcGF0aC4KCmBgYHNoZWxsIHNjcmlwdApuYXRpdmUtaW1hZ2UgLUg6K1JlcG9ydEV4Y2VwdGlvblN0YWNrVHJhY2VzIC0tbm8tZmFsbGJhY2sgLWphciB5b3VyLWFwcC5qYXIKYGBgCgpGWUksIHRlc3RpbmcgcnVucyBtYWRlIGRvbid0IHNob3cgbXVjaCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMgYnV0IHBhcnNlciBtb2R1bGUuCgojIyBTdXBwb3J0ZWQgdmVyc2lvbnMKClRoZSBtb2R1bGVzIGN1cnJlbnRseSBzdXBwb3J0IHRoZSBPcGVuQVBJIFNwZWNpZmljYXRpb24gKE9BUykgdmVyc2lvbiAzLjAueC4KCk9BSSAzLjEuMCBoYXMgYmVlbiByZWxlYXNlZCBhcyBjYW5kaWRhdGUuICAKVGhlcmUncyB0b28gbXVjaCBjaGFuZ2VzIHRvbyBrZWVwIGNvZGUgb24gc2FtZSBiYXNpcyBhbmQga2VlcCBhIGZhaXJseSBsb3cgbGV2ZWwgb2YgY29tcGxleGl0eS4gIApBcyBhIGNvbnNlcXVlbmNlLCBPQUkgMy4xLnggc3VwcG9ydCB3aWxsIGJlIG1hZGUgaW4gYSB2ZXJzaW9uIDIgb2Ygb3BlbmFwaTRqLiAgCgpBcyBteSB0aW1lIGlzIHZlcnkgbGltaXRlZCwgdmVyc2lvbiAxIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIGZyZWV6ZWQgZm9yIG5vdy4KClNlZSByZWxhdGVkIHByb2plY3RzIGZvciBsaW1pdGF0aW9ucyBhbmQgaXNzdWVzLgoKIyMgQ29udHJpYnV0aW5nCgpSZXBvcnRpbmcgaXNzdWVzLCBtYWtpbmcgY29tbWVudHMsIC4uLiBBbnkgaGVscCBpcyB3ZWxjb21lICEKCldlIGFjY2VwdCBQdWxsIFJlcXVlc3RzIHZpYSBHaXRIdWIuIFRoZXJlIGFyZSBzb21lIGd1aWRlbGluZXMgd2hpY2ggd2lsbCBtYWtlIGFwcGx5aW5nIFBScyBlYXNpZXIgZm9yIHVzIDoKCiogUmVzcGVjdCB0aGUgY29kZSBzdHlsZSBhbmQgaW5kZW50YXRpb24uIC5lZGl0b3Jjb25maWcgZmlsZSBpcyBwcm92aWRlZCB0byBub3QgYmUgd29ycmllZCBhYm91dCB0aGlzLgoqIENyZWF0ZSBtaW5pbWFsIGRpZmZzIC0gZGlzYWJsZSBvbiBzYXZlIGFjdGlvbnMgbGlrZSByZWZvcm1hdCBzb3VyY2UgY29kZSBvciBvcmdhbml6ZSBpbXBvcnRzLiBJZiB5b3UgZmVlbCB0aGUgc291cmNlIGNvZGUgc2hvdWxkIGJlIHJlZm9ybWF0dGVkIGNyZWF0ZSBhIHNlcGFyYXRlIFBSIGZvciB0aGlzIGNoYW5nZS4KKiBQcm92aWRlIEpVbml0IHRlc3RzIGZvciB5b3VyIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB5b3VyIGNoYW5nZXMgZG9uJ3QgYnJlYWsgYW55dGhpbmcgYnkgcnVubmluZyBgZ3JhZGxldyBjbGVhbiBjaGVja2AuCiogUHJvdmlkZSBhIHNlbGYgZXhwbGFuYXRvcnkgYnV0IGJyaWVmIGNvbW1pdCBtZXNzYWdlIHdpdGggaXNzdWUgcmVmZXJlbmNlIGlmIGFueSwgYXMgaXQgd2lsbCBiZSByZXBvcnRlZCBkaXJlY3RseSBmb3IgcmVsZWFzZSBjaGFuZ2Vsb2cuCgojIyBMaWNlbnNlCgpvcGVuYXBpNGogYW5kIGFsbCB0aGUgbW9kdWxlcyBhcmUgcmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZS4gU2VlIFtMSUNFTlNFXShodHRwczovL2dpdGh1Yi5jb20vb3BlbmFwaTRqL29wZW5hcGk0ai9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKSBmb3IgZGV0YWlscy4K
    readmeEtag: '"aef3b08a562e600a6e333014a0affe2a998237b5bdf5326b3a2d0cc1af128cde"'
    readmeLastModified: Fri, 09 Jul 2021 15:33:59 GMT
    description: OpenAPI 3 parser, JSON schema and request validator.
    created: "2019-10-31T15:59:35Z"
    updated: "2022-04-27T10:54:09Z"
    language: Java
    archived: true
    stars: 82
    watchers: 82
    forks: 33
    owner: openapi4j
    logo: https://avatars.githubusercontent.com/u/39759775?v=4
    license: Apache-2.0
    repoEtag: '"fa0aeaa2cf9f5eeead0d755da4e67fc1bebe0026de478345b0c8645364ac8cc0"'
    repoLastModified: Wed, 27 Apr 2022 10:54:09 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: oas-tools
  category:
    - Security
    - Documentation
    - Server
    - Parsers
    - Data Validators
    - Description Validators
  repository: https://github.com/isa-group/oas-tools
  language: Node.js
  source_description: >-
    NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description
    over express servers, including security validations
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"3aa683457f539c0956bd5d7cd4d4598cbb711bc950b4b0613113aa2bc422daa0"'
    readmeLastModified: Wed, 02 Mar 2022 19:39:22 GMT
    description: >-
      NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Specs over
      express servers.
    created: "2018-02-08T14:28:39Z"
    updated: "2022-04-24T09:32:07Z"
    language: JavaScript
    archived: false
    stars: 123
    watchers: 123
    forks: 43
    owner: oas-tools
    logo: https://avatars.githubusercontent.com/u/97441539?v=4
    license: Apache-2.0
    repoEtag: '"f9688e2f98ef60ceccc54d827d72c41cb8cb0e852141b155d7181fd793bf86e8"'
    repoLastModified: Sun, 24 Apr 2022 09:32:07 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: openVALIDATION
  category:
    - Description Validators
    - Data Validators
    - Sdk
  repository: https://github.com/openvalidation/openvalidation-openapi
  link: https://docs.openvalidation.io/openapi/openapi-specification
  language: Java
  source_description: >-
    Allows complex validation rules to be specified in openAPI spec files using
    natural language.
  v3: true
  repositoryMetadata:
    base64Readme: >-
      WyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vdmFsaWRhcmlhL29wZW52YWxpZGF0aW9uL19hcGlzL2J1aWxkL3N0YXR1cy9vcGVuVkFMSURBVElPTiUyME9wZW5BUEkvb3BlblZBTElEQVRJT04lMjBPcGVuQVBJJTIwbWFzdGVyP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3ZhbGlkYXJpYS9vcGVudmFsaWRhdGlvbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0zJmJyYW5jaE5hbWU9bWFzdGVyKQohW0F6dXJlIERldk9wcyB0ZXN0cyAoY29tcGFjdCldKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYXp1cmUtZGV2b3BzL3Rlc3RzL3ZhbGlkYXJpYS9vcGVudmFsaWRhdGlvbi8zP2NvbXBhY3RfbWVzc2FnZSkKWyFbTWF2ZW4gQ2VudHJhbF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9tYXZlbi1jZW50cmFsL3YvaW8ub3BlbnZhbGlkYXRpb24vb3BlbnZhbGlkYXRpb24tb3BlbmFwaS1nZW5lcmF0b3IpXShodHRwczovL3NlYXJjaC5tYXZlbi5vcmcvc2VhcmNoP3E9Zzppby5vcGVudmFsaWRhdGlvbikKWyFbRm9sbG93IHVzIG9uIFR3aXR0ZXJdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vdHdpdHRlci9mb2xsb3cvb3BlblZBTElEQVRJT04/c3R5bGU9c29jaWFsKV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9vcGVuVkFMSURBVElPTikKCgojIE9wZW5BUEkgR2VuZXJhdG9yIGZvciBvcGVuVkFMSURBVElPTgoKVGhpcyBwcm9qZWN0IHByb3ZpZGVzIGFuIG9wZW5hcGktZ2VuZXJhdG9yIGludGVncmF0aW9uIHRvIGdlbmVyYXRlIHNlcnZpY2VzIHdpdGggdmFsaWRhdGlvbiBsb2dpYyBwcm92aWRlZCBieSBvcGVuVkFMSURBVElPTi4KCiMjIFdoYXQncyBPcGVuQVBJClRoZSBnb2FsIG9mIE9wZW5BUEkgaXMgdG8gZGVmaW5lIGEgc3RhbmRhcmQsIGxhbmd1YWdlLWFnbm9zdGljIGludGVyZmFjZSB0byBSRVNUIEFQSXMgd2hpY2ggYWxsb3dzIGJvdGggaHVtYW5zIGFuZCBjb21wdXRlcnMgdG8gZGlzY292ZXIgYW5kIHVuZGVyc3RhbmQgdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgc2VydmljZSB3aXRob3V0IGFjY2VzcyB0byBzb3VyY2UgY29kZSwgZG9jdW1lbnRhdGlvbiwgb3IgdGhyb3VnaCBuZXR3b3JrIHRyYWZmaWMgaW5zcGVjdGlvbi4KV2hlbiBwcm9wZXJseSBkZXNjcmliZWQgd2l0aCBPcGVuQVBJLCBhIGNvbnN1bWVyIGNhbiB1bmRlcnN0YW5kIGFuZCBpbnRlcmFjdCB3aXRoIHRoZSByZW1vdGUgc2VydmljZSB3aXRoIGEgbWluaW1hbCBhbW91bnQgb2YgaW1wbGVtZW50YXRpb24gbG9naWMuClNpbWlsYXIgdG8gd2hhdCBpbnRlcmZhY2VzIGhhdmUgZG9uZSBmb3IgbG93ZXItbGV2ZWwgcHJvZ3JhbW1pbmcsIE9wZW5BUEkgcmVtb3ZlcyB0aGUgZ3Vlc3N3b3JrIGluIGNhbGxpbmcgdGhlIHNlcnZpY2UuCgpDaGVjayBvdXQgW09wZW5BUEktU3BlY10oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24pIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBPcGVuQVBJIHByb2plY3QsIGluY2x1ZGluZyBhZGRpdGlvbmFsIGxpYnJhcmllcyB3aXRoIHN1cHBvcnQgZm9yIG90aGVyIGxhbmd1YWdlcyBhbmQgbW9yZS4gCgojIyBXaGF0J3Mgb3BlblZBTElEQVRJT04KCkNoZWNrIG91dCBbb3BlblZBTElEQVRJT05dKGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVudmFsaWRhdGlvbi9vcGVudmFsaWRhdGlvbikgdG8gbGVhcm4gYWJvdXQgaHVtYW4gcmVhZGFibGUgdmFsaWRhdGlvbiBydWxlcyBmb3Igc29mdHdhcmUgc29sdXRpb25zLgoKIyMgb3BlblZBTElEQVRJT04gT3BlbkFQSSBDb2RlZ2VuIERvY3VtZW50YXRpb24KCltEb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Mub3BlbnZhbGlkYXRpb24uaW8vb3BlbmFwaS9vcGVuYXBpLXNwZWNpZmljYXRpb24pCgpbVHV0b3JpYWxdKGh0dHBzOi8vZG9jcy5vcGVudmFsaWRhdGlvbi5pby9vcGVuYXBpL29wZW5hcGktdHV0b3JpYWwpCgojIyBIb3cgZG8gSSB1c2UgdGhpcz8KCkRvd25sb2FkIHRoZSBbb3BlblZBTElEQVRJT04gT3BlbkFQSSBnZW5lcmF0b3IgQ0xJXShodHRwczovL2Rvd25sb2FkYXJjaGl2ZS5ibG9iLmNvcmUud2luZG93cy5uZXQvb3BlbnZhbGlkYXRpb24tb3BlbmFwaS1nZW5lcmF0b3Ivb3Ytb3BlbmFwaS1nZW5lcmF0b3ItY2xpLmphcikgKHJlcXVpcmVzIHRoZSBKYXZhIFNFIDggcnVudGltZSBlbnZpcm9ubWVudCkuClVzZSBgb3Ytb3BlbmFwaS1nZW5lcmF0b3ItY2xpLmphcmAgYXMgYSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciB0aGUgYG9wZW5hcGktZ2VuZXJhdG9yLWNsaS5qYXJgCgpOb3cgeW91IGNhbiB1c2Ugb3BlblZBTElEQVRJT04gcnVsZXMgaW4geW91ciBzZXJ2aWNlIGNvbnRyYWN0OgpgYGB5YW1sCnBhdGhzOgogIC86IAogICBwb3N0OgogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgYXBwbGljYXRpb24vanNvbjoKICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9hcHBsaWNhbnQnCiAgICAgICAgICAgIHgtb3YtcnVsZXM6CiAgICAgICAgICAgICAgY3VsdHVyZTogZW4KICAgICAgICAgICAgICBydWxlOiB8CiAgICAgICAgICAgICAgICB0aGUgbG9jYXRpb24gb2YgdGhlIGFwcGxpY2FudCBtdXN0IGJlIERvcnRtdW5kCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAnMjAwJzoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdWNjZXNzCmNvbXBvbmVudHM6CiAgc2NoZW1hczoKICAgIGFwcGxpY2FudDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGFnZToKICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICBsb2NhdGlvbjoKICAgICAgICAgIHR5cGU6IHN0cmluZwpgYGAKKihGb3IgZnVydGhlciBkZXRhaWxzIGNoZWNrIHRoZSBhYm92ZS1tZW50aW9uZWQgZG9jdW1lbnRhdGlvbiBvciB0aGUgb3BlblZBTElEQVRJT04gcHJvamVjdCBpdHNlbGYuKSoKCkFsdGVybmF0aXZlbHksIHRoZSBgb3BlbnZhbGlkYXRpb24tb3BlbmFwaS1nZW5lcmF0b3JgIGphciBpdHNlbGYgY2FuIGJlIGNhbGxlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBPcGVuQVBJIGdlbmVyYXRvci4KCkZvciBtYWMvbGludXg6CmBgYApqYXZhIC1jcCAvcGF0aC90by9vcGVuYXBpLWdlbmVyYXRvci1jbGkuamFyOi9wYXRoL3RvL29wZW52YWxpZGF0aW9uLW9wZW5hcGktZ2VuZXJhdG9yLmphciBvcmcub3BlbmFwaXRvb2xzLmNvZGVnZW4uT3BlbkFQSUdlbmVyYXRvciBnZW5lcmF0ZSAtZyBvdi1qYXZhLXNwcmluZy1zZXJ2ZXIgLWkgL3BhdGgvdG8vb3BlbmFwaS55YW1sIC1vIC4vdGVzdApgYGAKKERvIG5vdCBmb3JnZXQgdG8gcmVwbGFjZSB0aGUgdmFsdWVzIGAvcGF0aC90by9vcGVuYXBpLWdlbmVyYXRvci1jbGkuamFyYCwgYC9wYXRoL3RvL29wZW52YWxpZGF0aW9uLW9wZW5hcGktZ2VuZXJhdG9yLmphcmAgYW5kIGAvcGF0aC90by9vcGVuYXBpLnlhbWxgIGluIHRoZSBwcmV2aW91cyBjb21tYW5kKQoKRm9yIFdpbmRvd3MgdXNlcnMsIHlvdSB3aWxsIG5lZWQgdG8gdXNlIGA7YCBpbnN0ZWFkIG9mIGA6YCBpbiB0aGUgY2xhc3NwYXRoLCBlLmcuCmBgYApqYXZhIC1jcCAvcGF0aC90by9vcGVuYXBpLWdlbmVyYXRvci1jbGkuamFyOy9wYXRoL3RvL29wZW52YWxpZGF0aW9uLW9wZW5hcGktZ2VuZXJhdG9yLmphciBvcmcub3BlbmFwaXRvb2xzLmNvZGVnZW4uT3BlbkFQSUdlbmVyYXRvciBnZW5lcmF0ZSAtZyBvdi1qYXZhLXNwcmluZy1zZXJ2ZXIgLWkgL3BhdGgvdG8vb3BlbmFwaS55YW1sIC1vIC4vdGVzdApgYGAKCk9yIHVzZSBvcGVuVkFMSURBVElPTiBHZW5lcmF0b3IgYXMgTWF2ZW4gUGx1Z2luOgpgYGB4bWwKICAgIDxidWlsZD4KICAgICAgICA8cGx1Z2lucz4KICAgICAgICAgICAgPHBsdWdpbj4KICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5vcGVuYXBpdG9vbHM8L2dyb3VwSWQ+CiAgICAgICAgICAgICAgICA8YXJ0aWZhY3RJZD5vcGVuYXBpLWdlbmVyYXRvci1tYXZlbi1wbHVnaW48L2FydGlmYWN0SWQ+CiAgICAgICAgICAgICAgICA8dmVyc2lvbj4zLjMuNDwvdmVyc2lvbj4KICAgICAgICAgICAgICAgIDxleGVjdXRpb25zPgogICAgICAgICAgICAgICAgICAgIDxleGVjdXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnb2Fscz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnb2FsPmdlbmVyYXRlPC9nb2FsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2dvYWxzPgogICAgICAgICAgICAgICAgICAgICAgICA8Y29uZmlndXJhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFNwZWM+JHtwcm9qZWN0LmJhc2VkaXJ9L215LnNwZWMueWFtbDwvaW5wdXRTcGVjPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdlbmVyYXRvck5hbWU+b3YtamF2YS1ydWxlczwvZ2VuZXJhdG9yTmFtZT4gPCEtIHJ1bGVzIG9ubHkgZ2VuZXJhdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb25maWdPcHRpb25zPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnZva2VyUGFja2FnZT5teS5jdXN0b20ucGFja2FnZTwvaW52b2tlclBhY2thZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1vZGVsUGFja2FnZT5teS5jdXN0b20ucGFja2FnZS5tb2RlbDwvbW9kZWxQYWNrYWdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb25maWdPcHRpb25zPgogICAgICAgICAgICAgICAgICAgICAgICA8L2NvbmZpZ3VyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9leGVjdXRpb24+CiAgICAgICAgICAgICAgICA8L2V4ZWN1dGlvbnM+CiAgICAgICAgICAgICAgICA8ZGVwZW5kZW5jaWVzPgogICAgICAgICAgICAgICAgICAgIDxkZXBlbmRlbmN5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBJZD5pby5vcGVudmFsaWRhdGlvbjwvZ3JvdXBJZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+b3BlbnZhbGlkYXRpb24tb3BlbmFwaS1nZW5lcmF0b3I8L2FydGlmYWN0SWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2ZXJzaW9uPjAuMC4xPC92ZXJzaW9uPgogICAgICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jeT4KICAgICAgICAgICAgICAgIDwvZGVwZW5kZW5jaWVzPgogICAgICAgICAgICA8L3BsdWdpbj4KICAgICAgICA8L3BsdWdpbnM+CiAgICA8L2J1aWxkPgpgYGAKCgojIyBHZXR0aW5nIGludm9sdmVkCgpQbGVhc2UgcmVmZXIgdG8gb3VyIFtjb250cmlidXRpb24gZ3VpZGVsaW5lc10oQ09OVFJJQlVUSU5HLm1kKS4KCiMjIENvbnRhY3QKCllvdSBjYW4gd3JpdGUgYW4gW0UtTWFpbF0obWFpbHRvOnZhbGlkYXJpYUBvcGVudmFsaWRhdGlvbi5pbykgb3IgbWVudGlvbiBvdXIgdHdpdHRlciBhY2NvdW50IFtAb3BlblZBTElEQVRJT05dKGh0dHBzOi8vdHdpdHRlci5jb20vb3BlbnZhbGlkYXRpb24pLgo=
    description: >-
      Generate OpenAPI service stubs with complete validation layer using this
      openVALIDATION adapter.
    created: "2019-08-28T16:18:50Z"
    updated: "2020-03-05T16:36:34Z"
    language: Java
    archived: false
    stars: 5
    watchers: 5
    forks: 2
    owner: openvalidation
    logo: https://avatars.githubusercontent.com/u/50744669?v=4
    license: NOASSERTION
    repoEtag: '"8a4b443a28fe8e01c9867f5e40b7aa67fbeb18f6c58f143cade1bbe14321be3a"'
    repoLastModified: Thu, 05 Mar 2020 16:36:34 GMT
    readmeEtag: '"696d1816999ea01bd9647b9f210f313594259431faf518ea7f45e4776e9f5203"'
    readmeLastModified: Thu, 05 Mar 2020 16:36:31 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Kusk
  category:
    - miscellaneous
    - Server Implementations
  link: https://kubeshop.github.io/kusk/
  repository: https://github.com/kubeshop/kusk
  language: Kubernetes
  source_description: >-
    Kusk makes your OpenAPI definition the source of truth for API resources in
    your cluster.
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"b6f46981092a05ffdde4ff16e67285d70d0bdd2b3a8135fc07b6964b9be3aeff"'
    readmeLastModified: Tue, 26 Apr 2022 14:41:07 GMT
    description: null
    created: "2021-11-08T15:54:35Z"
    updated: "2022-04-12T09:31:58Z"
    language: Go
    archived: false
    stars: 3
    watchers: 3
    forks: 1
    owner: kubeshop
    logo: https://avatars.githubusercontent.com/u/82541796?v=4
    license: MIT
    repoEtag: '"f7a5a24a407eb35f9ea9d50f8290f944b717dd9eb80350e9724c14fde60750b5"'
    repoLastModified: Tue, 12 Apr 2022 09:31:58 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: php-openapi
  category:
    - Parsers
    - Description Validators
  repository: https://github.com/cebe/php-openapi
  language: PHP
  source_description: A PHP library for manipulating and validating OpenAPI 3.0 Descriptions
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"a1883438bba9e584785a937518fac392b786dedcc21f038fb079803c53488fe6"'
    readmeLastModified: Wed, 20 Apr 2022 14:46:44 GMT
    description: >-
      Read and write OpenAPI yaml/json files and make the content accessible in
      PHP objects.
    created: "2018-10-23T10:46:11Z"
    updated: "2022-04-21T06:04:32Z"
    language: PHP
    archived: false
    stars: 367
    watchers: 367
    forks: 64
    owner: cebe
    logo: https://avatars.githubusercontent.com/u/189796?v=4
    license: MIT
    repoEtag: '"5f8fdec8b6ce44d231a9bd66abfdda37642de62e52ee9b10b4dea94b0e628850"'
    repoLastModified: Thu, 21 Apr 2022 06:04:32 GMT
  foundInMaster: true
  v3_1_link: https://github.com/cebe/php-openapi/pull/128
- source: https://openapi.tools/
  name: APIMatic CodeGen
  category: sdk
  language: SaaS
  link: https://apimatic.io/code-generation-as-a-service
  source_description: >-
    Bring in your API description (OAI v2/v3, RAML, API Blueprint, WSDL, etc.)
    to generate fully functional SDKs in over 10 languages.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: go-swagger
  category:
    - Parser
    - Sdk
    - Converters
  link: https://goswagger.io/
  repository: https://github.com/go-swagger/go-swagger
  language: Go
  source_description: >-
    Unmaintained v2.0 only project seeking new maintainer, or probably a fork.
    Parser, validator, generates descriptions from code, or code from
    descriptions!
  v2: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"ab88ce86a22ba46eadd8991a4b6d9260ef07173e55563600c2d94127f93ffb55"'
    readmeLastModified: Wed, 20 Apr 2022 19:44:32 GMT
    description: Swagger 2.0 implementation for go
    created: "2014-11-16T20:13:15Z"
    updated: "2022-04-28T07:53:53Z"
    language: Go
    archived: false
    stars: 7511
    watchers: 7511
    forks: 1114
    owner: go-swagger
    logo: https://avatars.githubusercontent.com/u/10362650?v=4
    license: Apache-2.0
    repoEtag: '"874d68cb0a37a9dc0911f8ad5e52dedbf17555731752d7f5e7c9b65ed05e3dbf"'
    repoLastModified: Thu, 28 Apr 2022 07:53:53 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: api-codegen-ts
  category:
    - Sdk
    - Data Validators
    - Parsers
  link: https://www.npmjs.com/package/@nll/api-codegen-ts
  repository: https://github.com/nullpub/api-codegen-ts
  language: TypeScript
  source_description: >-
    Generates TypeScript models, response validators, and operation controllers
    from OpenAPI descriptions
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBhcGktY29kZWdlbi10cwoKQSBnZW5lcmFsIHR5cGVzY3JpcHQgY29kZSBnZW5lcmF0aW9uIGxpYnJhcnkuIEN1cnJlbnRseSBpdCBjYW4gdGFrZSBzd2FnZ2VyIDIuMCBhbmQgb3BlbmFwaSAzLjAuMCsganNvbiBzcGVjcyBhbmQgdHVybiB0aGVtIGludG8gdHlwZXNjcmlwdCBjb250cm9sbGVycyB0aGF0IHZhbGlkYXRlIGFwaSByZXNwb25zZXMuCgojIyBJbnN0YWxsYXRpb24KCmBucG0gaSAtRCBAbmxsL2FwaS1jb2RlZ2VuLXRzYAoKIyMgQ29uZmlndXJhdGlvbgoKQWRkIGFuIGFwaUNvZGVnZW4gc2VjdGlvbiB0byBgcGFja2FnZS5qc29uYC4KCmBgYGpzb24KewogICJhcGlDb2RlZ2VuIjogewogICAgInNyYyI6ICIuL3BhdGgvdG8veW91ci9zd2FnZ2VyLXNwZWMuanNvbiIsCiAgICAiZHN0IjogIi4vcGF0aC90by95b3VyL2NvZGVnZW4vZGVzdGluYXRpb24iCiAgfQp9CmBgYAoKIyMgVXNhZ2UKCkFmdGVyIGNvbmZpZ3VyaW5nIGFwaS1jb2RlZ2VuLXRzIHlvdSBjYW4gZ2VuZXJhdGUgY29kZSBsaWtlIHNvOgoKYG5weCBAbmxsL2FwaS1jb2RlZ2VuLXRzYAoKQW5kIGl0IHdpbGwgb3V0cHV0IGl0cyBwcm9ncmVzcyBhbmQgb3V0cHV0IGNvZGUuCgojIyBBZHZhbmNlZCB1c2FnZQoKVGhpcyBjb2RlZ2VuIGxpYnJhcnkgYWJzdHJhY3RzIHBhcnNlcnMgYW5kIHByaW50ZXJzLiBBIHBhcnNlciBpcyByZXNwb25zaWJsZSBmb3IgcmVjZWl2aW5nIGFuIGlucHV0IHN0cmluZyAoYSBzcGVjaWZpY2F0aW9uKSBhbmQgZ2VuZXJhdGluZyBhbnkgaW50ZXJtZWRpYXRlIHJlcHJlc2VudGF0aW9uLiBDdXJyZW50bHksIHRoZXJlIGFyZSBwcmltaXRpdmUgc3dhZ2dlciAyLjAgYW5kIG9wZW5hcGkgMy4wLjAgcGFyc2Vycy4gQSBwcmludGVyIHRha2VzIGFuIGludGVybWVkaWF0ZSByZXByZXNlbnRhdGlvbiAoaXQgbXVzdCBtYXRjaCB3aGF0ZXZlciB0aGUgcGFyc2VyIG91dHB1dHMpIGFuZCByZXR1cm5zIHRoZSBmaWxlIHN0cmluZ3MgdG8gd3JpdGUgdG8gZGlzay4gVGhlIGNvcmUgZnVuY3Rpb25hbGl0eSBvZiBhcGktY29kZWdlbi10cyBpcyBtYW5hZ2luZyB0aGlzIHdvcmtmbG93LCBpdCBoYW5kbGVzIHRoZSByZWFkaW5nIG9mIHRoZSBzb3VyY2UgZmlsZXMgYW5kIHRoZSBwcmludGluZyBvZiB0aGUgZ2VuZXJhdGVkIGZpbGVzLgoKIyMgU3VwcG9ydAoKVGhpcyBpcyBteSBmaXJzdCBhdHRlbXB0IGF0IGEgY29kZWdlbiBsaWJyYXJ5LiBJZiB5b3UgZmluZCBidWdzIG9yIHNvbWUgc2V0IG9mIGZlYXR1cmVzIHRoYXQgYXJlbid0IHN1cHBvcnRlZCBwbGVhc2UgY3JlYXRlIGEgZ2l0aHViIGlzc3VlLiBUaGFua3MhCg==
    description: >-
      A generalized codegen library by default setup to go from swagger 2.0 to
      typescript.
    created: "2019-06-04T21:23:53Z"
    updated: "2021-02-09T16:21:09Z"
    language: TypeScript
    archived: false
    stars: 2
    watchers: 2
    forks: 1
    owner: nullpub
    logo: https://avatars.githubusercontent.com/u/22160158?v=4
    repoEtag: '"2c6b55aba98d90068c58e29d11777d4901d865c23d631c26ec8cb1a9bf3ddbf9"'
    repoLastModified: Tue, 09 Feb 2021 16:21:09 GMT
    readmeEtag: '"1f7d9701ac7662c13cf24f35584f8e5dd0793d0ad8409999e2a5ea3ea30e65bf"'
    readmeLastModified: Wed, 28 Aug 2019 04:48:19 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: openapi-diff
  category:
    - miscellaneous
    - Parsers
  language: Java
  repository: https://github.com/quen2404/openapi-diff
  source_description: Utility for comparing two OpenAPI specifications.
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJLWRpZmYgCgpDb21wYXJlIHR3byBPcGVuQVBJIHNwZWNpZmljYXRpb25zICgzLngpIGFuZCByZW5kZXIgdGhlIGRpZmZlcmVuY2UgdG8gSFRNTCBwbGFpbnRleHQsIG9yIE1hcmtkb3duIGZpbGVzLgoKWyFbQnVpbGRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQVBJVG9vbHMvb3BlbmFwaS1kaWZmL3dvcmtmbG93cy9NYWluJTIwQnVpbGQvYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL09wZW5BUElUb29scy9vcGVuYXBpLWRpZmYvYWN0aW9ucz9xdWVyeT1icmFuY2glM0FtYXN0ZXIrd29ya2Zsb3clM0EiTWFpbitCdWlsZCIpClshW1F1YWxpdHkgR2F0ZSBTdGF0dXNdKGh0dHBzOi8vc29uYXJjbG91ZC5pby9hcGkvcHJvamVjdF9iYWRnZXMvbWVhc3VyZT9wcm9qZWN0PU9wZW5BUElUb29sc19vcGVuYXBpLWRpZmYmbWV0cmljPWFsZXJ0X3N0YXR1cyldKGh0dHBzOi8vc29uYXJjbG91ZC5pby9kYXNoYm9hcmQ/aWQ9T3BlbkFQSVRvb2xzX29wZW5hcGktZGlmZikKWyFbTWF2ZW4gQ2VudHJhbF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9tYXZlbi1jZW50cmFsL3Yvb3JnLm9wZW5hcGl0b29scy5vcGVuYXBpZGlmZi9vcGVuYXBpLWRpZmYtY29yZSldKGh0dHBzOi8vc2VhcmNoLm1hdmVuLm9yZy9hcnRpZmFjdC9vcmcub3BlbmFwaXRvb2xzLm9wZW5hcGlkaWZmL29wZW5hcGktZGlmZi1jb3JlKQpbIVtKb2luIHRoZSBTbGFjayBjaGF0IHJvb21dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvU2xhY2stSm9pbiUyMHRoZSUyMGNoYXQlMjByb29tLW9yYW5nZSldKGh0dHBzOi8vam9pbi5zbGFjay5jb20vdC9vcGVuYXBpLWdlbmVyYXRvci9zaGFyZWRfaW52aXRlL2VuUXROekF5TkRNeU9UVTBPVEUxTFRZNVpEQmlOREk1TnpJNVpqUTFZMkU1T1dWak1qWmtZelkxWkdNMk1XUTRZV0ZqTXpjeU5EWTVNR0k0TmpReE5EQmlNVGxtWlRjNU5qWTJaVFE1TUdNKQoKWyFbRG9ja2VyIENsb3VkIEF1dG9tYXRlZCBidWlsZF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9kb2NrZXIvY2xvdWQvYXV0b21hdGVkL29wZW5hcGl0b29scy9vcGVuYXBpLWRpZmYpXShodHRwczovL2h1Yi5kb2NrZXIuY29tL3Ivb3BlbmFwaXRvb2xzL29wZW5hcGktZGlmZikKWyFbRG9ja2VyIENsb3VkIEJ1aWxkIFN0YXR1c10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9kb2NrZXIvY2xvdWQvYnVpbGQvb3BlbmFwaXRvb2xzL29wZW5hcGktZGlmZildKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9vcGVuYXBpdG9vbHMvb3BlbmFwaS1kaWZmKQpbIVtEb2NrZXIgSW1hZ2UgVmVyc2lvbl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9kb2NrZXIvdi9vcGVuYXBpdG9vbHMvb3BlbmFwaS1kaWZmP3NvcnQ9c2VtdmVyKV0oaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL29wZW5hcGl0b29scy9vcGVuYXBpLWRpZmYvdGFncykKCiMgUmVxdWlyZW1lbnRzCgoqIEphdmEgOAoKIyBGZWF0dXJlCgoqIFN1cHBvcnRzIE9wZW5BUEkgc3BlYyB2My4wLgoqIERlcHRoIGNvbXBhcmlzb24gb2YgcGFyYW1ldGVycywgcmVzcG9uc2VzLCBlbmRwb2ludCwgaHR0cCBtZXRob2QgKEdFVCxQT1NULFBVVCxERUxFVEUuLi4pCiogU3VwcG9ydHMgc3dhZ2dlciBhcGkgQXV0aG9yaXphdGlvbgoqIFJlbmRlciBkaWZmZXJlbmNlIG9mIHByb3BlcnR5IHdpdGggRXhwcmVzc2lvbiBMYW5ndWFnZQoqIEhUTUwsIE1hcmtkb3duICYgSlNPTiByZW5kZXIKCiMgTWF2ZW4KCkF2YWlsYWJsZSBvbiBbTWF2ZW4gQ2VudHJhbF0oaHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL2FydGlmYWN0L29yZy5vcGVuYXBpdG9vbHMub3BlbmFwaWRpZmYvb3BlbmFwaS1kaWZmLWNvcmUpCgpgYGB4bWwKPGRlcGVuZGVuY3k+CiAgPGdyb3VwSWQ+b3JnLm9wZW5hcGl0b29scy5vcGVuYXBpZGlmZjwvZ3JvdXBJZD4KICA8YXJ0aWZhY3RJZD5vcGVuYXBpLWRpZmYtY29yZTwvYXJ0aWZhY3RJZD4KICA8dmVyc2lvbj4ke29wZW5hcGktZGlmZi12ZXJzaW9ufTwvdmVyc2lvbj4KPC9kZXBlbmRlbmN5PgpgYGAKCiMgRG9ja2VyCgpBdmFpbGFibGUgb24gW0RvY2tlciBIdWJdKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9vcGVuYXBpdG9vbHMvb3BlbmFwaS1kaWZmLykgYXMgYG9wZW5hcGl0b29scy9vcGVuYXBpLWRpZmZgLgoKYGBgYmFzaAojIGRvY2tlciBydW4gb3BlbmFwaXRvb2xzL29wZW5hcGktZGlmZjpsYXRlc3QKdXNhZ2U6IG9wZW5hcGktZGlmZiA8b2xkPiA8bmV3PgogICAgLS1kZWJ1ZyAgICAgICAgICAgICAgICAgICAgIFByaW50IGRlYnVnZ2luZyBpbmZvcm1hdGlvbgogICAgLS1lcnJvciAgICAgICAgICAgICAgICAgICAgIFByaW50IGVycm9yIGluZm9ybWF0aW9uCiAgICAtLWZhaWwtb24tY2hhbmdlZCAgICAgICAgICAgRmFpbCBpZiBBUEkgY2hhbmdlZCBidXQgaXMgYmFja3dhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXRpYmxlCiAgICAtLWZhaWwtb24taW5jb21wYXRpYmxlICAgICAgRmFpbCBvbmx5IGlmIEFQSSBjaGFuZ2VzIGJyb2tlIGJhY2t3YXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGF0aWJpbGl0eQogLWgsLS1oZWxwICAgICAgICAgICAgICAgICAgICAgIHByaW50IHRoaXMgbWVzc2FnZQogICAgLS1oZWFkZXIgPHByb3BlcnR5PXZhbHVlPiAgIHVzZSBnaXZlbiBoZWFkZXIgZm9yIGF1dGhvcmlzYXRpb24KICAgIC0taHRtbCA8ZmlsZT4gICAgICAgICAgICAgICBleHBvcnQgZGlmZiBhcyBodG1sIGluIGdpdmVuIGZpbGUKICAgIC0taW5mbyAgICAgICAgICAgICAgICAgICAgICBQcmludCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uCiAgICAtLWpzb24gPGZpbGU+ICAgICAgICAgICAgICAgZXhwb3J0IGRpZmYgYXMganNvbiBpbiBnaXZlbiBmaWxlCiAtbCwtLWxvZyA8bGV2ZWw+ICAgICAgICAgICAgICAgdXNlIGdpdmVuIGxldmVsIGZvciBsb2cgKFRSQUNFLCBERUJVRywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTkZPLCBXQVJOLCBFUlJPUiwgT0ZGKS4gRGVmYXVsdDogRVJST1IKICAgIC0tbWFya2Rvd24gPGZpbGU+ICAgICAgICAgICBleHBvcnQgZGlmZiBhcyBtYXJrZG93biBpbiBnaXZlbiBmaWxlCiAgICAtLW9mZiAgICAgICAgICAgICAgICAgICAgICAgTm8gaW5mb3JtYXRpb24gcHJpbnRlZAogICAgLS1xdWVyeSA8cHJvcGVydHk9dmFsdWU+ICAgIHVzZSBxdWVyeSBwYXJhbSBmb3IgYXV0aG9yaXNhdGlvbgogICAgLS1zdGF0ZSAgICAgICAgICAgICAgICAgICAgIE9ubHkgb3V0cHV0IGRpZmYgc3RhdGU6IG5vX2NoYW5nZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jb21wYXRpYmxlLCBjb21wYXRpYmxlCiAgICAtLXRleHQgPGZpbGU+ICAgICAgICAgICAgICAgZXhwb3J0IGRpZmYgYXMgdGV4dCBpbiBnaXZlbiBmaWxlCiAgICAtLXRyYWNlICAgICAgICAgICAgICAgICAgICAgYmUgZXh0cmEgdmVyYm9zZQogICAgLS12ZXJzaW9uICAgICAgICAgICAgICAgICAgIHByaW50IHRoZSB2ZXJzaW9uIGluZm9ybWF0aW9uIGFuZCBleGl0CiAgICAtLXdhcm4gICAgICAgICAgICAgICAgICAgICAgUHJpbnQgd2FybmluZyBpbmZvcm1hdGlvbgpgYGAKCgojIyBCdWlsZCB0aGUgaW1hZ2UKClRoaXMgaXMgb25seSByZXF1aXJlZCBpZiB5b3Ugd2FudCB0byB0cnkgbmV3IGNoYW5nZXMgaW4gdGhlIERvY2tlcmZpbGUgb2YgdGhpcyBwcm9qZWN0LgoKYGBgYmFzaApkb2NrZXIgYnVpbGQgLXQgbG9jYWwtb3BlbmFwaS1kaWZmIC4KYGBgCgpZb3UgY2FuIHJlcGxhY2UgdGhlIGxvY2FsIGltYWdlIG5hbWUgYGxvY2FsLW9wZW5hcGktZGlmZmAgYnkgYW55IG5hbWUgb2YgeW91ciBjaG9pY2UuCgojIyBSdW4gYW4gaW5zdGFuY2UKCkluIHRoaXMgZXhhbXBsZSB0aGUgYCQocHdkKS9jb3JlL3NyYy90ZXN0L3Jlc291cmNlc2AgZGlyZWN0b3J5IGlzIG1vdW50ZWQgaW4gdGhlIGAvc3BlY3NgIGRpcmVjdG9yeSBvZiB0aGUgY29udGFpbmVyCmluIHJlYWRvbmx5IG1vZGUgKGByb2ApLgoKYGBgYmFzaApkb2NrZXIgcnVuIC0tcm0gLXQgXAogIC12ICQocHdkKS9jb3JlL3NyYy90ZXN0L3Jlc291cmNlczovc3BlY3M6cm8gXAogIG9wZW5hcGl0b29scy9vcGVuYXBpLWRpZmY6bGF0ZXN0IC9zcGVjcy9wYXRoXzEueWFtbCAvc3BlY3MvcGF0aF8yLnlhbWwKYGBgCgpUaGUgcmVtb3RlIG5hbWUgYG9wZW5hcGl0b29scy9vcGVuYXBpLWRpZmZgIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBsb2NhbC1vcGVuYXBpLWRpZmZgIG9yIHRoZSBuYW1lIHlvdSBnYXZlIHRvIHlvdXIgbG9jYWwgaW1hZ2UuCgojIFVzYWdlCgpvcGVuYXBpLWRpZmYgY2FuIHJlYWQgT3BlbkFQSSBzcGVjcyBmcm9tIEpTT04gZmlsZXMgb3IgSFRUUCBVUkxzLgoKIyMgQ29tbWFuZCBMaW5lCgpgYGBiYXNoCiQgb3BlbmFwaS1kaWZmIC0taGVscAp1c2FnZTogb3BlbmFwaS1kaWZmIDxvbGQ+IDxuZXc+CiAgICAtLWRlYnVnICAgICAgICAgICAgICAgICAgICAgUHJpbnQgZGVidWdnaW5nIGluZm9ybWF0aW9uCiAgICAtLWVycm9yICAgICAgICAgICAgICAgICAgICAgUHJpbnQgZXJyb3IgaW5mb3JtYXRpb24KIC1oLC0taGVscCAgICAgICAgICAgICAgICAgICAgICBwcmludCB0aGlzIG1lc3NhZ2UKICAgIC0taGVhZGVyIDxwcm9wZXJ0eT12YWx1ZT4gICB1c2UgZ2l2ZW4gaGVhZGVyIGZvciBhdXRob3Jpc2F0aW9uCiAgICAtLWh0bWwgPGZpbGU+ICAgICAgICAgICAgICAgZXhwb3J0IGRpZmYgYXMgaHRtbCBpbiBnaXZlbiBmaWxlCiAgICAtLWluZm8gICAgICAgICAgICAgICAgICAgICAgUHJpbnQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgLS1qc29uIDxmaWxlPiAgICAgICAgICAgICAgIGV4cG9ydCBkaWZmIGFzIGpzb24gaW4gZ2l2ZW4gZmlsZQogLWwsLS1sb2cgPGxldmVsPiAgICAgICAgICAgICAgIHVzZSBnaXZlbiBsZXZlbCBmb3IgbG9nIChUUkFDRSwgREVCVUcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5GTywgV0FSTiwgRVJST1IsIE9GRikuIERlZmF1bHQ6IEVSUk9SCiAgICAtLW1hcmtkb3duIDxmaWxlPiAgICAgICAgICAgZXhwb3J0IGRpZmYgYXMgbWFya2Rvd24gaW4gZ2l2ZW4gZmlsZQogICAgLS1vZmYgICAgICAgICAgICAgICAgICAgICAgIE5vIGluZm9ybWF0aW9uIHByaW50ZWQKICAgIC0tcXVlcnkgPHByb3BlcnR5PXZhbHVlPiAgICB1c2UgcXVlcnkgcGFyYW0gZm9yIGF1dGhvcmlzYXRpb24KICAgIC0tc3RhdGUgICAgICAgICAgICAgICAgICAgICBPbmx5IG91dHB1dCBkaWZmIHN0YXRlOiBub19jaGFuZ2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY29tcGF0aWJsZSwgY29tcGF0aWJsZQogICAgLS1mYWlsLW9uLWluY29tcGF0aWJsZSAgICAgIEZhaWwgb25seSBpZiBBUEkgY2hhbmdlcyBicm9rZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CiAgICAtLWZhaWwtb24tY2hhbmdlZCAgICAgICAgICAgRmFpbCBpZiBBUEkgY2hhbmdlZCBidXQgaXMgYmFja3dhcmQgY29tcGF0aWJsZQogICAgLS10cmFjZSAgICAgICAgICAgICAgICAgICAgIGJlIGV4dHJhIHZlcmJvc2UKICAgIC0tdmVyc2lvbiAgICAgICAgICAgICAgICAgICBwcmludCB0aGUgdmVyc2lvbiBpbmZvcm1hdGlvbiBhbmQgZXhpdAogICAgLS13YXJuICAgICAgICAgICAgICAgICAgICAgIFByaW50IHdhcm5pbmcgaW5mb3JtYXRpb24KYGBgCgojIyBNYXZlbiBQbHVnaW4KCkFkZCBvcGVuYXBpLWRpZmYgdG8geW91ciBQT00gdG8gc2hvdyBkaWZmcyB3aGVuIHlvdSB0ZXN0IHlvdXIgTWF2ZW4gcHJvamVjdC4gWW91IG1heSBvcHQgdG8gdGhyb3cgYW4gZXJyb3IgaWYgeW91IGhhdmUgYnJva2VuIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IG9yIGlmIHlvdXIgQVBJIGhhcyBjaGFuZ2VkLiAgCgpgYGB4bWwKPHBsdWdpbj4KICA8Z3JvdXBJZD5vcmcub3BlbmFwaXRvb2xzLm9wZW5hcGlkaWZmPC9ncm91cElkPgogIDxhcnRpZmFjdElkPm9wZW5hcGktZGlmZi1tYXZlbjwvYXJ0aWZhY3RJZD4KICA8dmVyc2lvbj4ke29wZW5hcGktZGlmZi12ZXJzaW9ufTwvdmVyc2lvbj4KICA8ZXhlY3V0aW9ucz4KICAgIDxleGVjdXRpb24+CiAgICAgIDxnb2Fscz4KICAgICAgICA8Z29hbD5kaWZmPC9nb2FsPgogICAgICA8L2dvYWxzPgogICAgICA8Y29uZmlndXJhdGlvbj4KICAgICAgICA8IS0tIFJlZmVyZW5jZSBzcGVjaWZpY2F0aW9uIChwZXJoYXBzIHlvdXIgcHJvZCBzY2hlbWEpIC0tPgogICAgICAgIDxvbGRTcGVjPmh0dHBzOi8vcGV0c3RvcmUzLnN3YWdnZXIuaW8vYXBpL3YzL29wZW5hcGkuanNvbjwvb2xkU3BlYz4KICAgICAgICA8IS0tIFNwZWNpZmljYXRpb24gZ2VuZXJhdGVkIGJ5IHlvdXIgcHJvamVjdCBpbiB0aGUgY29tcGlsZSBwaGFzZSAtLT4KICAgICAgICA8bmV3U3BlYz4ke3Byb2plY3QuYmFzZWRpcn0vdGFyZ2V0L29wZW5hcGkueWFtbDwvbmV3U3BlYz4KICAgICAgICA8IS0tIEZhaWwgb25seSBpZiBBUEkgY2hhbmdlcyBicm9rZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IChkZWZhdWx0OiBmYWxzZSkgLS0+CiAgICAgICAgPGZhaWxPbkluY29tcGF0aWJsZT50cnVlPC9mYWlsT25JbmNvbXBhdGlibGU+CiAgICAgICAgPCEtLSBGYWlsIGlmIEFQSSBjaGFuZ2VkIChkZWZhdWx0OiBmYWxzZSkgLS0+CiAgICAgICAgPGZhaWxPbkNoYW5nZWQ+dHJ1ZTwvZmFpbE9uQ2hhbmdlZD4KICAgICAgPC9jb25maWd1cmF0aW9uPgogICAgPC9leGVjdXRpb24+CiAgPC9leGVjdXRpb25zPgo8L3BsdWdpbj4KYGBgCgojIyBEaXJlY3QgSW52b2NhdGlvbgoKYGBgamF2YQpwdWJsaWMgY2xhc3MgTWFpbiB7CiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUEVOQVBJX0RPQzEgPSAicGV0c3RvcmVfdjNfMS5qc29uIjsKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QRU5BUElfRE9DMiA9ICJwZXRzdG9yZV92Ml8yLnlhbWwiOwogICAgICAgIAogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgewogICAgICAgIENoYW5nZWRPcGVuQXBpIGRpZmYgPSBPcGVuQXBpQ29tcGFyZS5mcm9tTG9jYXRpb25zKE9QRU5BUElfRE9DMSwgT1BFTkFQSV9ET0MyKTsKCiAgICAgICAgLy8uLi4KICAgIH0KfQpgYGAKCiMjIyBSZW5kZXIgZGlmZmVyZW5jZQotLS0KIyMjIyBIVE1MCgpgYGBqYXZhClN0cmluZyBodG1sID0gbmV3IEh0bWxSZW5kZXIoIkNoYW5nZWxvZyIsCiAgICAgICAgImh0dHA6Ly9kZWVwb292ZS5jb20vc3dhZ2dlci1kaWZmL3N0eWxlc2hlZXRzL2RlbW8uY3NzIikKICAgICAgICAgICAgICAgIC5yZW5kZXIoZGlmZik7Cgp0cnkgewogICAgRmlsZVdyaXRlciBmdyA9IG5ldyBGaWxlV3JpdGVyKAogICAgICAgICAgICAidGVzdE5ld0FwaS5odG1sIik7CiAgICBmdy53cml0ZShodG1sKTsKICAgIGZ3LmNsb3NlKCk7Cgp9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CiAgICBlLnByaW50U3RhY2tUcmFjZSgpOwp9CmBgYAoKIyMjIyBNYXJrZG93bgoKYGBgamF2YQpTdHJpbmcgcmVuZGVyID0gbmV3IE1hcmtkb3duUmVuZGVyKCkucmVuZGVyKGRpZmYpOwp0cnkgewogICAgRmlsZVdyaXRlciBmdyA9IG5ldyBGaWxlV3JpdGVyKAogICAgICAgICAgICAidGVzdERpZmYubWQiKTsKICAgIGZ3LndyaXRlKHJlbmRlcik7CiAgICBmdy5jbG9zZSgpOwogICAgCn0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKICAgIGUucHJpbnRTdGFja1RyYWNlKCk7Cn0KYGBgCgoKIyMjIyBKU09OCgpgYGBqYXZhClN0cmluZyByZW5kZXIgPSBuZXcgSnNvblJlbmRlcigpLnJlbmRlcihkaWZmKTsKdHJ5IHsKICAgIEZpbGVXcml0ZXIgZncgPSBuZXcgRmlsZVdyaXRlcigKICAgICAgICAgICAgInRlc3REaWZmLmpzb24iKTsKICAgIGZ3LndyaXRlKHJlbmRlcik7CiAgICBmdy5jbG9zZSgpOwogICAgCn0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKICAgIGUucHJpbnRTdGFja1RyYWNlKCk7Cn0KYGBgCgojIyMgRXh0ZW5zaW9ucwoKVGhpcyBwcm9qZWN0IHVzZXMgSmF2YSBTZXJ2aWNlIFByb3ZpZGVyIEludGVmYWNlIChTUEkpIHNvIGFkZGl0aW9uYWwgZXh0ZW5zaW9ucyBjYW4gYmUgYWRkZWQuIAoKVG8gYnVpbGQgeW91ciBvd24gZXh0ZW5zaW9uLCB5b3Ugc2ltcGx5IG5lZWQgdG8gY3JlYXRlIGEgYHNyYy9tYWluL3Jlc291cmNlcy9NRVRBLUlORi9zZXJ2aWNlcy9vcmcub3BlbmFwaXRvb2xzLm9wZW5hcGlkaWZmLmNvcmUuY29tcGFyZS5FeHRlbnNpb25EaWZmYCBmaWxlIHdpdGggdGhlIGZ1bGwgY2xhc3NuYW1lIG9mIHlvdXIgaW1wbGVtZW50YXRpb24uCllvdXIgY2xhc3MgbXVzdCBhbHNvIGltcGxlbWVudCB0aGUgYG9yZy5vcGVuYXBpdG9vbHMub3BlbmFwaWRpZmYuY29yZS5jb21wYXJlLkV4dGVuc2lvbkRpZmZgIGludGVyZmFjZS4KVGhlbiwgaW5jbHVkaW5nIHlvdXIgbGlicmFyeSB3aXRoIHRoZSBgb3BlbmFwaS1kaWZmYCBtb2R1bGUgd2lsbCBjYXVzZSBpdCB0byBiZSB0cmlnZ2VyZWQgYXV0b21hdGljYWxseS4KCiMgRXhhbXBsZXMKCiMjIyBDTEkgT3V0cHV0CgpgYGB0ZXh0Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cj09ICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSSBDSEFOR0UgTE9HICAgICAgICAgICAgICAgICAgICAgICAgICAgID09Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhZ2dlciBQZXRzdG9yZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hhdCdzIE5ldyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0gR0VUICAgIC9wZXQve3BldElkfQoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hhdCdzIERlbGV0ZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLSBQT1NUICAgL3BldC97cGV0SWR9CgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSAgICAgICAgICAgICAgICAgICAgICAgICAgV2hhdCdzIERlcHJlY2F0ZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotIEdFVCAgICAvdXNlci9sb2dvdXQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoYXQncyBDaGFuZ2VkICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0gUFVUICAgIC9wZXQKICBSZXF1ZXN0OgogICAgICAgIC0gRGVsZXRlZCBhcHBsaWNhdGlvbi94bWwKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24vanNvbgogICAgICAgICAgU2NoZW1hOiBCYWNrd2FyZCBjb21wYXRpYmxlCi0gUE9TVCAgIC9wZXQKICBQYXJhbWV0ZXI6CiAgICAtIEFkZCB0YWdzIGluIHF1ZXJ5CiAgUmVxdWVzdDoKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24veG1sCiAgICAgICAgICBTY2hlbWE6IEJhY2t3YXJkIGNvbXBhdGlibGUKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24vanNvbgogICAgICAgICAgU2NoZW1hOiBCYWNrd2FyZCBjb21wYXRpYmxlCi0gR0VUICAgIC9wZXQvZmluZEJ5U3RhdHVzCiAgUGFyYW1ldGVyOgogICAgLSBEZXByZWNhdGVkIHN0YXR1cyBpbiBxdWVyeQogIFJldHVybiBUeXBlOgogICAgLSBDaGFuZ2VkIDIwMCBPSwogICAgICBNZWRpYSB0eXBlczoKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24veG1sCiAgICAgICAgICBTY2hlbWE6IEJyb2tlbiBjb21wYXRpYmlsaXR5CiAgICAgICAgLSBDaGFuZ2VkIGFwcGxpY2F0aW9uL2pzb24KICAgICAgICAgIFNjaGVtYTogQnJva2VuIGNvbXBhdGliaWxpdHkKLSBHRVQgICAgL3BldC9maW5kQnlUYWdzCiAgUmV0dXJuIFR5cGU6CiAgICAtIENoYW5nZWQgMjAwIE9LCiAgICAgIE1lZGlhIHR5cGVzOgogICAgICAgIC0gQ2hhbmdlZCBhcHBsaWNhdGlvbi94bWwKICAgICAgICAgIFNjaGVtYTogQnJva2VuIGNvbXBhdGliaWxpdHkKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24vanNvbgogICAgICAgICAgU2NoZW1hOiBCcm9rZW4gY29tcGF0aWJpbGl0eQotIERFTEVURSAvcGV0L3twZXRJZH0KICBQYXJhbWV0ZXI6CiAgICAtIEFkZCBuZXdIZWFkZXJQYXJhbSBpbiBoZWFkZXIKLSBQT1NUICAgL3BldC97cGV0SWR9L3VwbG9hZEltYWdlCiAgUGFyYW1ldGVyOgogICAgLSBDaGFuZ2VkIHBldElkIGluIHBhdGgKLSBQT1NUICAgL3VzZXIKICBSZXF1ZXN0OgogICAgICAgIC0gQ2hhbmdlZCBhcHBsaWNhdGlvbi9qc29uCiAgICAgICAgICBTY2hlbWE6IEJhY2t3YXJkIGNvbXBhdGlibGUKLSBQT1NUICAgL3VzZXIvY3JlYXRlV2l0aEFycmF5CiAgUmVxdWVzdDoKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24vanNvbgogICAgICAgICAgU2NoZW1hOiBCYWNrd2FyZCBjb21wYXRpYmxlCi0gUE9TVCAgIC91c2VyL2NyZWF0ZVdpdGhMaXN0CiAgUmVxdWVzdDoKICAgICAgICAtIENoYW5nZWQgYXBwbGljYXRpb24vanNvbgogICAgICAgICAgU2NoZW1hOiBCYWNrd2FyZCBjb21wYXRpYmxlCi0gR0VUICAgIC91c2VyL2xvZ2luCiAgUGFyYW1ldGVyOgogICAgLSBEZWxldGUgcGFzc3dvcmQgaW4gcXVlcnkKLSBHRVQgICAgL3VzZXIvbG9nb3V0Ci0gR0VUICAgIC91c2VyL3t1c2VybmFtZX0KICBSZXR1cm4gVHlwZToKICAgIC0gQ2hhbmdlZCAyMDAgT0sKICAgICAgTWVkaWEgdHlwZXM6CiAgICAgICAgLSBDaGFuZ2VkIGFwcGxpY2F0aW9uL3htbAogICAgICAgICAgU2NoZW1hOiBCcm9rZW4gY29tcGF0aWJpbGl0eQogICAgICAgIC0gQ2hhbmdlZCBhcHBsaWNhdGlvbi9qc29uCiAgICAgICAgICBTY2hlbWE6IEJyb2tlbiBjb21wYXRpYmlsaXR5Ci0gUFVUICAgIC91c2VyL3t1c2VybmFtZX0KICBSZXF1ZXN0OgogICAgICAgIC0gQ2hhbmdlZCBhcHBsaWNhdGlvbi9qc29uCiAgICAgICAgICBTY2hlbWE6IEJhY2t3YXJkIGNvbXBhdGlibGUKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc3VsdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgICAgICBBUEkgY2hhbmdlcyBicm9rZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ICAgICAgICAgICAgICAgICAKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KYGBgCgojIyMgTWFya2Rvd24KCmBgYG1hcmtkb3duCiMjIyBXaGF0J3MgTmV3Ci0tLQoqIGBHRVRgIC9wZXQve3BldElkfSBGaW5kIHBldCBieSBJRAoKIyMjIFdoYXQncyBEZWxldGVkCi0tLQoqIGBQT1NUYCAvcGV0L3twZXRJZH0gVXBkYXRlcyBhIHBldCBpbiB0aGUgc3RvcmUgd2l0aCBmb3JtIGRhdGEKCiMjIyBXaGF0J3MgRGVwcmVjYXRlZAotLS0KKiBgR0VUYCAvdXNlci9sb2dvdXQgTG9ncyBvdXQgY3VycmVudCBsb2dnZWQgaW4gdXNlciBzZXNzaW9uCgojIyMgV2hhdCdzIENoYW5nZWQKLS0tCiogYFBVVGAgL3BldCBVcGRhdGUgYW4gZXhpc3RpbmcgcGV0ICAKICAgIFJlcXVlc3QKCiAgICAgICAgRGVsZXRlZCByZXF1ZXN0IGJvZHkgOiBbYXBwbGljYXRpb24veG1sXQogICAgICAgIENoYW5nZWQgcmVzcG9uc2UgOiBbYXBwbGljYXRpb24vanNvbl0KKiBgUE9TVGAgL3BldCBBZGQgYSBuZXcgcGV0IHRvIHRoZSBzdG9yZSAgCiAgICBQYXJhbWV0ZXIKCiAgICAgICAgQWRkIHRhZ3MgLy9hZGQgbmV3IHF1ZXJ5IHBhcmFtIGRlbW8KICAgIFJlcXVlc3QKCiAgICAgICAgQ2hhbmdlZCByZXNwb25zZSA6IFthcHBsaWNhdGlvbi94bWxdCiAgICAgICAgQ2hhbmdlZCByZXNwb25zZSA6IFthcHBsaWNhdGlvbi9qc29uXQoqIGBHRVRgIC9wZXQvZmluZEJ5U3RhdHVzIEZpbmRzIFBldHMgYnkgc3RhdHVzICAKICAgIFBhcmFtZXRlcgoKICAgIFJldHVybiBUeXBlCgogICAgICAgIENoYW5nZWQgcmVzcG9uc2UgOiBbMjAwXSAvL3N1Y2Nlc3NmdWwgb3BlcmF0aW9uCiogYEdFVGAgL3BldC9maW5kQnlUYWdzIEZpbmRzIFBldHMgYnkgdGFncyAgCiAgICBSZXR1cm4gVHlwZQoKICAgICAgICBDaGFuZ2VkIHJlc3BvbnNlIDogWzIwMF0gLy9zdWNjZXNzZnVsIG9wZXJhdGlvbgoqIGBERUxFVEVgIC9wZXQve3BldElkfSBEZWxldGVzIGEgcGV0ICAKICAgIFBhcmFtZXRlcgoKICAgICAgICBBZGQgbmV3SGVhZGVyUGFyYW0KKiBgUE9TVGAgL3BldC97cGV0SWR9L3VwbG9hZEltYWdlIHVwbG9hZHMgYW4gaW1hZ2UgZm9yIHBldCAgCiAgICBQYXJhbWV0ZXIKCiAgICAgICAgcGV0SWQgTm90ZXMgSUQgb2YgcGV0IHRvIHVwZGF0ZSBjaGFuZ2UgaW50byBJRCBvZiBwZXQgdG8gdXBkYXRlLCBkZWZhdWx0IGZhbHNlCiogYFBPU1RgIC91c2VyIENyZWF0ZSB1c2VyICAKICAgIFJlcXVlc3QKCiAgICAgICAgQ2hhbmdlZCByZXNwb25zZSA6IFthcHBsaWNhdGlvbi9qc29uXQoqIGBQT1NUYCAvdXNlci9jcmVhdGVXaXRoQXJyYXkgQ3JlYXRlcyBsaXN0IG9mIHVzZXJzIHdpdGggZ2l2ZW4gaW5wdXQgYXJyYXkgIAogICAgUmVxdWVzdAoKICAgICAgICBDaGFuZ2VkIHJlc3BvbnNlIDogW2FwcGxpY2F0aW9uL2pzb25dCiogYFBPU1RgIC91c2VyL2NyZWF0ZVdpdGhMaXN0IENyZWF0ZXMgbGlzdCBvZiB1c2VycyB3aXRoIGdpdmVuIGlucHV0IGFycmF5ICAKICAgIFJlcXVlc3QKCiAgICAgICAgQ2hhbmdlZCByZXNwb25zZSA6IFthcHBsaWNhdGlvbi9qc29uXQoqIGBHRVRgIC91c2VyL2xvZ2luIExvZ3MgdXNlciBpbnRvIHRoZSBzeXN0ZW0gIAogICAgUGFyYW1ldGVyCgogICAgICAgIERlbGV0ZSBwYXNzd29yZCAvL1RoZSBwYXNzd29yZCBmb3IgbG9naW4gaW4gY2xlYXIgdGV4dAoqIGBHRVRgIC91c2VyL2xvZ291dCBMb2dzIG91dCBjdXJyZW50IGxvZ2dlZCBpbiB1c2VyIHNlc3Npb24gIAoqIGBQVVRgIC91c2VyL3t1c2VybmFtZX0gVXBkYXRlZCB1c2VyICAKICAgIFJlcXVlc3QKCiAgICAgICAgQ2hhbmdlZCByZXNwb25zZSA6IFthcHBsaWNhdGlvbi9qc29uXQoqIGBHRVRgIC91c2VyL3t1c2VybmFtZX0gR2V0IHVzZXIgYnkgdXNlciBuYW1lICAKICAgIFJldHVybiBUeXBlCgogICAgICAgIENoYW5nZWQgcmVzcG9uc2UgOiBbMjAwXSAvL3N1Y2Nlc3NmdWwgb3BlcmF0aW9uCmBgYAoKIyMjIEpTT04KCmBgYGpzb24KewogICAgImNoYW5nZWRFbGVtZW50cyI6IFsuLi5dLAogICAgImNoYW5nZWRFeHRlbnNpb25zIjogbnVsbCwKICAgICJjaGFuZ2VkT3BlcmF0aW9ucyI6IFsuLi5dLAogICAgImNvbXBhdGlibGUiOiBmYWxzZSwKICAgICJkZXByZWNhdGVkRW5kcG9pbnRzIjogWy4uLl0sCiAgICAiZGlmZmVyZW50IjogdHJ1ZSwKICAgICJpbmNvbXBhdGlibGUiOiB0cnVlLAogICAgIm1pc3NpbmdFbmRwb2ludHMiOiBbLi4uXSwKICAgICJuZXdFbmRwb2ludHMiOiBbCiAgICAgICAgewogICAgICAgICAgICAibWV0aG9kIjogIkdFVCIsCiAgICAgICAgICAgICJvcGVyYXRpb24iOiB7CiAgICAgICAgICAgICAgICAiY2FsbGJhY2tzIjogbnVsbCwKICAgICAgICAgICAgICAgICJkZXByZWNhdGVkIjogbnVsbCwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXR1cm5zIGEgc2luZ2xlIHBldCIsCiAgICAgICAgICAgICAgICAiZXh0ZW5zaW9ucyI6IG51bGwsCiAgICAgICAgICAgICAgICAiZXh0ZXJuYWxEb2NzIjogbnVsbCwKICAgICAgICAgICAgICAgICJvcGVyYXRpb25JZCI6ICJnZXRQZXRCeUlkIiwKICAgICAgICAgICAgICAgICJwYXJhbWV0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIiRyZWYiOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxsb3dFbXB0eVZhbHVlIjogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgImFsbG93UmVzZXJ2ZWQiOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICJkZXByZWNhdGVkIjogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklEIG9mIHBldCB0byByZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhhbXBsZSI6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICJleGFtcGxlcyI6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICJleHBsb2RlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICJleHRlbnNpb25zIjogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgImluIjogInBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJwZXRJZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJzY2hlbWEiOiB7Li4ufSwKICAgICAgICAgICAgICAgICAgICAgICAgInN0eWxlIjogIlNJTVBMRSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInJlcXVlc3RCb2R5IjogbnVsbCwKICAgICAgICAgICAgICAgICJyZXNwb25zZXMiOiB7Li4ufSwKICAgICAgICAgICAgICAgICJzZWN1cml0eSI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhcGlfa2V5IjogW10KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInNlcnZlcnMiOiBudWxsLAogICAgICAgICAgICAgICAgInN1bW1hcnkiOiAiRmluZCBwZXQgYnkgSUQiLAogICAgICAgICAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgInBldCIKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBhdGgiOiBudWxsLAogICAgICAgICAgICAicGF0aFVybCI6ICIvcGV0L3twZXRJZH0iLAogICAgICAgICAgICAic3VtbWFyeSI6ICJGaW5kIHBldCBieSBJRCIKICAgICAgICB9CiAgICBdLAogICAgIm5ld1NwZWNPcGVuQXBpIjogey4uLn0sCiAgICAib2xkU3BlY09wZW5BcGkiOiB7Li4ufSwKICAgICJ1bmNoYW5nZWQiOiBmYWxzZQp9CmBgYAoKIyBMaWNlbnNlCgpvcGVuYXBpLWRpZmYgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlIDIuMC4KCiMgVGhhbmtzCgoqIEFkYXJzaCBTaGFybWEgLyBbYWRhcnNoc2hhcm1hXShodHRwczovL2dpdGh1Yi5jb20vYWRhcnNoc2hhcm1hKQoqIFF1ZW50aW4gRGVzcmFtw6kgLyBbcXVlbjI0MDRdKGh0dHBzOi8vZ2l0aHViLmNvbS9xdWVuMjQwNCkKKiBbU2F5aV0oaHR0cHM6Ly9naXRodWIuY29tL1NheWkpIGZvciBoaXMgcHJvamVjdCBbc3dhZ2dlci1kaWZmXShodHRwczovL2dpdGh1Yi5jb20vU2F5aS9zd2FnZ2VyLWRpZmYpIAogIHdoaWNoIHdhcyBhIHNvdXJjZSBvZiBpbnNwaXJhdGlvbiBmb3IgdGhpcyB0b29sCg==
    readmeEtag: '"312cb2778bf63d121fbcd634bc0af8a84ee961e8918ce7eedb2e915b5f07273d"'
    readmeLastModified: Sun, 24 Apr 2022 18:12:49 GMT
    description: Utility for comparing two OpenAPI specifications.
    created: "2017-12-12T00:39:30Z"
    updated: "2022-04-27T16:01:22Z"
    language: Java
    archived: false
    stars: 401
    watchers: 401
    forks: 112
    owner: OpenAPITools
    logo: https://avatars.githubusercontent.com/u/37325267?v=4
    license: Apache-2.0
    repoEtag: '"19a756a60469ed3fa51351271faf6d7e749ce7d8c77c941bac65c9e18e1ee4e9"'
    repoLastModified: Wed, 27 Apr 2022 16:01:22 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: $ oas (CLI)
  category:
    - miscellaneous
    - Parsers
  language: JavaScript
  link: https://openap.is
  repository: https://github.com/readmeio/oas
  source_description: >-
    Generate OAS files from code comments and easily host them ($ npm install
    oas -g)
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvYXMKCldvcmtpbmcgd2l0aCBPcGVuQVBJIGRlZmluaXRpb25zIGlzIGhhcmQuIFRoaXMgbWFrZXMgaXQgZWFzaWVyLgoKWyFbQnVpbGRdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkbWVpby9vYXMvd29ya2Zsb3dzL0NJL2JhZGdlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkbWVpby9vYXMvKSBbIVtdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3Yvb2FzKV0oaHR0cHM6Ly9ucG0uaW0vb2FzKQoKWyFbXShodHRwczovL2QzdnY2bHA1NXFqYXFjLmNsb3VkZnJvbnQubmV0L2l0ZW1zLzFNM0MzajBJMHMwajNUMzYyMzQ0L1VudGl0bGVkLTIucG5nKV0oaHR0cHM6Ly9yZWFkbWUuY29tKQoKIyMgSW5zdGFsbGF0aW9uCgpgYGAKbnBtIGluc3RhbGwgb2FzCmBgYAoKIyMgQ0xJClRoZSBDTEkgdG9vbCBtYWtlcyBjcmVhdGluZyBBUEkgZGVmaW5pdGlvbiBmaWxlcyBlYXNpZXIuIEl0IGN1cnJlbnRseSBzdXBwb3J0cyBbT3BlbkFQSSAzLnhdKGh0dHBzOi8vc3dhZ2dlci5pby9zcGVjaWZpY2F0aW9uLykgYW5kIFtTd2FnZ2VyIDIuMF0oaHR0cHM6Ly9zd2FnZ2VyLmlvL3NwZWNpZmljYXRpb24vdjIvKSBkb2N1bWVudHMuCgojIyMgVXNhZ2UKCkdvIHRvIGEgZGlyZWN0b3J5IHdpdGggeW91ciBBUEksIGFuZCB0eXBlOgoKYGBgCm9hcyBpbml0CmBgYAoKSXQgd2lsbCB3YWxrIHlvdSB0aHJvdWdoIGhvdyB0byBkb2N1bWVudCB5b3VyIEFQSSB3aXRoIGEgT3BlbkFQSSAzLjAgU3BlYy4KCiMjIyBTd2FnZ2VyIElubGluZQoKYG9hc2AgdXNlcyBbc3dhZ2dlci1pbmxpbmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFkbWVpby9zd2FnZ2VyLWlubGluZSkgd2hpY2ggYWxsb3dzIHlvdSBpbmNsdWRlIGEgbGl0dGxlIE9wZW5BUEkgc25pcHBldCBpbiBhIGNvbW1lbnQgYWJvdmUgeW91ciBjb2RlLCBhbmQgY29sbGVjdHMgdGhlbSBhbGwgdG9nZXRoZXIgaW50byBvbmUgT3BlbkFQSSBmaWxlOgoKYGBganMKLyoKICogQG9hcyBbZ2V0XSAvcGV0L3twZXRJZH0KICogZGVzY3JpcHRpb246ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iCiAqIHBhcmFtZXRlcnM6CiAqICAgLSAocGF0aCkgcGV0SWQ9aGkqIHtTdHJpbmd9IFRoZSBwZXQgSUQKICogICAtIChxdWVyeSkgbGltaXQge0ludGVnZXI6aW50MzJ9IFRoZSBudW1iZXIgb2YgcmVzb3VyY2VzIHRvIHJldHVybgoqLwpyb3V0ZS5nZXQoIi9wZXQvOnBldElkIiwgcGV0LnNob3cpOwpgYGAKCllvdSBuZWVkIHRvIHN0YXJ0IHdpdGggYEBvYXMgW21ldGhvZF0gcGF0aGAsIGJ1dCBldmVyeXRoaW5nIGJlbG93IGl0IGlzIGEgdmFsaWQgW1BhdGggRGVmaW5pdGlvbl0oaHR0cDovL3N3YWdnZXIuaW8vc3BlY2lmaWNhdGlvbi8jcGF0aEl0ZW1PYmplY3QpLgoKWW91IGNhbiBhbHNvIGRvICoqaW5saW5lIHBhcmFtZXRlcnMqKiwgd2hpY2ggYXJlIHNob3J0aGFuZCBmb3IgcGFyYW1ldGVycy4gVGhleSBhcmVuJ3QgdmFsaWQgT3BlbkFQSSBwcm9wZXJ0aWVzIGJ1dCBgc3dhZ2dlci1pbmxpbmVgIGtub3dzIGhvdyB0byBjb21waWxlIHRoZW06CgpgYGAKLSAoaW4pIG5hbWU9ZGVmYXVsdCoge3R5cGU6Zm9ybWF0fSBEZXNjcmlwdGlvbgpgYGAKCiMjIFRvb2xpbmcKVGhpcyBsaWJyYXJ5IGFsc28gZXhwb3NlcyBhIHNldCBvZiB0b29saW5nIHRvIGhlbHAgeW91IG1hbmFnZSBPcGVuQVBJIGRlZmluaXRpb25zLiBZb3UgY2FuIGFjY2VzcyBpdCBieSBsb2FkaW5nOgoKYGBganMKaW1wb3J0IE9hcyBmcm9tICdvYXMnOwovLyBvcjogY29uc3QgT2FzID0gcmVxdWlyZSgnb2FzJykuZGVmYXVsdDsKYGBgCgpBbHNvIGV4cG9zZWQgd2l0aGluIHRoZSBtYWluIGBvYXNgIGV4cG9ydCBpcyBhbiBgT3BlcmF0aW9uYCBjbGFzcyB0aGF0IGNhbiBoZWxwIHlvdSBtYW5hZ2UgYW5kIHJldHJpZXZlIHNwZWNpZmljIGRhdGEgZnJvbSBhbiBBUEkgb3BlcmF0aW9uLgoKPiBJZiB5b3UgbmVlZCB0byB1c2UgdGhpcyBsaWJyYXJ5IHdpdGhpbiBhIGJyb3dzZXIgeW91J2xsIGxpa2VseSBuZWVkIHRvIHVzZSBhIGJ1bmRsZXIgbGlrZSBbV2VicGFja10oaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy8pIG9yIFtSb2xsdXBdKGh0dHBzOi8vcm9sbHVwanMub3JnLykuCg==
    readmeEtag: '"8434912dbb0c41803ee82605ef92766d4c14119ec9f990b866a4457cc5818e23"'
    readmeLastModified: Tue, 19 Apr 2022 18:50:58 GMT
    description: Easily create and manage OpenAPI Documents.
    created: "2017-03-07T02:46:31Z"
    updated: "2022-04-27T21:31:34Z"
    language: TypeScript
    archived: false
    stars: 144
    watchers: 144
    forks: 18
    owner: readmeio
    logo: https://avatars.githubusercontent.com/u/6878153?v=4
    license: MIT
    repoEtag: '"a7dd1c023e2c7a959572eb55c31e7ceb208c711e1e11205f56c8407ec3cb2188"'
    repoLastModified: Wed, 27 Apr 2022 21:31:34 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: openapi-cli-tool
  category:
    - miscellaneous
    - Parsers
  link: https://pypi.org/project/openapi-cli-tool/
  repository: https://github.com/hakopako/openapi-cli-tool
  language: Python
  source_description: >-
    Can list up defined API paths and bundle multi-file into one. Supports
    multiple file extensions.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IVtvcGVuYXBpLWNsaS10b29sXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaGFrb3Bha28vb3BlbmFwaS1jbGktdG9vbC9tYXN0ZXIvZG9jL2xvZ28ucG5nKQoKClshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly90cmF2aXMtY2kuY29tL2hha29wYWtvL29wZW5hcGktY2xpLXRvb2wuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL3RyYXZpcy1jaS5jb20vaGFrb3Bha28vb3BlbmFwaS1jbGktdG9vbCkKIDxpbWcgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL3ZlcnNpb24tdjAuMy4wLWdyZWVuLnN2ZyI+CiA8aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9saWNlbnNlLU1JVC1saWdodGdyYXkuc3ZnIj4gIAo8aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9weXRob24tMi43LDMuNDw9LWJsdWUuc3ZnIj4gPGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2Uvc3dhZ2dlci0zLngteWVsbG93LnN2ZyI+CgojIG9wZW5hcGktY2xpLXRvb2wKT3BlbkFQSSAoU3dhZ2dlciAzLngpIENMSSBUb29sLiAgCgotIFN1cHBvcnRzIG11bHRpcGxlIGZpbGUgZXh0ZW5zaW9ucyAoanNvbnx5YW1sfHltbCkuCi0gQ2FuIGxpc3QgdXAgZGVmaW5lZCBBUEkgcGF0aHMuCi0gRGlzcGxheSBhbiBBUEkgc3BlY2lmaWNhdGlvbiB3aGljaCBpcyByZXNvbHZlZCAoYCRyZWZgKS4KLSBCdW5kbGUgbXVsdGktZmlsZSBpbnRvIG9uZSAob3V0cHV0IHRvIGpzb258eWFtbHxodG1sKS4KLSBPQVMgaW50ZXJhY3RpdmUgc2NhZmZvbGRpbmcuICAKCiMgUmVxdWlyZW1lbnRzCgpQeXRob24gMi43LCAzLjQgPD0uCgojIEluc3RhbGxhdGlvbgoKV2l0aCBwaXA6CgpgYGBiYXNoCiQgcGlwIGluc3RhbGwgb3BlbmFwaS1jbGktdG9vbApgYGAKTWFudWFsbHk6ICAKQ2xvbmUgdGhlIHJlcG9zaXRvcnkgYW5kIGV4ZWN1dGUgdGhlIFB5dGhvbiBpbnN0YWxsYXRpb24gY29tbWFuZCBvbiB5b3VyIG1hY2hpbmUuICAKCmBgYGJhc2gKJCBwaXAgLXIgcmVxdWlyZW1lbnRzLnR4dCBpbnN0YWxsCiQgcHl0aG9uIHNldHVwLnB5IGluc3RhbGwKYGBgCgpUaGVuIGBvcGVuYXBpLWNsaS10b29sYCBjb21tYW5kIGlzIGluc3RhbGxlZC4KCiMgVXNhZ2UKCmBgYAokIG9wZW5hcGktY2xpLXRvb2wgLS1oZWxwClVzYWdlOiBvcGVuYXBpLWNsaS10b29sIFtPUFRJT05TXSBDT01NQU5EIFtBUkdTXS4uLgoKT3B0aW9uczoKICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LgoKQ29tbWFuZHM6CiAgYnVuZGxlICAgIEJ1bmRsZSBtdWx0aXBsZSBmaWxlcyBpbnRvIG9uZS4KICBsaXN0ICAgICAgTGlzdCB1cCBBUEkgcGF0aHMgaW4gYSBmaWxlIG9yIGRpcmVjdG9yeS4KICByZXNvbHZlICAgRGlzcGxheSBgJHJlZmAgcmVzb2x2ZWQgQVBJIHNwZWNpZmljYXRpb24uCiAgc2NhZmZvbGQgIEludGVyYWN0aXZlbHkgY3JlYXRlIGEgc2ltcGxlIE9wZW5BUEkgU3BlY2lmaWNhdGlvbi4KYGBgCgojIyBCdW5kbGUKCkJ1bmRsZSBtdWx0aS1maWxlIHNwZWNpZmljYXRpb25zIGludG8gb25lLCByZWdhcmRsZXNzIG9mIGZpbGUgZXh0ZW5zaW9uIChqc29ufHlhbWx8eW1sKS4KCmBgYAokIG9wZW5hcGktY2xpLXRvb2wgYnVuZGxlIC0taGVscApVc2FnZTogb3BlbmFwaS1jbGktdG9vbCBidW5kbGUgW09QVElPTlNdIEZJTEVfUEFUSFMKCiAgQnVuZGxlIG11bHRpcGxlIGZpbGVzIGludG8gb25lLgoKT3B0aW9uczoKICAtZiwgLS1maWxlIFRFWFQgIExvYWQgY29tbW9uIG9iamVjdHMgc3VjaCBhcyBpbmZvIGFuZCBzZXJ2ZXJzIGZyb20gYQogICAgICAgICAgICAgICAgICAgc3BlY2lmaWMgZmlsZS4gRGVmYXVsdCBpcyBhIGZpbGUgd2hpY2ggaXMgdGhlIHRvcCBvZiBsaXN0CiAgICAgICAgICAgICAgICAgICBjb21tYW5kIHJlc3VsdC4KICAtdCwgLS10eXBlIFRFWFQgIEV4cG9ydCBkYXRhIHR5cGUuIHtqc29ufHlhbWx8aHRtbH0gIFtkZWZhdWx0OiBqc29uXQogIC0taGVscCAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuCmBgYAoKZXhhbXBsZToKYGBgCiQgb3BlbmFwaS1jbGktdG9vbCBidW5kbGUgLXQgaHRtbCBmaWxlMS5qc29uIGZpbGUyLnlhbWxgID4gLi9zcGVjaWZpY2F0aW9uLmh0bWwKYGBgCgpJbiB0aGUgaHRtbCBmaWxlLCBhbiB1bnBrZyB2ZXJzaW9uIG9mIFtzd2FnZ2VyLXVpXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aSkgaXMgZW1iZWRkZWQuIFJlbmRlcmVkIHNjcmVlbnNob3QgYmVsb3c6ICAKCgohW2J1bmRsZS1odG1sLWltZ10oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hha29wYWtvL29wZW5hcGktY2xpLXRvb2wvbWFzdGVyL2RvYy9idW5kbGUtaHRtbC5wbmcpCgoKIyMgTGlzdAoKTGlzdCB1cCBBUEkgcGF0aHMgZnJvbSBhIGZpbGUvZGlyZWN0b3J5IHJlZ2FyZGxlc3Mgb2YgdGhlIGZpbGUgZXh0ZW5zaW9uIChqc29ufHlhbWx8eW1sKS4KCmBgYGJhc2gKJCBvcGVuYXBpLWNsaS10b29sIGxpc3QgYGZpbmQgLi9zcGVjYAoKTWV0aG9kICAgIFBhdGggICAgICAgRmlsZQotLS0tLS0tLSAgLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KUFVUICAgICAgIC9hdmF0YXIgICAgLi90ZXN0cy9yZXNvdXJjZXMvc3BlYy9zYW1wbGUueW1sCkdFVCAgICAgICAvZm9sbHdlcnMgIC4vdGVzdHMvcmVzb3VyY2VzL3NwZWMvZm9sZGVyMS9zYW1wbGUyLnlhbWwKUE9TVCAgICAgIC9mb2xsd2VycyAgLi90ZXN0cy9yZXNvdXJjZXMvc3BlYy9mb2xkZXIxL3NhbXBsZTIueWFtbApQVVQgICAgICAgL2ZvbGx3ZXJzICAuL3Rlc3RzL3Jlc291cmNlcy9zcGVjL2ZvbGRlcjEvc2FtcGxlMi55YW1sClBPU1QgICAgICAvcGV0cyAgICAgIC4vdGVzdHMvcmVzb3VyY2VzL3NwZWMvc2FtcGxlLnltbApHRVQgICAgICAgL3Bvc3RzICAgICAuL3Rlc3RzL3Jlc291cmNlcy9zcGVjL2ZvbGRlcjEvc2FtcGxlLmpzb24KUE9TVCAgICAgIC9wb3N0cyAgICAgLi90ZXN0cy9yZXNvdXJjZXMvc3BlYy9mb2xkZXIxL3NhbXBsZS5qc29uCkdFVCAgICAgICAvdXNlcnMgICAgIC4vdGVzdHMvcmVzb3VyY2VzL3NwZWMvZm9sZGVyMS9zYW1wbGUuanNvbgpQT1NUICAgICAgL3VzZXJzICAgICAuL3Rlc3RzL3Jlc291cmNlcy9zcGVjL2ZvbGRlcjEvc2FtcGxlLmpzb24KYGBgCgoKIyMgUmVzb2x2ZQoKRGlzcGxheSBhbiBBUEkgc3BlY2lmaWNhdGlvbiB3aGljaCBpcyByZXNvbHZlZCBmcm9tICBhIG11bHRpLWZpbGUgQVBJIHNwZWNpZmljYXRpb24gdmlhICRyZWYgcG9pbnRlcnMuICAKCmBgYApVc2FnZTogb3BlbmFwaS1jbGktdG9vbCByZXNvbHZlIFtPUFRJT05TXSBNRVRIT0QgUEFUSCBGSUxFX1BBVEhTCgogIERpc3BsYXkgYCRyZWZgIHJlc29sdmVkIEFQSSBzcGVjaWZpY2F0aW9uLgoKT3B0aW9uczoKICAtdCwgLS10eXBlIFRFWFQgIEV4cG9ydCBkYXRhIHR5cGUuIHtqc29ufHlhbWx9ICBbZGVmYXVsdDoganNvbl0KICAtLWhlbHAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LgpgYGAKCmV4YW1wbGU6CmBgYGJhc2gKJCBvcGVuYXBpLWNsaS10b29sIHJlc29sdmUgcG9zdCAvY2F0cyBgZmluZCAuL3Rlc3RzL3Jlc291cmNlcy9zcGVjYApgYGAKCgojIyBTY2FmZm9sZAoKSW50ZXJhY3RpdmVseSBpbnB1dCBpbmZvcm1hdGlvbiBvZiB5b3VyIEFQSS4gIApBIHNpbXBsZSBPcGVuQVBJIFNwZWNpZmljYXRpb24gaXMgZ2VuZXJhdGVkIGZyb20geW91ciBwcm9tcHQuCgpgYGBiYXNoCiQgb3BlbmFwaS1jbGktdG9vbCBzY2FmZm9sZAoKUGxlYXNlIGVudGVyIHRpdGxlIFsiIl06IHNhbXBsZQpQbGVhc2UgZW50ZXIgdmVyc2lvbiBbdjEuMF06ClBsZWFzZSBlbnRlciBsaWNlbnNlIFtBcGFjaGUgMi4wXToKUGxlYXNlIGVudGVyIHNlcnZlciB1cmwgW2h0dHA6Ly9leGFtcGxlLmNvbV06ClBsZWFzZSBlbnRlciBwYXRoIFsvXTogL2V4YW1wbGUKUGxlYXNlIGVudGVyIG1ldGhvZCBmb3IgL2V4YW1wbGUgW2dldHxwb3N0fHB1dHxkZWxldGV8aGVhZHxvcHRpb258dHJhY2VdOiBnZXQKUGxlYXNlIGVudGVyIGRlc2NyaXB0aW9uIGZvciBnZXQgL2V4YW1wbGUgWyIiXTogc2FtcGxlIGdldCBlbmRwb2ludApQbGVhc2UgZW50ZXIgcmVzcG9uc2UgY29kZSBmb3IgZ2V0IC9leGFtcGxlIFsyMDBdOgpgYGAK
    description: >-
      OpenAPI (Swagger 3.x) CLI Tool. Supports multiple file extensions. Can
      list up defined API paths and bundle multi-file into one.
    created: "2019-05-29T14:31:14Z"
    updated: "2021-12-15T00:25:07Z"
    language: Python
    archived: false
    stars: 19
    watchers: 19
    forks: 3
    owner: hakopako
    logo: https://avatars.githubusercontent.com/u/4510192?v=4
    license: MIT
    repoEtag: '"2cc6a13030f682d8624e91889786ee0665dd941885a2ec490b6691da95680325"'
    repoLastModified: Wed, 15 Dec 2021 00:25:07 GMT
    readmeEtag: '"edd4550e15c20d4db2502be7c103c373b7395336ae17e8e22ff4004149b56dbb"'
    readmeLastModified: Fri, 13 Dec 2019 15:18:01 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: laravel-openapi
  category:
    - Converters
    - Testing
  language: PHP
  repository: https://github.com/vyuldashev/laravel-openapi
  source_description: Generate OpenAPI 3 specification for Laravel Applications.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBHZW5lcmF0ZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gZm9yIExhcmF2ZWwgQXBwbGljYXRpb25zCgpbIVtMYXRlc3QgVmVyc2lvbiBvbiBQYWNrYWdpc3RdKGh0dHBzOi8vcG9zZXIucHVneC5vcmcvdnl1bGRhc2hldi9sYXJhdmVsLW9wZW5hcGkvdi9zdGFibGU/Zm9ybWF0PWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly9wYWNrYWdpc3Qub3JnL3BhY2thZ2VzL3Z5dWxkYXNoZXYvbGFyYXZlbC1vcGVuYXBpKQpbIVtNSVQgTGljZW5zZWRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvbGljZW5zZS1NSVQtYnJpZ2h0Z3JlZW4uc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oTElDRU5TRS5tZCkKWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2dpdGh1Yi5jb20vdnl1bGRhc2hldi9sYXJhdmVsLW9wZW5hcGkvd29ya2Zsb3dzL1Rlc3RzL2JhZGdlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS92eXVsZGFzaGV2L2xhcmF2ZWwtb3BlbmFwaS9hY3Rpb25zKQpbIVtUb3RhbCBEb3dubG9hZHNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vcGFja2FnaXN0L2R0L3Z5dWxkYXNoZXYvbGFyYXZlbC1vcGVuYXBpLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSldKGh0dHBzOi8vcGFja2FnaXN0Lm9yZy9wYWNrYWdlcy92eXVsZGFzaGV2L2xhcmF2ZWwtb3BlbmFwaSkKCiMjIERvY3VtZW50YXRpb24KCllvdSdsbCBmaW5kIHRoZSBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vdnl1bGRhc2hldi5naXRodWIuaW8vbGFyYXZlbC1vcGVuYXBpLgoKIyMgTGljZW5zZQoKVGhlIE1JVCBMaWNlbnNlIChNSVQpLiBQbGVhc2Ugc2VlIFtMaWNlbnNlIEZpbGVdKExJQ0VOU0UubWQpIGZvciBtb3JlIGluZm9ybWF0aW9uLgo=
    readmeEtag: '"25d3ec6d705436dc66aed92e417db1aea84a518d613277581a38314203b85c62"'
    readmeLastModified: Sun, 06 Feb 2022 21:13:14 GMT
    description: Generate OpenAPI specification for Laravel Applications
    created: "2019-04-21T10:45:45Z"
    updated: "2022-04-25T14:28:16Z"
    language: PHP
    archived: false
    stars: 220
    watchers: 220
    forks: 55
    owner: vyuldashev
    logo: https://avatars.githubusercontent.com/u/1809081?v=4
    license: MIT
    repoEtag: '"be9ee835b982900fbb0329797a75a82ea502be530fac51108433c0269c564a5b"'
    repoLastModified: Mon, 25 Apr 2022 14:28:16 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Flotiq - headless CMS with OpenAPI support
  category:
    - sdk
    - gui-editors
    - miscellaneous
  link: https://flotiq.com
  source_description: >-
    Visually define your Content Types, Flotiq automatically generates your own
    OpenAPI v3 compatible endpoints, SDKs and Postman collections.
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Swagger Inspector
  category: testing
  language:
    - Self-hosted
    - SaaS
  link: https://inspector.swagger.io
  repository: null
  source_description: >-
    Swagger Inspector is a free online tool to quickly execute any API request,
    validate its responses and generate a corresponding OpenAPI Description.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Assertible
  category: testing
  language: SaaS
  link: https://assertible.com
  repository: null
  source_description: >-
    Import an OpenAPI specification into Assertible to generate tests that
    validate JSON Schema responses and status codes on every endpoint.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: StackHawk HawkScan
  category: security
  language: SaaS
  repository: https://github.com/stackhawk
  source_description: >-
    StackHawk is an application vulnerability scanner purpose built for
    developers to use in the DevOps pipeline. It leverages a provided OpenAPI v2
    or v3 spec file for route discovery and enhanced scanning.
  link: https://stackhawk.com/
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: 42crunch
  category: security
  language: SaaS
  source_description: >-
    A unique set of integrated API security tools that allow discovery,
    remediation of OpenAPI vulnerabilities and runtime protection against API
    attacks.
  link: https://42crunch.com/
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: API Insights
  category: security
  language: SaaS
  source_description: >-
    RestCase executes hundrends of security and quality checks against the API
    definition, the API insights report provides detailed security scoring for
    prioritization, and remediation advice to help developers define the best
    API definition possible.
  link: https://restcase.com/platform/security
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: Unchase.OpenAPI.Connectedservice
  category:
    - Sdk
    - Code Generators
  link: https://github.com/unchase/Unchase.OpenAPI.Connectedservice
  repository: https://github.com/unchase/unchase.openapi.connectedservice
  language: .NET
  source_description: >-
    Visual Studio extension to generate C# (TypeScript) HttpClient (or C#
    Controllers) code for OpenAPI web service with NSwag.
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IVtMb2dvXShpbWcvVW5jaGFzZS1PcGVuQVBJLVN3YWdnZXItQ29ubmVjdGVkLVNlcnZpY2UtTG9nby5wbmcpCgpbVW5jaGFzZSBPcGVuQVBJIChTd2FnZ2VyKSBDb25uZWN0ZWQgU2VydmljZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPVVuY2hhc2UudW5jaGFzZU9wZW5BUElDb25uZWN0ZWRTZXJ2aWNlKSBpcyBhIFZpc3VhbCBTdHVkaW8gMjAxNy8yMDE5LzIwMjIgZXh0ZW5zaW9uIHRvIGdlbmVyYXRlIGBDI2AgKGBUeXBlU2NyaXB0YCkgYEh0dHBDbGllbnRgIChvciBgQyNgIGBDb250cm9sbGVyc2ApIGNvZGUgZm9yIGBPcGVuQVBJYCAoZm9ybWVybHkgW2BTd2FnZ2VyIEFQSWBdKGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzL3NwZWNpZmljYXRpb24vYWJvdXQvKSkgd2ViIHNlcnZpY2Ugd2l0aCBbTlN3YWddKGh0dHBzOi8vZ2l0aHViLmNvbS9SU3V0ZXIvTlN3YWcpLgoKPiBTdGFydGluZyBmcm9tIFZpc3VhbCBTdHVkaW8gQ29tbXVuaXR5IDIwMTkgdjE2LjEuMyBleHRlbnNpb25zIGJhc2VkIG9uIGBNaWNyb3NvZnQgQ29ubmVjdGVkIFNlcnZpY2VzYCBub3cgd29yayBmaW5lLgoKPiBUaGUgcHJvamVjdCBpcyBkZXZlbG9wZWQgYW5kIG1haW50YWluZWQgYnkgW05pa29sYXkgQ2hlYm90b3YgKCoqVW5jaGFzZSoqKV0oaHR0cHM6Ly9naXRodWIuY29tL3VuY2hhc2UpLgoKIyMgR2V0dGluZyBTdGFydGVkCgojIyMjICoqW1JlYWQgSG93LVRvIG9uIG1lZGl1bS5jb21dKGh0dHBzOi8vbWVkaXVtLmNvbS9AdW5jaGFzZS9ob3ctdG8tZ2VuZXJhdGUtYy1vci10eXBlc2NyaXB0LWNsaWVudC1jb2RlLWZvci1vcGVuYXBpLXN3YWdnZXItc3BlY2lmaWNhdGlvbi1kODgyZDU5ZTNiNzcpKioKCkluc3RhbGwgZnJvbSBgVG9vbHMgLT4gRXh0ZW5zaW9ucyBhbmQgVXBkYXRlc2AgbWVudSBpbnNpZGUgW1Zpc3VhbCBTdHVkaW9dKGh0dHBzOi8vdmlzdWFsc3R1ZGlvLm1pY3Jvc29mdC5jb20vdnMvKSAyMDE3IChmb3IgW1Zpc3VhbFN0dWRpb10oaHR0cHM6Ly92aXN1YWxzdHVkaW8ubWljcm9zb2Z0LmNvbS92cy8pIDIwMTk6IGBFeHRlbnNpb25zIC0+IE1hbmFnZSBFeHRlbnNpb25zYCkgb3IgW2Rvd25sb2FkXShodHRwOi8vdnNpeGdhbGxlcnkuY29tL2V4dGVuc2lvbnMvVW5jaGFzZS5PcGVuQVBJLkNvbm5lY3RlZFNlcnZpY2UuNjMxOTk2MzgtNjIxMS00Mjg1LWJhOGYtNzViMWYwMzI2YzJhL2V4dGVuc2lvbi52c2l4KSAgYXMgYFZTSVhgIHBhY2thZ2UgZnJvbSBWU0dhbGxlcnkgb3IgW2Rvd25sb2FkXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9dW5jaGFzZS51bmNoYXNlT3BlbkFQSUNvbm5lY3RlZFNlcnZpY2UpICBhcyBgVlNJWGAgcGFja2FnZSBmcm9tIFtWaXN1YWwgU3R1ZGlvIE1hcmtldHBsYWNlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9VW5jaGFzZS51bmNoYXNlb3BlbmFwaWNvbm5lY3RlZHNlcnZpY2UpOgoKIVtBZGRpbmcgVW5jaGFzZSBPcGVuQVBJIChTd2FnZ2VyKSBDb25uZWN0ZWQgU2VydmljZSBpbiBWaXN1YWwgU3R1ZGlvXShpbWcvVW5jaGFzZS1PcGVuQVBJLVN3YWdnZXItQ29ubmVjdGVkLVNlcnZpY2UuZ2lmKQoKIyMgQnVpbGRzIHN0YXR1cwoKfFN0YXR1c3xWYWx1ZXwKfDotLS0tfDotLS06fAp8QnVpbGR8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzkwb2V3YW5maDMyZmpjcjYpXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9wcm9qZWN0L3VuY2hhc2UvdW5jaGFzZS5vcGVuYXBpLmNvbm5lY3RlZHNlcnZpY2UpCnxCdWlkIEhpc3Rvcnl8IVtCdWlsZCBoaXN0b3J5XShodHRwczovL2J1aWxkc3RhdHMuaW5mby9hcHB2ZXlvci9jaGFydC91bmNoYXNlL3VuY2hhc2Utb3BlbmFwaS1jb25uZWN0ZWRzZXJ2aWNlKQp8R2l0SHViIFJlbGVhc2V8WyFbR2l0SHViIHJlbGVhc2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvdW5jaGFzZS9VbmNoYXNlLk9wZW5BUEkuQ29ubmVjdGVkc2VydmljZS5zdmcpXShodHRwczovL2dpdGh1Yi5jb20vdW5jaGFzZS9VbmNoYXNlLk9wZW5BUEkuQ29ubmVjdGVkc2VydmljZS9yZWxlYXNlcy9sYXRlc3QpCnxHaXRIdWIgUmVsZWFzZSBEYXRlfFshW0dpdEh1YiBSZWxlYXNlIERhdGVdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UtZGF0ZS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL3JlbGVhc2VzL2xhdGVzdCkKfEdpdEh1YiBSZWxlYXNlIERvd25sb2Fkc3xbIVtHaXRodWIgUmVsZWFzZXNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL2Rvd25sb2Fkcy91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL3RvdGFsLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL3JlbGVhc2VzL2xhdGVzdCkKfFZTIE1hcmtldHBsYWNlfFshW1ZTIE1hcmtldHBsYWNlXShodHRwOi8vdnNtYXJrZXRwbGFjZWJhZGdlLmFwcGhiLmNvbS92ZXJzaW9uLXNob3J0L3VuY2hhc2UuVW5jaGFzZU9wZW5BUElDb25uZWN0ZWRTZXJ2aWNlLnN2ZyldKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT11bmNoYXNlLnVuY2hhc2VPcGVuQVBJQ29ubmVjdGVkU2VydmljZSkKfFZTIE1hcmtldHBsYWNlIERvd25sb2Fkc3xbIVtWUyBNYXJrZXRwbGFjZSBEb3dubG9hZHNdKGh0dHA6Ly92c21hcmtldHBsYWNlYmFkZ2UuYXBwaGIuY29tL2Rvd25sb2Fkcy1zaG9ydC91bmNoYXNlLlVuY2hhc2VPcGVuQVBJQ29ubmVjdGVkU2VydmljZS5zdmcpXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9dW5jaGFzZS51bmNoYXNlT3BlbkFQSUNvbm5lY3RlZFNlcnZpY2UpCnxWUyBNYXJrZXRwbGFjZSBJbnN0YWxsc3xbIVtWUyBNYXJrZXRwbGFjZSBJbnN0YWxsc10oaHR0cDovL3ZzbWFya2V0cGxhY2ViYWRnZS5hcHBoYi5jb20vaW5zdGFsbHMtc2hvcnQvdW5jaGFzZS5VbmNoYXNlT3BlbkFQSUNvbm5lY3RlZFNlcnZpY2Uuc3ZnKV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXVuY2hhc2UudW5jaGFzZU9wZW5BUElDb25uZWN0ZWRTZXJ2aWNlKQoKIyMgRmVhdHVyZXMKCi0gR2VuZXJhdGUgYEMjYCBvciBgVHlwZVNjcmlwdGAgY2xpZW50cy9wcm94aWVzIChjbGllbnQgY29kZSkgZnJvbSBTd2FnZ2VyIDIuMCBhbmQgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbnMKLSBHZW5lcmF0ZSBgQyNgIEFTUC5ORVQgQ29udHJvbGxlciBmcm9tIFN3YWdnZXIgMi4wIGFuZCBPcGVuQVBJIDMuMCBzcGVjaWZpY2F0aW9ucwotICoqRXhwZXJpbWVudGFsKio6IEdlbmVyYXRlIGBDI2Agb3IgYFR5cGVTY3JpcHRgIGNsaWVudHMvcHJveGllcyAoY2xpZW50IGNvZGUpIG9yIEFTUC5ORVQgQ29udHJvbGxlciBmcm9tIE9EYXRhIHNwZWNpZmljYXRpb24gY29udmVydGVkIHRvIE9wZW5BUEkgYmFzZWQgb24gW09wZW5BUEkuTkVULk9EYXRhXShodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L09wZW5BUEkuTkVULk9EYXRhKQotIEdlbmVyYXRlIGAubnN3YWdgIGZpbGUgZm9yIHVzaW5nIGluIFtgTlN3YWdTdHVkaW9gXShodHRwczovL2dpdGh1Yi5jb20vTlN3YWcvTlN3YWcvd2lraS9OU3dhZ1N0dWRpbykgKG5vIG5lZWQgdG8gaW5zdGFsbCBmb3IgZ2VuZXJhdGluZykKLSBBZGQgcmVxdWlyZWQgZGVwZW5kZW5jaWVzIGZvciB0aGUgYEMjYCBjbGllbnQgKGJlZm9yZSBnZW5lcmF0aW5nKToKCS0gTGlicmFyeSB0YXJnZXRpbmcgLk5FVCBTdGFuZGFyZCAxLjQrOgoJCTEuIE5ld3RvbnNvZnQuSnNvbiAoW051R2V0XShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvTmV3dG9uc29mdC5Kc29uKSkKCQkyLiBTeXN0ZW0uTmV0Lkh0dHAgKFtOdUdldF0oaHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1N5c3RlbS5OZXQuSHR0cCkpCgkJMy4gU3lzdGVtLkNvbXBvbmVudE1vZGVsLkFubm90YXRpb25zIChbTnVHZXRdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9TeXN0ZW0uQ29tcG9uZW50TW9kZWwuQW5ub3RhdGlvbnMpKQoJLSBMaWJyYXJ5IHRhcmdldGluZyB0aGUgZnVsbCAuTkVUOgoJCTEuIE5ld3RvbnNvZnQuSnNvbiAoW051R2V0XShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvTmV3dG9uc29mdC5Kc29uKSkKCQkyLiBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uIChHQUMpCgkJMy4gU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRhdGFBbm5vdGF0aW9ucyAoR0FDKQoJLSBMaWJyYXJ5IHRhcmdldGluZyBQQ0wgMjU5IChQb3J0YWJsZSBDbGFzcyBMaWJyYXJ5KToKCQkxLiBOZXd0b25zb2Z0Lkpzb24gKFtOdUdldF0oaHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL05ld3RvbnNvZnQuSnNvbikpCgkJMi4gTWljcm9zb2Z0Lk5ldC5IdHRwIChbTnVHZXRdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuTmV0Lkh0dHApKQoJCTMuIFBvcnRhYmxlLkRhdGFBbm5vdGF0aW9ucyAoW051R2V0XShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvUG9ydGFibGUuRGF0YUFubm90YXRpb25zKSkKLSBBZGQgUmVxdWlyZWQgZGVwZW5kZW5jZXMgZm9yIHRoZSBgQyNgIGNvbnRyb2xsZXIgKGJlZm9yZSBnZW5lcmF0aW5nKToKCTEuIE1pY3Jvc29mdC5Bc3BOZXRDb3JlLk12YyAoW051R2V0XShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvTWljcm9zb2Z0LkFzcE5ldENvcmUuTVZDKSkKLSAqKkNvbW1hbmQqKiB0byBvcGVuIGdlbmVyYXRlZCBgLm5zd2FnYCBhbmQgYC5uc3dhZy5qc29uYCBmaWxlcyBpbiBbTlNXYWdTdHVkaW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9OU3dhZy9OU3dhZy93aWtpL05Td2FnU3R1ZGlvKQotICoqQ29tbWFuZCoqIHRvIGNvbXBhcmUgYC5uc3dhZy5qc29uYCBzcGVjaWZpY2F0aW9uIGZpbGUgd2l0aCBhbm90aGVyIGAubnN3YWcuanNvbmAgc3BlY2lmaWNhdGlvbiBmaWxlIChvciBzcGVjaWZpY2F0aW9uIGdpdmVuIGJ5IGBlbmRwb2ludGApCi0gU3RvcmFnZSBvZiB0aGUgbGFzdCAxMCBlbmRwb2ludHMgKHNwZWNpZmljYXRpb24gcGF0aCkKCiMjIFNldHRpbmdzIE1lYW5pbmcKCk1lYW5pbmcgb2YgdGhlIFVuY2hhc2UgW09wZW5BUEkgKFN3YWdnZXIpIENvbm5lY3RlZCBTZXJ2aWNlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXM/aXRlbU5hbWU9dW5jaGFzZS51bmNoYXNlT3BlbkFQSUNvbm5lY3RlZFNlcnZpY2UpIHNldHRpbmdzIGFjY29yZGluZyB0byBbTlN3YWdTdHVkaW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9OU3dhZy9OU3dhZy93aWtpL05Td2FnU3R1ZGlvKToKCiFbVW5jaGFzZSBPcGVuQVBJIChTd2FnZ2VyKSBDb25uZWN0ZWQgU2VydmljZSBzZXR0aW5ncyBtZWFuaW5nXShpbWcvVW5jaGFzZS1PcGVuQVBJLVN3YWdnZXItQ29ubmVjdGVkLVNlcnZpY2UtU2V0dGluZ3MtTWVhbmluZy5wbmcpCgojIyBFeGNsdWRlIHR5cGUgbmFtZXMKClNpbmNlIFt2MS40LjBdKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL3JlbGVhc2VzL3RhZy92MS40LjApIHlvdSBjYW4gZXhjbHVkZSB0eXBlIG5hbWVzIGluIHNlcGFyYXRlIFdpbmRvdyBmb3IgQyMgY2xpZW50IGNvZGUgZ2VuZXJhdGlvbjoKCiFbVW5jaGFzZSBPcGVuQVBJIChTd2FnZ2VyKSBDb25uZWN0ZWQgU2VydmljZSAtIGV4Y2x1ZGUgdHlwZSBuYW1lc10oaW1nL0NzaGFycC1DbGllbnQtR2VuZXJhdGlvbi1FeGNsdWRlLVR5cGUtTmFtZXMucG5nKQoKIyMgR2VuZXJhdGUgY29kZSBmcm9tIE9EYXRhIHNwZWNpZmljYXRpb24gY29udmVydGVkIHRvIE9wZW5BUEkgc3BlY2lmaWNhdGlvbgoKU2luY2UgW3YxLjUuMF0oaHR0cHM6Ly9naXRodWIuY29tL3VuY2hhc2UvVW5jaGFzZS5PcGVuQVBJLkNvbm5lY3RlZHNlcnZpY2UvcmVsZWFzZXMvdGFnL3YxLjQuMCkgeW91IGNhbiBnZW5lcmF0ZSBjb2RlIGZyb20gT0RhdGEgc3BlY2lmaWNhdGlvbiBjb252ZXJ0ZWQgdG8gT3BlbkFQSSBzcGVjaWZpY2F0aW9uOgoKIVtVbmNoYXNlIE9wZW5BUEkgKFN3YWdnZXIpIENvbm5lY3RlZCBTZXJ2aWNlIC0gZ2VuZXJhdGUgZnJvbSBPRGF0YV0oaW1nL0NzaGFycC1DbGllbnQtR2VuZXJhdGlvbi1PRGF0YS5wbmcpCgojIyBDdXN0b20gQ29tbWFuZHMKCiMjIyBgT3BlbiBpbiBOU3dhZ1N0dWRpb2AgQ29tbWFuZAoKU2luY2UgKnYxLjEuKiogaGF2ZSBiZWVuIGFkZGVkIG1lbnUgY29tbWFuZCBlbWJlZGRlZCBpbiBWaXN1YWwgU3R1ZGlvIFNvbHV0aW9uIEV4cGxvcmVyIGNvbnRleHQgbWVudSBsZXRzIHlvdSBvcGVuIGdlbmVyYXRlZCBgLm5zd2FnYCBhbmQgYC5uc3dhZy5qc29uYCBmaWxlcyBpbiBbTlN3YWdTdHVkaW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9OU3dhZy9OU3dhZy93aWtpL05Td2FnU3R1ZGlvKS4KClRoaXMgZXh0ZW5zaW9uIGlzIGZvciB0aG9zZSB0aW1lcyB3aGVyZSB5b3UgZ2VuZXJhdGUgYC5uc3dhZ2AgYW5kIGAubnN3YWcuanNvbmAgZmlsZXMgYW5kIHlvdSB3YW50IHRvIGJlIGFibGUgdG8gcXVpY2tseSBvcGVuIGl0IGluIFtOU3dhZ1N0dWRpb10oaHR0cHM6Ly9naXRodWIuY29tL05Td2FnL05Td2FnL3dpa2kvTlN3YWdTdHVkaW8pLgoKIyMjIyBQcmVyZXF1aXNpdGUKCj4gSW4gb3JkZXIgdG8gdXNlIHRoaXMgZXh0ZW5zaW9uLCB5b3UgbXVzdCBoYXZlIFtWaXN1YWwgU3R1ZGlvXShodHRwczovL3Zpc3VhbHN0dWRpby5taWNyb3NvZnQuY29tL3ZzLykgMjAxNy8yMDE5LCB0aGlzIGNvbm5lY3RlZCBzZXJ2aWNlIGFzIHdlbGwgYXMgW05Td2FnU3R1ZGlvXShodHRwczovL2dpdGh1Yi5jb20vTlN3YWcvTlN3YWcvd2lraS9OU3dhZ1N0dWRpbykgaW5zdGFsbGVkLgoKIyMjIyBTb2x1dGlvbiBFeHBsb3JlcgoKWW91IGNhbiBvcGVuIGAubnN3YWdgIGFuZCBgLm5zd2FnLmpzb25gIGZpbGVzIGluIFtOU1dhZ1N0dWRpb10oaHR0cHM6Ly9naXRodWIuY29tL05Td2FnL05Td2FnL3dpa2kvTlN3YWdTdHVkaW8pIGJ5IHNpbXBseSByaWdodC1jbGlja2luZyBpdCBpbiBTb2x1dGlvbiBFeHBsb3JlciBhbmQgc2VsZWN0ICoqT3BlbiBpbiBOU3dhZ1N0dWRpbyoqOgoKIVtPcGVuIGluIE5Td2FnU3R1ZGlvIG1lbnUgQ29tbWFuZF0oaW1nL09wZW5XaXRoTlN3YWdDb21tYW5kTWVudS5wbmcpCgojIyMjIFBhdGggdG8gTlN3YWdTdHVkaW8uZXhlCgpJZiB5b3UgaW5zdGFsbGVkIFtOU3dhZ1N0dWRpb10oaHR0cHM6Ly9naXRodWIuY29tL05Td2FnL05Td2FnL3dpa2kvTlN3YWdTdHVkaW8pIGF0IGEgbm9uLWRlZmF1bHQgbG9jYXRpb24sIGEgcHJvbXB0IHdpbGwgYXNrIGZvciB0aGUgcGF0aCB0byBgTlN3YWdTdHVkaW8uZXhlYC4KCllvdSBjYW4gYWx3YXlzIGNoYW5nZSB0aGUgbG9jYXRpb24gaW4gKlRvb2xzIC0+IE9wdGlvbnMgLT4gV2ViIC0+IFVuY2hhc2UgT3BlbkFQSSAoU3dhZ2dlcikgQ29ubmVjdGVkIFNlcnZpY2UqOgoKIVtPcGVuIGluIE5Td2FnU3R1ZGlvIE9wdGlvbl0oaW1nL1VuY2hhc2VPcGVuQVBJQ29ubmVjdGVkU2VydmljZUNvbW1hbmRzT3B0aW9uczEucG5nKQoKIyMjIGBDb21wYXJlIE9wZW5BUEktc3BlY2lmaWNhdGlvbnMuLi5gIENvbW1hbmQKClNpbmNlICp2MS4yLioqIGhhdmUgYmVlbiBhZGRlZCBtZW51IGNvbW1hbmQgZW1iZWRkZWQgaW4gVmlzdWFsIFN0dWRpbyBTb2x1dGlvbiBFeHBsb3JlciBjb250ZXh0IG1lbnUgbGV0cyB5b3UgY29tcGFyZSBnZW5lcmF0ZWQgYC5uc3dhZy5qc29uYCBzcGVjaWZpY2F0aW9uLWZpbGUgd2l0aCBhbm90aGVyIGAubnN3YWcuanNvbmAgc3BlY2lmaWNhdGlvbi1maWxlIChvciB3aXRoIHNwZWNpZmljYXRpb24gZ2l2ZW4gYnkgYGVuZHBvaW50YCkuCgpUaGlzIGV4dGVuc2lvbiBpcyBmb3IgdGhvc2UgdGltZXMgd2hlcmUgeW91IGdlbmVyYXRlIGAubnN3YWcuanNvbmAgZmlsZSBhbmQgeW91IHdhbnQgdG8gcXVpY2tseSBjb21wYXJlIGl0IHdpdGggYW5vdGhlciBzcGVjaWZpY2F0aW9uIG9yIHNwZWNpZmljYXRpb24gZ2l2ZW4gYnkgYGVuZHBvaW50YC4KCiMjIyMgUHJlcmVxdWlzaXRlCgo+IEluIG9yZGVyIHRvIHVzZSB0aGlzIGV4dGVuc2lvbiwgeW91IG11c3QgaGF2ZSBbVmlzdWFsIFN0dWRpb10oaHR0cHM6Ly92aXN1YWxzdHVkaW8ubWljcm9zb2Z0LmNvbS92cy8pIDIwMTcvMjAxOSBhcyB3ZWxsIGFzIHRoaXMgY29ubmVjdGVkIHNlcnZpY2UuCgojIyMjIFNvbHV0aW9uIEV4cGxvcmVyCgpZb3UgY2FuIGNvbXBhcmUgYC5uc3dhZy5qc29uYCBzcGVjaWZpY2F0aW9uLWZpbGUgd2l0aCBhbm90aGVyIGAubnN3YWcuanNvbmAgc3BlY2lmaWNhdGlvbi1maWxlIChvciB3aXRoIHNwZWNpZmljYXRpb24gZ2l2ZW4gYnkgYGVuZHBvaW50YCkgYnkgc2ltcGx5IHNlbGVjdGluZyBvbmUgb3IgdHdvIGZpbGVzIGFuZCByaWdodC1jbGlja2luZyB0aGVtIGluIFNvbHV0aW9uIEV4cGxvcmVyIGFuZCBzZWxlY3QgKipDb21wYXJlIE9wZW5BUEktc3BlY2lmaWNhdGlvbnMuLi4qKjoKCiFbQ29tcGFyZSBPcGVuQVBJIFNwZWNpZmljYXRpb25zIENvbW1hbmRdKGltZy9Db21wYXJlT3BlbkFQSVNwZWNpZmljYXRpb25zT25lRmlsZUNvbW1hbmRNZW51LnBuZykgIVtDb21wYXJlIE9wZW5BUEkgU3BlY2lmaWNhdGlvbnMgQ29tbWFuZF0oaW1nL0NvbXBhcmVPcGVuQVBJU3BlY2lmaWNhdGlvbnNUd29GaWxlc0NvbW1hbmRNZW51LnBuZykKCiMjIyMgUGF0aCB0byB0aGUgc3BlY2lmaWNhdGlvbiBgRW5kcG9pbnRgCgpZb3UgY2FuIGFsd2F5cyBjaGFuZ2UgdGhlIHNwZWNpZmljYXRpb24gRW5kcG9pbnQgdG8gY29tcGFyZSB3aXRoIGluICpUb29scyAtPiBPcHRpb25zIC0+IFdlYiAtPiBVbmNoYXNlIE9wZW5BUEkgKFN3YWdnZXIpIENvbm5lY3RlZCBTZXJ2aWNlKjoKCiFbQ29tcGFyZSBPcGVuQVBJIFNwZWNpZmljYXRpb25zIE9wdGlvbl0oaW1nL1VuY2hhc2VPcGVuQVBJQ29ubmVjdGVkU2VydmljZUNvbW1hbmRzT3B0aW9uczIucG5nKQoKIyMjIyBDb21wYXJlIFZpZXcKCiFbQ29tcGFyZSBPcGVuQVBJIFNwZWNpZmljYXRpb25zIENvbW1hbmQgcmVzdWx0XShpbWcvQ29tcGFyZU9wZW5BUElTcGVjaWZpY2F0aW9uc0NvbW1hbmRSZXN1bHQucG5nKQoKIyMgSG93VG9zCgotIFsgXSBBZGQgSG93VG9zIGluIGEgZnV0dXJlCi0gWyBdIC4uLiBbcmVxdWVzdCBmb3IgSG93VG8geW91IG5lZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL2lzc3Vlcy9uZXc/dGl0bGU9RE9DKQoKIyMgVHJvdWJsZXNob290aW5nCgojIyMgQ2FuJ3Qgb3BlbiAubnN3YWcgZmlsZSBpbiBOU3dhZ1N0dWRpbwoKLSBZb3UgY2FuIHVzZSAqKk9wZW4gaW4gTlN3YWdTdHVkaW8qKiBtZW51IGNvbW1hbmQKLSBJZiBnZW5lcmF0ZWQgY29kZSBjb3JydXB0ZWQsIHRyeSB0byBvcGVuIGAubnN3YWdgIGZpbGUgaW4gW2BOU3dhZ1N0dWRpb2BdKGh0dHBzOi8vZ2l0aHViLmNvbS9SU3V0ZXIvTlN3YWcvd2lraS9OU3dhZ1N0dWRpbykgKFdpbmRvd3MgR1VJIGZvciBlZGl0aW5nIC4qbnN3YWcgZmlsZXMpCi0gSWYgaXQgZG9lc24ndCBvcGVuLCB0cnkgdG8gY3JlYXRlIG5ldyBgLm5zd2FnYCBmaWxlIGluIFtgTlN3YWdTdHVkaW9gXShodHRwczovL2dpdGh1Yi5jb20vUlN1dGVyL05Td2FnL3dpa2kvTlN3YWdTdHVkaW8pIGZvciB0aGUgc2FtZSBBUEkgc2VydmljZSBsaW5rIGFuZCBjaGVjayB0aGUgZGlmZmVyZW5jZXMKCiMjIyBJbnN0YWxsYXRpb24gY29tcGxldGVzIGJ1dCBJIGNhbid0IHNlZSB0aGUgU2VydmljZSBpbiB0aGUgbGlzdCBvZiBjb25uZWN0ZWQgc2VydmljZXMgKFZpc3VhbCBTdHVkaW8gMjAxOSkKCi0gUmVsZXZhbnQgW2J1ZyByZXBvcnRdKGh0dHBzOi8vZGV2ZWxvcGVyY29tbXVuaXR5LnZpc3VhbHN0dWRpby5jb20vY29udGVudC9wcm9ibGVtLzQ2ODc1MS92czIwMTktcHJldmlldy1jYW5ub3QtaW5zdGFsbC1jb25uZWN0ZWQtc2VydmljZS1leC5odG1sKS4gYENvbm5lY3RlZCBTZXJ2aWNlc2AgcmVzdG9yZWQgaW4gdGhlIHYxNi4xLjMgdXBkYXRlIHRvIFtWaXN1YWwgU3R1ZGlvXShodHRwczovL3Zpc3VhbHN0dWRpby5taWNyb3NvZnQuY29tL3ZzLykgMjAxOS4KCiMjIFJvYWRtYXAKClNlZSB0aGUgW2NoYW5nZWxvZ10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGZ1cnRoZXIgZGV2ZWxvcG1lbnQgcGxhbnMgYW5kIHZlcnNpb24gaGlzdG9yeS4KCiMjIEZlZWRiYWNrCgpQbGVhc2UgZmVlbCBmcmVlIHRvIGFkZCB5b3VyIFtyZXZpZXddKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT11bmNoYXNlLnVuY2hhc2VPcGVuQVBJQ29ubmVjdGVkU2VydmljZSZzc3I9ZmFsc2UjcmV2aWV3LWRldGFpbHMpLCBbcmVxdWVzdCBhIGZlYXR1cmVdKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL2lzc3Vlcy9uZXc/dGl0bGU9RkVBVFVSRSksIFthc2sgYSBxdWVzdGlvbl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXVuY2hhc2UudW5jaGFzZU9wZW5BUElDb25uZWN0ZWRTZXJ2aWNlJnNzcj1mYWxzZSNxbmEpIG9yIFtyZXBvcnQgYSBidWddKGh0dHBzOi8vZ2l0aHViLmNvbS91bmNoYXNlL1VuY2hhc2UuT3BlbkFQSS5Db25uZWN0ZWRzZXJ2aWNlL2lzc3Vlcy9uZXc/dGl0bGU9QlVHKSBpbmNsdWRpbmcgaW4gY29ubmVjdGVkIHNlcnZpY2U6IAoKIVtVbmNoYXNlIE9wZW5BUEkgQ29ubmVjdGVkIFNlcnZpY2UgUmVwb3J0IGEgQnVnXShpbWcvVW5jaGFzZS1PcGVuQVBJLUNvbm5lY3RlZC1TZXJ2aWNlLVJlcG9ydEJ1Zy5wbmcpCgpUaGFuayB5b3UgaW4gYWR2YW5jZSEKCiMjIFRoYW5rIG1lIQoKSWYgeW91IGxpa2Ugd2hhdCBJIGFtIGRvaW5nIGFuZCB5b3Ugd291bGQgbGlrZSB0byB0aGFuayBtZSwgcGxlYXNlIGNvbnNpZGVyOgoKWyFbQnV5IG1lIGEgY29mZmUhXShpbWcvYnV5bWVhY29mZmUucG5nKV0oaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9uaWtvbGF5Y2hlYm90b3YpCgpUaGFuayB5b3UgZm9yIHlvdXIgc3VwcG9ydCEKCi0tLS0tLS0tLS0KCkNvcHlyaWdodCAmY29weTsgMjAxOSBbTmlrb2xheSBDaGVib3RvdiAoKipVbmNoYXNlKiopXShodHRwczovL2dpdGh1Yi5jb20vdW5jaGFzZSkgLSBQcm92aWRlZCB1bmRlciB0aGUgW0FwYWNoZSBMaWNlbnNlIDIuMF0oTElDRU5TRS5tZCkuCgo=
    readmeEtag: '"fbe86bf07e0ef3969ffe0c2d1d3f3be0ed4ab6154ca115001483e9844e5c38fd"'
    readmeLastModified: Sun, 12 Dec 2021 19:25:49 GMT
    description: >-
      :scroll: Visual Studio extension to generate OpenAPI (Swagger) web service
      reference.
    created: "2019-03-30T18:26:16Z"
    updated: "2022-04-01T00:29:29Z"
    language: C#
    archived: false
    stars: 60
    watchers: 60
    forks: 10
    owner: unchase
    logo: https://avatars.githubusercontent.com/u/29679226?v=4
    license: Apache-2.0
    repoEtag: '"d8811510cb1774af0d5a99dea8ecb18811d78823e3c8c1218fe7685779f15377"'
    repoLastModified: Fri, 01 Apr 2022 00:29:29 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: oa-client
  category:
    - Sdk
    - Parsers
  language: TypeScript
  link: https://github.com/ninofiliu/oa-client
  repository: https://github.com/ninofiliu/oa-client
  source_description: >-
    Flexible client helper for making and validating calls to OpenAPI backends.
    For Node and the browser. Runtime lib - no need for code generation!
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvYS1jbGllbnQKCkhhcm5lc3MgYWxsIHRoZSBwb3dlciBvZiB5b3VyIGJhY2tlbmQncyBPcGVuQVBJIHYzIHNwZWMgZmlsZXMgYnkgZ2VuZXJhdGluZyBhIGNsaWVudCBvYmplY3QgaW4gYSBmZXcgbGluZXMKCiMjIEZlYXR1cmVzCgrwn5qAIENyZWF0ZXMgYXQgcnVudGltZSBhIGNsaWVudCBvYmplY3QgaW4gYSBmZXcgbGluZXMgKHJlYWQgbW9yZSBpbiBbR2V0dGluZyBTdGFydGVkXSgjZ2V0dGluZy1zdGFydGVkKSkKYGBganMKLy8gQ3JlYXRpb24KaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnb2EtY2xpZW50JzsKY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHNwZWNzLCBjYWxsZXJzLCB7CiAgb3JpZ2luOiAnaHR0cHM6Ly9teS5hcGkuY29tJywKICB2YWxpZGF0aW9uTGV2ZWw6ICdlcnJvcicsCn0pOwovLyBVc2FnZQpjbGllbnRbLyogcGF0aCAqL11bLyogbWV0aG9kICovXSgvKiBvcHRpb25hbCBwYXJhbXMgKi8pLnRoZW4oYXBpUmVzcG9uc2UgPT4geyAvKiAuLi4gKi8gfSkKYGBgCgrwn5qAIE9wdGlvbmFsbHkgdGhyb3dzIGZvciBpbnZhbGlkIHBhdGgsIHF1ZXJ5LCBvciBib2R5CmBgYHlhbWwKIyBPcGVuQVBJIHNwZWNzCnBhdGhzOgogIC91c2Vycy97dXNlcklkfToKICAgIGdldDoKICAgICAgcGFyYW1ldGVyczoKICAgICAgICAtIGluOiBwYXRoCiAgICAgICAgICBuYW1lOiB1c2VySWQKICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgdHlwZTogaW50ZWdlcgpgYGAKYGBganMKY2xpZW50WycvdXNlcnMve3VzZXJJZH0nXS5nZXQoeyBwYXRoUGFyYW1zOiB7IHVzZXJJZDogJ2pvaG4nIH0gfSkKLy8gdGhyb3dzIFtvYS1jbGllbnQ6MTAzXSBEYXRhIGRvZXMgbm90IHBhc3MgdmFsaWRhdGlvbjogZGF0YS51c2VySWQgc2hvdWxkIGJlIGFuIGludGVnZXIKYGBgCgrwn5qAIENvbXBpbGVzIHRoZSBwYXRoIGFuZCBxdWVyeSBwYXJhbXMKYGBganMKY2xpZW50WycvbmV3LXVzZXIve2pvYn0nXS5wb3N0KHsKICBwYXRoUGFyYW1zOiB7IGpvYjogJ2RpcmVjdG9yJyB9LAogIHF1ZXJ5UGFyYW1zOiB7IG5hbWU6ICdHYXNwYXIgTm/DqScgfSwKfSkKLy8gY2FsbHMgL25ldy11c2VyL2RpcmVjdG9yP25hbWU9R2FzcGFyK05vJUMzJUE5CmBgYAoKIyMgR2V0dGluZyBzdGFydGVkCgojIyMgMS4gSW5zdGFsbCB0aGUgcGFja2FnZQoKYGBgc2gKbnBtIGluc3RhbGwgLS1zYXZlIG9hLWNsaWVudApgYGAKCiMjIyAyLiBJbXBvcnQgdGhlIHBhY2thZ2UKClRoaXMgcGFja2FnZSBpcyBpc29tb3JwaGljOiBpdCBjYW4gYmUgdXNlZCBib3RoIGFzIGFuIEVTTSBvciBhIENvbW1vbkpTCgpgYGBqcwovLyBvawppbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdvYS1jbGllbnQnOwovLyBhbHNvIG9rCmNvbnN0IHsgY3JlYXRlQ2xpZW50IH0gPSByZXF1aXJlKCdvYS1jbGllbnQnKTsKYGBgCgojIyMgMy4gSGF2ZSBzb21ld2hlcmUgeW91ciBPcGVuQVBJIHNwZWNzIGFzIGEgSlMgb2JqZWN0CgpZb3UgZG9uJ3QgbmVlZCB0byBhZGQgYW55dGhpbmcgY29tcGFyZWQgdG8gbm9ybWFsIHNwZWNzLCBleGNlcHQgZm9yIGFuIG9wdGlvbmFsIGAucGF0aHNbcGF0aF1bbWV0aG9kXVsneC10eXBlJ11gLCB0aGF0IGRlZmluZXMgdGhlICpjYWxsZXIqLCBtb3JlIG9uIHRoZW0gYmVsb3cuIElmIHRoaXMga2V5IGlzIG9taXR0ZWQsIGl0cyB2YWx1ZSBkZWZhdWx0cyB0byB0aGUgcmVxdWVzdCB0eXBlIChlLmcuIGAiZ2V0ImAgb3IgYCJwb3N0ImApLgoKTm90ZSB0aGF0IGBvYS1jbGllbnRgIGRvZXMgbm90IHJlc29sdmUgc3BlY3MgZm9yIHlvdS4gSWYgeW91IGhhdmUgYCRyZWZzYCwgeW91IHNob3VsZCB1c2UgYSBwYWNrYWdlIGxpa2UgW2pzb24tc2NoZW1hLXJlZi1wYXJzZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyKSB0byByZXNvbHZlIHRoZW0uCgpgYGBqcwpjb25zdCBzcGVjcyA9IHsKICBvcGVuYXBpOiAnMy4wLjAnLAogIGluZm86IHsgLyogLi4uICovIH0sCiAgcGF0aHM6IHsKICAgICcvdXNlcnMve3VzZXJJZH0nOiB7CiAgICAgIGdldDogewogICAgICAgICd4LXR5cGUnOiAnYXV0aG9yaXplZEdldCcsIC8vIHdpbGwgdXNlIHRoZSAiYXV0aG9yaXplZEdldCIgY2FsbGVyCiAgICAgICAgcGFyYW1ldGVyczogWwogICAgICAgICAgewogICAgICAgICAgICBpbjogJ3BhdGgnLAogICAgICAgICAgICBuYW1lOiAndXNlcklkJywKICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgIHNjaGVtYTogewogICAgICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJywKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgXSwKICAgICAgICByZXNwb25zZXM6IHsgLyogLi4uICovIH0KICAgICAgfSwKICAgIH0sCiAgICAnL3N0YXR1cyc6IHsKICAgICAgZ2V0OiB7CiAgICAgICAgLy8gbm8geC10eXBlIC0+IHdpbGwgdXNlIHRoZSAiZ2V0IiBjYWxsZXIKICAgICAgICByZXNwb25zZXM6IHsgLyogLi4uICovIH0KICAgICAgfQogICAgfQogIH0sCn07CmBgYAoKIyMjIDQuIFdyaXRlIHlvdXIgKmNhbGxlcnMqCgpUaGVzZSBhcmUgZ2VuZXJpYyBmdW5jdGlvbnMgdGhhdCBoYW5kbGUgcmVxdWVzdHMgYXQgdGhlIEhUVFAgbGV2ZWwuCgpUaGV5IGFyZSBub3QgaGFuZGxlZCBieSB0aGlzIHBhY2thZ2UsIGJlY2F1c2UgdGhleSBjYW4gYmUgdmVyeSBkaWZmZXJlbnQgZnJvbSBvbmUgY29kZWJhc2UgdG8gYW5vdGhlcjsgYnV0IHVzdWFsbHkgeW91IGRvbid0IGhhdmUgdG8gd3JpdGUgYSBsb3Qgb2YgdGhlbS4KCmB1cmxgIGlzIGFuIFtVUkxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwpLCBgYm9keWAgaXMgYSBwbGFpbiBKUyBvYmplY3QuCgpgYGBqcwpjb25zdCBjYWxsZXJzID0gewogIGdldDogYXN5bmMgKHVybCkgPT4gewogICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybCk7CiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcC5qc29uKCk7CiAgICByZXR1cm4ganNvbjsKICB9LAogIGF1dGhvcml6ZWRHZXQ6IGFzeW5jICh1cmwpID0+IHsKICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgaGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7CiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHtsb2NhbFN0b3JhZ2UudG9rZW59YCk7CiAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godXJsLCB7IGhlYWRlcnMgfSk7CiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcC5qc29uKCk7CiAgICByZXR1cm4ganNvbjsKICB9LAogIGF1dGhvcml6ZWRQb3N0OiBhc3luYyAodXJsLCBib2R5KSA9PiB7CiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpOwogICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7bG9jYWxTdG9yYWdlLnRva2VufWApOwogICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybCwgewogICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgaGVhZGVycywKICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksCiAgICB9KTsKICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwLmpzb24oKTsKICAgIHJldHVybiBqc29uOwogIH0sCn07CmBgYAoKIyMjIDUuIENyZWF0ZSB5b3VyIGNsaWVudAoKWW91IGRvIHRoaXMgb25jZSBhbmQgYGNsaWVudGAgY2FuIGJlIHVzZWQgaW4gdGhlIHJlc3Qgb2YgeW91ciBjb2RlIGFmdGVyd2FyZC4KCmBvcmlnaW5gIGRlZmF1bHRzIHRvIGBzcGVjcy5zZXJ2ZXJzWzBdLnVybGAuIE9wdGlvbmFsIGlmIGl0J3MgZGVmaW5lZCwgZWxzZSByZXF1aXJlZC4KCmB2YWxpZGF0aW9uTGV2ZWxgIGlzIG9uZSBvZiBgJ29mZidgIChkZWZhdWx0KSwgYCd3YXJuJ2AsIG9yIGAnZXJyb3InYC4gSXQgY2hlY2tzIHRoZSBwYXRoIHBhcmFtcywgdGhlIHF1ZXJ5IHBhcmFtcywgYW5kIHRoZSBib2R5IGFnYWluc3QgdGhlIHNjaGVtYSBwcmVzZW50IGluIHRoZSBzcGVjcy4KCmBgYGpzCmNvbnN0IGNsaWVudCA9IGNyZWF0ZUNsaWVudChzcGVjcywgY2FsbGVycywgewogIG9yaWdpbjogJ2h0dHBzOi8vbXkuYXBpLmNvbScsCiAgdmFsaWRhdGlvbkxldmVsOiAnZXJyb3InLAp9KTsKYGBgCgojIyMgNi4gVXNlIHlvdXIgY2xpZW50CgpUaGVyZWFmdGVyLCBgb2EtY2xpZW50YCBkb2VzIGFsbCB0aGUgd29yayBvZiBidWlsZGluZyB0aGUgZnVsbCBVUkwgYW5kIHZhbGlkYXRpbmcgaW5wdXQgZGF0YSBmb3IgeW91IQoKSW4gdGhpcyBleGFtcGxlLCB0aGlzCgpgYGBqcwpjb25zdCBkYXRhID0gYXdhaXQgY2xpZW50WycvdXNlcnMve3VzZXJJZH0nXS5nZXQoeyBwYXRoUGFyYW1zOiB7IHVzZXJJZDogMTIzIH0gfSk7CmBgYAoKaXMgZXF1aXZhbGVudCB0bwoKYGBganMKY29uc3QgdXJsID0gbmV3IFVSTCgnaHR0cHM6Ly9teS5hcGkuY29tL3VzZXJzLzEyMycpOwpjb25zdCBkYXRhID0gYXdhaXQgY2FsbGVycy5hdXRob3JpemVkR2V0KHVybCk7CmBgYAoKCiMjIERpZmZlcmVuY2VzIHdpdGggb3BlbmFwaS1jbGllbnQKClRoZSBbb3BlbmFwaS1jbGllbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9taWtlc3RlYWQvb3BlbmFwaS1jbGllbnQpIHBhY2thZ2UgaXMgc2ltaWxhciBidXQgYWNjb21wbGlzaGVzIHRoaW5ncyBkaWZmZXJlbnRseS4KCmBvcGVuYXBpLWNsaWVudGAgaXMgYSAqKmNvZGUgZ2VuZXJhdGlvbioqIHBhY2thZ2UuIFlvdSB1c2UgaXQgYXMgYSBjb21tYW5kIGxpbmUgc28gdGhhdCBpdCBjb25zdW1lcyBPcGVuQVBJIHNwZWNzIGFuZCBvdXRwdXRzIGNvZGUgdGhhdCB3aWxsIGNhbGwgeW91ciBzZXJ2ZXIuIEl0IGlzIG5vdCBpZGVhbCBiZWNhdXNlIHlvdSBkb24ndCBvd24gYW5kIGNvbnRyb2wgYWxsIG9mIHlvdXIgY29kZSwgYW5kIGl0IGFkZHMgY29tcGxleGl0eS4KCmBvYS1jbGllbnRgIGlzIHNpbXBsZXIgLSBpdCBleHBvc2VzIGBjcmVhdGVDbGllbnRgLCBhICoqZmFjdG9yeSoqIHRoYXQgdGFrZSBzcGVjcyBhcyBpbnB1dCBhbmQgYnVpbGRzIHRoZSBjbGllbnQgYXQgcnVudGltZS4gSWYgeW91ciBBUEkgdXBkYXRlcywgeW91IGRvbid0IGhhdmUgdG8gd3JpdGUgb3IgZ2VuZXJhdGUgYSBzaW5nbGUgbGluZSBvZiBjb2RlLgoKYG9wZW5hcGktY2xpZW50YCBoYW5kbGVzIGFsbCB0aGUgSFRUUCBjYWxscyBhbmQgYXV0aGVudGljYXRpb24gZm9yIHlvdS4gVGhhdCBjYW4gc2VlbSBwb3dlcmZ1bCwgYnV0IGFjdHVhbGx5IHRoZSBzeXN0ZW0gaXMgKnZlcnkqIHJpZ2lkLCBldmVuIGZvciBzbWFsbCBjdXN0b21pemF0aW9ucywgYW5kIGRvZXNuJ3QgY292ZXIgYWxsIGNhc2VzIHlvdSdsbCBmYWNlIGFsb25nIHRoZSB3YXkuCgpJbiBgb2EtY2xpZW50YCwgeW91IGZ1bGx5IG93biB5b3VyIGdlbmVyaWMgSFRUUCBjYWxsZXJzOiB5b3Ugd3JpdGUgdGhlbSB5b3Vyc2VsZiwgYnV0IHlvdSBwcm9iYWJseSB3b24ndCB3cml0ZSBtb3JlIHRoYW4gZml2ZSBvZiB0aGVtIGR1cmluZyB5b3VyIHdob2xlIHByb2plY3QgbGlmZXRpbWU6IHdobyBuZWVkcyBtb3JlIHRoYW4gZ2V0LCBwb3N0LCBhdXRob3JpemVkIGdldCwgYXV0aG9yaXplZCBwb3N0IGFuZCBmaWxlIHVwbG9hZD8KCmBgYAorLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKfCBXcml0dGVuIHdpdGggPDMgYnkgTmlubyBGaWxpdSB8CnwgIENvbnRyaWJ1dGlvbnMgYXJlIHdlbGNvbWVkISAgfAorLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKICAgICAgICAgXCAgIF5fX14gCiAgICAgICAgICBcICAob28pXF9fX19fX18KICAgICAgICAgICAgIChfXylcICAgICAgIClcL1wKICAgICAgICAgICAgICAgICB8fC0tLS13IHwKICAgICAgICAgICAgICAgICB8fCAgICAgfHwKYGBgCg==
    readmeEtag: '"06bfcf3608f07071d4887322defd39e07fb3a60fbd8d4e93e5c489dd68c192cd"'
    readmeLastModified: Mon, 17 Jan 2022 11:12:08 GMT
    description: >-
      Flexible client helper for making and validating calls to OpenAPI
      backends. For Node and the browser. Runtime lib - no need for code
      generation!
    created: "2020-04-23T20:49:35Z"
    updated: "2022-04-11T21:58:15Z"
    language: JavaScript
    archived: false
    stars: 34
    watchers: 34
    forks: 2
    owner: ninofiliu
    logo: https://avatars.githubusercontent.com/u/29477588?v=4
    license: MIT
    repoEtag: '"1d52bd074f75474ed55c21e6d0303b3acf0565b397d530896418ef97623e4a7d"'
    repoLastModified: Mon, 11 Apr 2022 21:58:15 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: Restish
  category:
    - Documentation
    - Testing
  language:
    - CLI
    - Go
  link: https://rest.sh/
  repository: https://github.com/danielgtaylor/restish
  source_description: >-
    A CLI for REST-ish APIs with HTTP/2, built-in auth, content negotiation,
    caching, and more that understands and can discover OpenAPI descriptions.
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IVtSZXN0aXNoIExvZ29dKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEwNjgyNi84MjEwOTkxOC1lYzViMjMwMC05NmVlLTExZWEtOWFmMC04NTE1MzI5ZDU5NjUucG5nKQoKWyFbV29ya3MgV2l0aCBSZXN0aXNoXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL1dvcmtzJTIwV2l0aC1SZXN0aXNoLWZmNWY4NyldKGh0dHBzOi8vcmVzdC5zaC8pIFshW1VzZXIgR3VpZGVdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvRG9jcy1HdWlkZS01ZmFmZDcpXShodHRwczovL3Jlc3Quc2gvIy9ndWlkZSkgWyFbQ0ldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxndGF5bG9yL3Jlc3Rpc2gvd29ya2Zsb3dzL0NJL2JhZGdlLnN2Zz9icmFuY2g9bWFpbildKGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxndGF5bG9yL3Jlc3Rpc2gvYWN0aW9ucz9xdWVyeT13b3JrZmxvdyUzQUNJK2JyYW5jaCUzQW1haW4rKykgWyFbY29kZWNvdl0oaHR0cHM6Ly9jb2RlY292LmlvL2doL2RhbmllbGd0YXlsb3IvcmVzdGlzaC9icmFuY2gvbWFpbi9ncmFwaC9iYWRnZS5zdmcpXShodHRwczovL2NvZGVjb3YuaW8vZ2gvZGFuaWVsZ3RheWxvci9yZXN0aXNoKSBbIVtEb2NzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2dvZG9jLXJlZmVyZW5jZS01ZmFmZDcpXShodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9kYW5pZWxndGF5bG9yL3Jlc3Rpc2g/dGFiPXN1YmRpcmVjdG9yaWVzKSBbIVtHbyBSZXBvcnQgQ2FyZF0oaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2dpdGh1Yi5jb20vZGFuaWVsZ3RheWxvci9yZXN0aXNoKV0oaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL3JlcG9ydC9naXRodWIuY29tL2RhbmllbGd0YXlsb3IvcmVzdGlzaCkKCltSZXN0aXNoXShodHRwczovL3Jlc3Quc2gvKSBpcyBhIENMSSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBbUkVTVF0oaHR0cHM6Ly9hcGlzeW91d29udGhhdGUuY29tL2Jsb2cvcmVzdC1hbmQtaHlwZXJtZWRpYS1pbi0yMDE5KS1pc2ggSFRUUCBBUElzIHdpdGggc29tZSBuaWNlIGZlYXR1cmVzIGJ1aWx0LWluLCBsaWtlIGFsd2F5cyBoYXZpbmcgdGhlIGxhdGVzdCBBUEkgcmVzb3VyY2VzLCBmaWVsZHMsIGFuZCBvcGVyYXRpb25zIGF2YWlsYWJsZSB3aGVuIHRoZXkgZ28gbGl2ZSBvbiB0aGUgQVBJIHdpdGhvdXQgbmVlZGluZyB0byBpbnN0YWxsIG9yIHVwZGF0ZSBhbnl0aGluZy4KClNlZSB0aGUgW3VzZXIgZ3VpZGVdKGh0dHBzOi8vcmVzdC5zaC8jL2d1aWRlKSB0byBnZXQgc3RhcnRlZCwgb3IgaG93IFJlc3Rpc2ggW2NvbXBhcmVzIHRvIGNVUkwgJiBIVFRQaWVdKGh0dHBzOi8vcmVzdC5zaC8jL2NvbXBhcmlzb24pLgoKRmVhdHVyZXMgaW5jbHVkZToKCi0gSFRUUC8yIChbUkZDIDc1NDBdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3NTQwKSkgd2l0aCBUTFMgYnkgX2RlZmF1bHRfIHdpdGggZmFsbGJhY2sgdG8gSFRUUC8xLjEKLSBHZW5lcmljIGhlYWQvZ2V0L3Bvc3QvcHV0L3BhdGNoL2RlbGV0ZSB2ZXJicyBsaWtlIGBjdXJsYCBvciBbSFRUUGllXShodHRwczovL2h0dHBpZS5vcmcvKQotIEdlbmVyYXRlZCBjb21tYW5kcyBmb3IgQ0xJIG9wZXJhdGlvbnMsIGUuZy4gYHJlc3Rpc2ggbXktYXBpIGxpc3QtdXNlcnNgCiAgLSBBdXRvbWF0aWNhbGx5IGRpc2NvdmVycyBBUEkgZGVzY3JpcHRpb25zCiAgICAtIFtSRkMgODYzMV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MzEpIGBzZXJ2aWNlLWRlc2NgIGxpbmsgcmVsYXRpb24KICAgIC0gW1JGQyA1OTg4XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTk4OCNzZWN0aW9uLTYuMi4yKSBgZGVzY3JpYmVkYnlgIGxpbmsgcmVsYXRpb24KICAtIFN1cHBvcnRlZCBmb3JtYXRzCiAgICAtIFtPcGVuQVBJIDNdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMC4zLm1kKSBhbmQgW0pTT04gU2NoZW1hXShodHRwczovL2pzb24tc2NoZW1hLm9yZy8pCiAgLSBBdXRvbWF0aWMgY29uZmlndXJhdGlvbiBvZiBBUEkgYXV0aCBpZiBhZHZlcnRpc2VkIGJ5IHRoZSBBUEkKICAtIFNoZWxsIGNvbW1hbmQgY29tcGxldGlvbiBmb3IgQmFzaCwgRmlzaCwgWnNoLCBQb3dlcnNoZWxsCi0gQXV0b21hdGljIHBhZ2luYXRpb24gb2YgcmVzb3VyY2UgY29sbGVjdGlvbnMgdmlhIFtSRkMgNTk4OF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5ODgpIGBwcmV2YCBhbmQgYG5leHRgIGh5cGVybWVkaWEgbGlua3MKLSBBUEkgZW5kcG9pbnQtYmFzZWQgYXV0aCBidWlsdC1pbiB3aXRoIHN1cHBvcnQgZm9yIHByb2ZpbGVzOgogIC0gSFRUUCBCYXNpYwogIC0gQVBJIGtleSB2aWEgaGVhZGVyIG9yIHF1ZXJ5IHBhcmFtCiAgLSBPQXV0aDIgY2xpZW50IGNyZWRlbnRpYWxzIGZsb3cgKG1hY2hpbmUtdG8tbWFjaGluZSwgW1JGQyA2NzQ5XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjc0OSkpCiAgLSBPQXV0aDIgYXV0aG9yaXphdGlvbiBjb2RlICh3aXRoIFBLQ0UgW1JGQyA3NjM2XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzYzNikpIGZsb3cKLSBDb250ZW50IG5lZ290aWF0aW9uLCBkZWNvZGluZyAmIHVubWFyc2hhbGxpbmcgYnVpbHQtaW46CiAgLSBKU09OIChbUkZDIDgyNTldKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM4MjU5KSwgaHR0cHM6Ly93d3cuanNvbi5vcmcvKQogIC0gWUFNTCAoaHR0cHM6Ly95YW1sLm9yZy8pCiAgLSBDQk9SIChbUkZDIDcwNDldKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MDQ5KSwgaHR0cDovL2Nib3IuaW8vKQogIC0gTWVzc2FnZVBhY2sgKGh0dHBzOi8vbXNncGFjay5vcmcvKQogIC0gQW1hem9uIElvbiAoaHR0cDovL2Ftem4uZ2l0aHViLmlvL2lvbi1kb2NzLykKICAtIEd6aXAgKFtSRkMgMTk1Ml0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE5NTIpKSBhbmQgQnJvdGxpIChbUkZDIDc5MzJdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3OTMyKSkgY29udGVudCBlbmNvZGluZwotIFN0YW5kYXJkaXplZCBbaHlwZXJtZWRpYV0oaHR0cHM6Ly9zbWFydGJlYXIuY29tL2xlYXJuL2FwaS1kZXNpZ24vd2hhdC1pcy1oeXBlcm1lZGlhLykgcGFyc2luZyBpbnRvIHF1ZXJ5YWJsZS9mb2xsb3dhYmxlIHJlc3BvbnNlIGxpbmtzOgogIC0gSFRUUCBMaW5rIHJlbGF0aW9uIGhlYWRlcnMgKFtSRkMgNTk4OF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5ODgjc2VjdGlvbi02LjIuMikpCiAgLSBbSEFMXShodHRwOi8vc3RhdGVsZXNzLmNvL2hhbF9zcGVjaWZpY2F0aW9uLmh0bWwpCiAgLSBbU2lyZW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnN3aWJlci9zaXJlbikKICAtIFtUZXJyaWZpY2FsbHkgU2ltcGxlIEpTT05dKGh0dHBzOi8vZ2l0aHViLmNvbS9tcG5hbGx5L1RlcnJpZmljYWxseS1TaW1wbGUtSlNPTikKICAtIFtKU09OOkFQSV0oaHR0cHM6Ly9qc29uYXBpLm9yZy8pCi0gTG9jYWwgY2FjaGluZyB0aGF0IHJlc3BlY3RzIFtSRkMgNzIzNF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzQpIGBDYWNoZS1Db250cm9sYCBhbmQgYEV4cGlyZXNgIGhlYWRlcnMKLSBDTEkgW3Nob3J0aGFuZF0oaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGd0YXlsb3Ivb3BlbmFwaS1jbGktZ2VuZXJhdG9yL3RyZWUvbWFzdGVyL3Nob3J0aGFuZCNjbGktc2hvcnRoYW5kLXN5bnRheCkgZm9yIHN0cnVjdHVyZWQgZGF0YSBpbnB1dCAoZS5nLiBmb3IgSlNPTikKLSBbSk1FU1BhdGggUGx1c10oaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGd0YXlsb3IvZ28tam1lc3BhdGgtcGx1cykgcmVzcG9uc2UgZmlsdGVyaW5nICYgcHJvamVjdGlvbgotIENvbG9yaXplZCBwcmV0dGlmaWVkIHJlYWRhYmxlIG91dHB1dAotIEZhc3QgbmF0aXZlIHplcm8tZGVwZW5kZW5jeSBiaW5hcnkKCkFydGljbGVzOgoKLSBbQSBDTEkgZm9yIFJFU1QgQVBJc10oaHR0cHM6Ly9kZXYudG8vZGFuaWVsZ3RheWxvci9hLWNsaS1mb3ItcmVzdC1hcGlzLXBhcnQtMS0xMDRiKQotIFtNYXBwaW5nIE9wZW5BUEkgdG8gdGhlIENMSV0oaHR0cHM6Ly9kZXYudG8vZGFuaWVsZ3RheWxvci9tYXBwaW5nLW9wZW5hcGktdG8tdGhlLWNsaS0zN3BiKQoKVGhpcyBwcm9qZWN0IHN0YXJ0ZWQgbGlmZSBhcyBhIGZvcmsgb2YgW09wZW5BUEkgQ0xJIEdlbmVyYXRvcl0oaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGd0YXlsb3Ivb3BlbmFwaS1jbGktZ2VuZXJhdG9yKS4K
    readmeEtag: '"cb76b1f5786cad416b94fc762d071512b46d75d2af889c0b013d2e866bc3efe6"'
    readmeLastModified: Mon, 25 Apr 2022 05:54:19 GMT
    description: >-
      Restish is a CLI for interacting with REST-ish HTTP APIs with some nice
      features built-in
    created: "2020-05-15T06:45:59Z"
    updated: "2022-04-24T21:02:54Z"
    language: Go
    archived: false
    stars: 254
    watchers: 254
    forks: 30
    owner: danielgtaylor
    logo: https://avatars.githubusercontent.com/u/106826?v=4
    license: MIT
    repoEtag: '"8c7cbacb40a2390e76c61d5a4216ba20b9eb1f60f6faa142721f15ee9044af90"'
    repoLastModified: Sun, 24 Apr 2022 21:02:54 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: openapi-examples-validator
  category:
    - Description Validators
    - Data Validators
    - Parsers
  repository: https://github.com/codekie/openapi-examples-validator
  language: JavaScript
  source_description: Validates embedded JSON-examples in OpenAPI-specs
  v2: true
  v3: true
  repositoryMetadata:
    base64Readme: >-
      b3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3IKPT09PT09PT09PT09PT09PT09PT09PT09PT0KClZhbGlkYXRlcyBlbWJlZGRlZCBKU09OLWV4YW1wbGVzIGluIE9wZW5BUEktc3BlY3MgKHYyIGFuZCB2MyBhcmUgc3VwcG9ydGVkKQoKWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vYmFkZ2UuZnVyeS5pby9qcy9vcGVuYXBpLWV4YW1wbGVzLXZhbGlkYXRvci5zdmcpXShodHRwczovL2JhZGdlLmZ1cnkuaW8vanMvb3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3IpClshW1N0YW5kYXJkIFZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvcmVsZWFzZS1zdGFuZGFyZCUyMHZlcnNpb24tYnJpZ2h0Z3JlZW4uc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbikKWyFbUnVuIHRlc3RzXShodHRwczovL2dpdGh1Yi5jb20vY29kZWtpZS9vcGVuYXBpLWV4YW1wbGVzLXZhbGlkYXRvci9hY3Rpb25zL3dvcmtmbG93cy90ZXN0LWFuZC1kZXBsb3ktZG9ja2VyLnltbC9iYWRnZS5zdmc/cXVlcnk9YnJhbmNoJTNBbWFpbildKGh0dHBzOi8vZ2l0aHViLmNvbS9jb2Rla2llL29wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yL2FjdGlvbnMvd29ya2Zsb3dzL3Rlc3QtYW5kLWRlcGxveS1kb2NrZXIueW1sP3F1ZXJ5PWJyYW5jaCUzQW1haW4pClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL2NvZGVraWUvb3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3IvYmFkZ2Uuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vZ2l0aHViL2NvZGVraWUvb3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3I/YnJhbmNoPW1haW4pClshW011dGF0aW9uIHRlc3RpbmcgYmFkZ2VdKGh0dHBzOi8vYmFkZ2Uuc3RyeWtlci1tdXRhdG9yLmlvL2dpdGh1Yi5jb20vY29kZWtpZS9vcGVuYXBpLWV4YW1wbGVzLXZhbGlkYXRvci9tYWluKV0oaHR0cHM6Ly9zdHJ5a2VyLW11dGF0b3IuZ2l0aHViLmlvKQpbIVtNYWludGFpbmFiaWxpdHldKGh0dHBzOi8vYXBpLmNvZGVjbGltYXRlLmNvbS92MS9iYWRnZXMvNTA5NGY2YWM3NzU0ZTVhMThiMWIvbWFpbnRhaW5hYmlsaXR5KV0oaHR0cHM6Ly9jb2RlY2xpbWF0ZS5jb20vZ2l0aHViL2NvZGVraWUvb3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3IvbWFpbnRhaW5hYmlsaXR5KQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9jb2Rla2llL29wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yL2JhZGdlLnN2ZyldKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9jb2Rla2llL29wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yKQpbIVtEb2NrZXIgSHViXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2RvY2tlci1yZWFkeS1ibHVlLnN2ZyldKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9jb2Rla2llL29wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yKQoKUHJlcmVxdWlzaXRlcwotLS0tLS0tLS0tLS0KCi0gW05vZGUuanNdKGh0dHBzOi8vbm9kZWpzLm9yZy8pID49MTAuCgpJbnN0YWxsCi0tLS0tLS0KCkluc3RhbGwgdXNpbmcgW25wbV0oaHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9nZXR0aW5nLXN0YXJ0ZWQvd2hhdC1pcy1ucG0pOgoKICAgIG5wbSBpbnN0YWxsIC1nIG9wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yCgpVc2FnZQotLS0tLQoKYGBgCm9wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yIFtvcHRpb25zXSA8ZmlsZXBhdGg+CgpWYWxpZGF0ZSBlbWJlZGRlZCBleGFtcGxlcyBpbiBPcGVuQVBJLXNwZWNzIChKU09OIGFuZCBZQU1MIHN1cHBvcnRlZCkuCiAgVG8gdmFsaWRhdGUgZXh0ZXJuYWwgZXhhbXBsZXMsIHVzZSB0aGUgYC1zYCBhbmQgYC1lYCBvcHRpb24uCiAgVG8gcGFzcyBhIG1hcHBpbmctZmlsZSwgdG8gdmFsaWRhdGUgbXVsdGlwbGUgZXh0ZXJuYWwgZXhhbXBsZXMsIHVzZSB0aGUgYC1tYCBvcHRpb24uCgpPcHRpb25zOgogIC1WLCAtLXZlcnNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgdGhlIHZlcnNpb24gbnVtYmVyCiAgLXMsIC0tc2NoZW1hLWpzb25wYXRoIDxzY2hlbWEtanNvbnBhdGg+ICAgIFBhdGggdG8gT3BlbkFQSS1zY2hlbWEsIHRvIHZhbGlkYXRlIHRoZSBleGFtcGxlIGZpbGUgYWdhaW5zdAogIC1lLCAtLWV4YW1wbGUtZmlsZXBhdGggPGV4YW1wbGUtZmlsZXBhdGg+ICBmaWxlIHBhdGggdG8gZXhhbXBsZSBmaWxlLCB0byBiZSB2YWxpZGF0ZWQKICAtbSwgLS1tYXBwaW5nLWZpbGVwYXRoIDxtYXBwaW5nLWZpbGVwYXRoPiAgZmlsZSBwYXRoIHRvIG1hcCwgY29udGFpbmluZyBzY2hlbWEtcGF0aHMgYXMga2V5IGFuZCB0aGUgZmlsZS1wYXRoKHMpIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGVzIGFzIHZhbHVlLiBJZiB3aWxkY2FyZHMgYXJlIHVzZWQsIHRoZSBwYXJhbWV0ZXIgaGFzIHRvIGJlIHB1dCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdW90ZXMuCiAgLWMsIC0tY3dkLXRvLW1hcHBpbmctZmlsZSAgICAgICAgICAgICAgICAgIGNoYW5nZXMgdG8gdGhlIGRpcmVjdG9yeSBvZiB0aGUgbWFwcGluZy1maWxlLCBiZWZvcmUgcmVzb2x2aW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlJ3MgcGF0aHMuIFVzZSB0aGlzIG9wdGlvbiwgaWYgeW91ciBtYXBwaW5nLWZpbGVzIHVzZSByZWxhdGl2ZSBwYXRocwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGV4YW1wbGVzCiAgLW4sIC0tbm8tYWRkaXRpb25hbC1wcm9wZXJ0aWVzICAgICAgICAgICAgIGRvbid0IGFsbG93IHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IGRlc2NyaWJlZCBpbiB0aGUgc2NoZW1hCiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCB1c2FnZSBpbmZvcm1hdGlvbgpgYGBgCgpUaGUgdmFsaWRhdG9yIHdpbGwgc2VhcmNoIHRoZSBPcGVuQVBJLXNwZWMgZm9yIHJlc3BvbnNlLWV4YW1wbGVzIGFuZCB2YWxpZGF0ZSB0aGVtIGFnYWluc3QgaXRzIHNjaGVtYS4KCklmIGFuIGV4dGVybmFsIGV4YW1wbGUgaGFzIHRvIGJlIHZlcmlmaWVkLCB0aGUgYC1zYCBhbmQgYC1lYCBvcHRpb24gaGFzIHRvIGJlIHVzZWQuCgpGb3IgZXhhbXBsZToKCmBgYAokIG9wZW5hcGktZXhhbXBsZXMtdmFsaWRhdG9yIC1zICQucGF0aHMuLy5nZXQucmVzcG9uc2VzLjIwMC5zY2hlbWEgLWUgZXhhbXBsZS5qc29uIG9wZW5hcGktc3BlYy5qc29uCmBgYAoKVG8gdmFsaWRhdGUgbXVsdGlwbGUgZXh0ZXJuYWwgZXhhbXBsZXMsIHBhc3MgYSBtYXBwaW5nIGZpbGUgd2l0aCBhIHNpbWlsYXIgc3RydWN0dXJlIGFsb25nIHdpdGggdGhlIGAtbWAgb3B0aW9uOgoKYGBganNvbgp7CiAgIiQucGF0aHMuLy5nZXQucmVzcG9uc2VzLjIwMC5zY2hlbWEiOiBbCiAgICAidGVzdC9kYXRhL2V4dGVybmFsLWV4YW1wbGVzLXZhbGlkLWV4YW1wbGUxLmpzb24iLAogICAgInRlc3QvZGF0YS9leHRlcm5hbC1leGFtcGxlcy12YWxpZC1leGFtcGxlMi5qc29uIiwKICAgICJ0ZXN0L2RhdGEvZXh0ZXJuYWwtZXhhbXBsZXMtaW52YWxpZC10eXBlLmpzb24iCiAgXSwKICAiJC5wYXRocy4vLmdldC5yZXNwb25zZXMuMzAwLnNjaGVtYSI6ICJ0ZXN0L2RhdGEvZXh0ZXJuYWwtZXhhbXBsZXMtaW52YWxpZC1taXNzaW5nLWxpbmsuanNvbiIKfQpgYGAKCkVycm9ycyB3aWxsIGJlIHdyaXR0ZW4gdG8gYHN0ZGVycmAuCgpTYW1wbGUgb3V0cHV0IG9mIHZhbGlkYXRpb24gZXJyb3JzOgoKYGBganNvbgpbCiAgICB7CiAgICAgICAgImtleXdvcmQiOiAidHlwZSIsCiAgICAgICAgImRhdGFQYXRoIjogIi52ZXJzaW9uc1swXS5pZCIsCiAgICAgICAgInNjaGVtYVBhdGgiOiAiIy9wcm9wZXJ0aWVzL3ZlcnNpb25zL2l0ZW1zL3Byb3BlcnRpZXMvaWQvdHlwZSIsCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgIm1lc3NhZ2UiOiAic2hvdWxkIGJlIHN0cmluZyIsCiAgICAgICAgImV4YW1wbGVQYXRoIjogIi9+MS9nZXQvcmVzcG9uc2VzLzIwMC9leGFtcGxlcy9hcHBsaWNhdGlvbn4xanNvbiIKICAgIH0KXQpgYGAKCkRvY2tlcgotLS0tLS0KCkV4YW1wbGUgdXNhZ2U6CgpgYGBzaGVsbAokIGRvY2tlciBydW4gLS1ybSAtaSBcCiAgICAtLXVzZXI9JChpZCAtdSkgXAogICAgLXYgJHtQV0R9Oi9kYXRhIFwKICAgIGNvZGVraWUvb3BlbmFwaS1leGFtcGxlcy12YWxpZGF0b3I6bGF0ZXN0IFwKICAgIC9kYXRhL3Rlc3QvZGF0YS92My9zaW1wbGUtYXBpLXdpdGgtZXhhbXBsZXMtd2l0aC1yZWZzLWludmFsaWQueW1sCmBgYAoKQ2F2ZWF0Ci0tLS0tLQoKLSBUaGUgZm9ybWF0cyBgaW50MzJgLCBgZmxvYXRgIGFuZCBgZG91YmxlYCBhcmUgc3VwcG9ydGVkIGZvciB0aGUgdHlwZSBgbnVtYmVyYC4gVGhlIGZvcm1hdCBgaW50NjRgIGlzIG9ubHkgYXZhaWxhYmxlCiAgZm9yIHRoZSB0eXBlIGBzdHJpbmdgLCB0aG91Z2ggKGR1ZSB0byB0aGUgcHJlY2lzaW9uLWxpbWl0YXRpb25zIG9mIEphdmFzY3JpcHQpLgotIFRoZSBvcHRpb24gYC0tbm8tYWRkaXRpb25hbC1wcm9wZXJ0aWVzYCBkb2VzIG5vdCB3b3JrLCBpZiBgYWxsT2ZgIGlzIHVzZWQgdG8gY29tYmluZSBzdWJzY2hlbWFzLgogIC0gRW5hYmxpbmcgdGhpcyBmbGFnIHdpbGwgbm90IGFwcGx5IGBhZGRpdGlvbmFsUHJvcGVydGllc2AgdG8gYW55IHN1YnNjaGVtYXMgdGhhdCB1c2UKICAgIFt0aGVzZV0oaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvdW5kZXJzdGFuZGluZy1qc29uLXNjaGVtYS9yZWZlcmVuY2UvY29tYmluaW5nLmh0bWwpIGNvbWJpbmVyIGtleXdvcmRzLgogIC0gQSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkIGlmIHNldHRpbmcgdGhlIGBhZGRpdGlvbmFsUHJvcGVydGllc2AgZmxhZyBoYXMgYmVlbiBza2lwcGVkLgoKVGVzdAotLS0tCgpUbyBydW4gdGhlIHRlc3RzLCBleGVjdXRlCgogICAgbnBtIHRlc3QKCm9yIHRvIGNoZWNrIHRoZSBjb3ZlcmFnZQoKICAgIG5wbSBydW4gY292ZXJhZ2UK
    readmeEtag: '"04d7b6f49af144a9c31eed351983e54a8a79e0677810bba98ecb66317a6306ed"'
    readmeLastModified: Fri, 03 Dec 2021 17:05:30 GMT
    description: Validates embedded examples in Swagger-JSONs
    created: "2017-01-13T10:34:47Z"
    updated: "2022-04-12T07:30:57Z"
    language: JavaScript
    archived: false
    stars: 36
    watchers: 36
    forks: 8
    owner: codekie
    logo: https://avatars.githubusercontent.com/u/1512840?v=4
    license: MIT
    repoEtag: '"a6fa59a795c5e459f132f5e7f06961734a8fe6a029e0a8c0394185cefc2aeb76"'
    repoLastModified: Tue, 12 Apr 2022 07:30:57 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: openapi-format
  category:
    - Parsers
  repository: https://github.com/thim81/openapi-format
  link: https://www.npmjs.com/package/openapi-format
  language: Node.js
  source_description: >
    A CLI to format an OpenAPI document by ordering fields in a hierarchical
    order, with the option to filter out flags, tags, methods, operationIDs.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"38bc871606751a73c82ed8efb30179ad5691b7a8e053d8a5d12d28f57ccda639"'
    readmeLastModified: Thu, 17 Mar 2022 14:27:36 GMT
    description: Format an OpenAPI document by ordering, formatting and filtering fields.
    created: "2021-03-06T11:31:52Z"
    updated: "2022-04-24T11:12:59Z"
    language: JavaScript
    archived: false
    stars: 22
    watchers: 22
    forks: 3
    owner: thim81
    logo: https://avatars.githubusercontent.com/u/952446?v=4
    license: MIT
    repoEtag: '"80c1c2a971065f1322b23b279c9b15eebfaaf46b451c5447b620ab0764b6e5bf"'
    repoLastModified: Sun, 24 Apr 2022 11:12:59 GMT
  foundInMaster: true
- source:
    - https://openapi.tools/
    - openapi3 tags
  name: php-openapi-faker
  category:
    - miscellaneous
    - Parsers
  language: PHP
  repository: https://github.com/canvural/php-openapi-faker
  source_description: >-
    Library to generate fake data for OpenAPI 3.x requests, responses and
    schemas.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBwaHAtb3BlbmFwaS1mYWtlcgoKIVtUZXN0c10oaHR0cHM6Ly9naXRodWIuY29tL2NhbnZ1cmFsL3BocC1vcGVuYXBpLWZha2VyL3dvcmtmbG93cy9UZXN0cy9iYWRnZS5zdmcpClshW2NvZGVjb3ZdKGh0dHBzOi8vY29kZWNvdi5pby9naC9jYW52dXJhbC9waHAtb3BlbmFwaS1mYWtlci9icmFuY2gvbWFzdGVyL2dyYXBoL2JhZGdlLnN2ZyldKGh0dHBzOi8vY29kZWNvdi5pby9naC9jYW52dXJhbC9waHAtb3BlbmFwaS1mYWtlcikKWyFbSW5mZWN0aW9uIE1TSV0oaHR0cHM6Ly9iYWRnZS5zdHJ5a2VyLW11dGF0b3IuaW8vZ2l0aHViLmNvbS9jYW52dXJhbC9waHAtb3BlbmFwaS1mYWtlci9tYXN0ZXIpXShodHRwczovL2luZmVjdGlvbi5naXRodWIuaW8pClshW1BIUFN0YW5dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvUEhQU3Rhbi1MZXZlbCUyME1heC1icmlnaHRncmVlbi5zdmc/c3R5bGU9ZmxhdCZsb2dvPXBocCldKGh0dHBzOi8vcGhwc3Rhbi5vcmcpCgpMaWJyYXJ5IHRvIGdlbmVyYXRlIGZha2UgZGF0YSBmb3IgeW91ciBPcGVuQVBJIHJlcXVlc3RzLCByZXNwb25zZXMgYW5kIHNjaGVtYXMuCgpgYGBwaHAKJGZha2VyID0gXFZ1cmFsXE9wZW5BUElGYWtlclxPcGVuQVBJRmFrZXI6OmNyZWF0ZUZyb21Kc29uKCR5b3VyU2NoZW1hQXNKc29uKTsKJGZha2VEYXRhID0gJGZha2VyLT5tb2NrUmVzcG9uc2UoJy90b2RvcycsJ0dFVCcpOwpgYGAKCiMjIEluc3RhbGxhdGlvbgoKWW91IGNhbiBpbnN0YWxsIHRoZSBwYWNrYWdlIHZpYSBjb21wb3NlcjoKCmBgYGJhc2gKY29tcG9zZXIgcmVxdWlyZSAtLWRldiBjYW52dXJhbC9waHAtb3BlbmFwaS1mYWtlcgpgYGAKCiMjIFVzYWdlCgpGaXJzdCB5b3UgbmVlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYE9wZW5BUElGYWtlcmAgd2l0aCB5b3VyIHNjaGVtYSB0aGF0IHlvdSB3YW50IHRvIGZha2UgZGF0YSBmcm9tLgpgYGBwaHAKJGZha2VyID0gXFZ1cmFsXE9wZW5BUElGYWtlclxPcGVuQVBJRmFrZXI6OmNyZWF0ZUZyb21Kc29uKCR5b3VyU2NoZW1hQXNKc29uKTsKYGBgCgpUaGVuIHlvdSBjYW4gdXNlIGBtb2NrUmVzcG9uc2VgLCBgbW9ja1JlcXVlc3RgIGFuZCBgbW9ja1NjaGVtYWAgbWV0aG9kcyBvbiBpdCB0byBnZW5lcmF0ZSBmYWtlIGRhdGEgZm9yIHlvdXIgcmVxdWVzdHMsIHJlc3BvbnNlcyBhbmQgc2NoZW1hcy4gTGlrZSBzbzoKCmBgYHBocAokZmFrZURhdGEgPSAkZmFrZXItPm1vY2tSZXNwb25zZSgnL3RvZG9zJywnR0VUJyk7CmBgYAoKIyMjIE9wdGlvbnMKClRoZXJlIGFyZSBzb21lIG9wdGlvbnMgeW91IGNhbiB1c2UgdG8gbW9kaWZ5IHNvbWUgYmVoYXZpb3VyLiBZb3UgY2FuIHBhc3Mgb3B0aW9ucyBhcyBhbiBhc3NvY2lhdGl2ZSBhcnJheSB0byBgc2V0T3B0aW9uc2AgbWV0aG9kIGluIGBPcGVuQVBJRmFrZXJgLiBGb3IgZXhhbXBsZToKCmBgYHBocAokZmFrZXIgPSBcVnVyYWxcT3BlbkFQSUZha2VyXE9wZW5BUElGYWtlcjo6Y3JlYXRlRnJvbUpzb24oJHlvdXJTY2hlbWFBc0pzb24pCiAgICAtPnNldE9wdGlvbnMoWydtaW5JdGVtcycgPT4gNV0pOwpgYGAKCkJlbG93IHlvdSBjYW4gZmluZCBleHBsYW5hdGlvbiBmb3IgZWFjaCBvcHRpb24uCgojIyMjIGBtaW5JdGVtc2AKT3ZlcnJpZGVzIGBtaW5JdGVtc2AgcHJvcGVydHkgaWYgaXQncyBsZXNzIHRoYW4gdGhpcyB2YWx1ZS4KCiMjIyMgYG1heEl0ZW1zYApPdmVycmlkZSBgbWF4SXRlbXNgIGlmIGl0J3MgZ3JlYXRlciB0aGFuIHRoaXMgdmFsdWUuCgojIyMgYGFsd2F5c0Zha2VPcHRpb25hbHNgCgpJZiBlbmFibGVkLCBldmVyeSBwcm9wZXJ0eSBvciBpdGVtIHdpbGwgYmUgZ2VuZXJhdGVkIHJlZ2FyZGxlc3MgaWYgdGhleSBhcmUgcmVxdWlyZWQgb3Igbm90LiAqKkRlZmF1bHQqKjogYGZhbHNlYAoKIyMgQ2hhbmdlbG9nCgpQbGVhc2Ugc2VlIFtDSEFOR0VMT0ddKENIQU5HRUxPRy5tZCkgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gd2hhdCBoYXMgY2hhbmdlZCByZWNlbnRseS4KCiMjIENvbnRyaWJ1dGluZwoKUGxlYXNlIHNlZSBbQ09OVFJJQlVUSU5HXShDT05UUklCVVRJTkcubWQpIGZvciBkZXRhaWxzLgoKIyMgQ3JlZGl0cwoKUGVvcGxlOgotIFtDYW4gVnVyYWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYW52dXJhbCkKLSBbQWxsIENvbnRyaWJ1dG9yc10oLi4vLi4vY29udHJpYnV0b3JzKQoKUmVzb3VyY2VzOgotIFtjZWJlL3BocC1vcGVuYXBpXShodHRwczovL2dpdGh1Yi5jb20vY2ViZS9waHAtb3BlbmFwaSkKLSBbbGVhZ3VlL29wZW5hcGktcHNyNy12YWxpZGF0b3JdKGh0dHBzOi8vZ2l0aHViLmNvbS90aGVwaHBsZWFndWUvb3BlbmFwaS1wc3I3LXZhbGlkYXRvcikKCiMjIExpY2Vuc2UKClRoZSBNSVQgTGljZW5zZSAoTUlUKS4gUGxlYXNlIHNlZSBbTGljZW5zZSBGaWxlXShMSUNFTlNFLm1kKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4K
    readmeEtag: '"5079ebdb232dba76ec242501e178d923bca52d8d254490aefbb1b8b212a4e801"'
    readmeLastModified: Thu, 21 Apr 2022 05:41:37 GMT
    description: Library to generate fake data for OpenAPI request/response/schemas
    created: "2020-06-12T14:31:49Z"
    updated: "2022-03-28T09:29:22Z"
    language: PHP
    archived: false
    stars: 79
    watchers: 79
    forks: 2
    owner: canvural
    logo: https://avatars.githubusercontent.com/u/1574232?v=4
    license: MIT
    repoEtag: '"a11208b44d3bd55c644b73eb9a58656f6c7d45585cf45aa4997aa467135e45e2"'
    repoLastModified: Mon, 28 Mar 2022 09:29:22 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: JSON Designer
  category: gui-editors
  link: http://jsondesigner.com
  language:
    - iOS
    - Swift
  source_description: >-
    Visualize JSON models from imported OpenAPI YAML. Edit models and export
    OpenAPI YAML.
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: vREST NG
  category: testing
  language: JavaScript
  link: https://ng.vrest.io
  repository: null
  source_description: >-
    vREST NG is a simple and powerful application for API Automation. It Allows
    to use OpenAPI specification into vREST NG to drive your API testing that
    validates the API responses against JSON Schema and also provides powerful
    response validation capabilities.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Goa
  category: dsl
  language: Go
  source_description: >-
    Goa provides a holistic approach for developing remote APIs and
    microservices in Go. implementers don't have to worry about the
    documentation getting out of sync as Goa takes care of generating OpenAPI
    specifications for HTTP based services and gRPC protocol buffer files for
    gRPC based services
  link: https://goa.design
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Django REST Framework
  category:
    - miscellaneous
    - Server Implementations
  language: Python
  link: https://www.django-rest-framework.org/api-guide/schemas/
  repository: https://github.com/encode/django-rest-framework
  source_description: >
    Automates generation of OpenAPI 3 description documents either as a static
    file (via CLI command) or a dynamic view within the Django REST Framework
    (DRF) application.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"076ab3a71ef42058e8a7ec697b172a2a1f9a217c1380001c3aecfd3f4366fb07"'
    readmeLastModified: Sun, 24 Apr 2022 22:16:18 GMT
    description: Web APIs for Django. 🎸
    created: "2011-03-02T17:13:56Z"
    updated: "2022-04-28T09:11:16Z"
    language: Python
    archived: false
    stars: 23276
    watchers: 23276
    forks: 6135
    owner: encode
    logo: https://avatars.githubusercontent.com/u/19159390?v=4
    license: NOASSERTION
    repoEtag: '"bae8732d1fe65e35c92d67845d2a6906ef1cff0807af97db9bf17619766ab96a"'
    repoLastModified: Thu, 28 Apr 2022 09:11:16 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: ReadyAPI
  category: testing
  language: Java
  source_description: >
    an end to end API functional, security, performance and virtualization tool
    where OAS description documents can be utilized to automate the creation and
    validation of end to end tests, running them manually or at any point in
    your CI/CD pipeline. pipelines.
  v2: true
  v3: true
  v3_1: false
  link: https://smartbear.com/product/ready-api/overview/
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: DeveloperHub
  category: documentation
  link: https://developerhub.io
  language: SaaS
  source_description: Collaboration platform for product and API documentation
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: OAuth2 as OpenAPI Spec 3.0 components
  category:
    - miscellaneous
    - Parsers
  language: Any
  repository: https://github.com/ybelenko/oauth2_as_oas3_components
  source_description: >-
    OAuth2 token endpoint described with OAS3 schema. All grants documented. Can
    be installed as NPM or Composer package.
  v2: false
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPQXV0aDIgYXMgT3BlbkFQSSBTcGVjIDMuMCBjb21wb25lbnRzCgpUaGUgZXhhbXBsZSBmaWxlIHdoaWNoIGRlc2NyaWJlcyBPQXV0aDIgdG9rZW4gZW5kcG9pbnRzIGxvY2F0ZWQgW2Rpc3Qvb2F1dGgyX2VuZHBvaW50cy55bWxdKGRpc3Qvb2F1dGgyX2VuZHBvaW50cy55bWwpLgoKIyMgV2h5IHRoaXMgcGFja2FnZSBleGlzdHMKU2luY2UgW1JGQyA2NzQ5IE9BdXRoMl0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDkpIHNlcnZlciBpbXBsZW1lbnRhdGlvbiBtYXkgYmUgdmVyeSBkaWZmZXJlbnQob3B0aW9uYWwvcmVjb21tZW5kZWQgcmVzcG9uc2UgZmllbGRzLCBleHRlbmRlZCBncmFudCkgaXQgbWlnaHQgbWUgdXNlZnVsIHRvIGRlc2NyaWJlIHlvdXIgdW5pcXVlIGltcGxlbWVudGF0aW9uIHdpdGhpbiB5b3VyIE9BUzMgZmlsZS4gSXQncyBhbHNvIHZlcnkgaGFuZHkgdG8gc2VlIGV4YW1wbGVzIG9mIHlvdXIgdG9rZW4gYW5kIGVycm9yIHJlc3BvbnNlLCBiZWNhdXNlIFJGQzY3NDkgaXMgYSB0ZXh0IGRvY3VtZW50IHdpdGhvdXQgYW55IHBpY3R1cmVzIG9yIGdyYXBocy4gVGhlIGV4YW1wbGUgZmlsZSBtZW50aW9uZWQgYmVmb3JlIGNvbnRhaW5zIGRlc2NyaXB0aW9uIG9mIHRva2VuIGVuZHBvaW50cyBmb3IgZWFjaCBhdXRob3JpemF0aW9uIGdyYW50LCBjb25zaWRlciBpdCBhcyBzdGFydGluZyBwb2ludC4KCkV4YW1wbGUgZmlsZSBvbWl0cyBbYXV0aG9yaXphdGlvbiBlbmRwb2ludF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDkjc2VjdGlvbi0zLjEpIGVuZHBvaW50IG9uIHB1cnBvc2UuIEkgZG9uJ3Qga25vdyBob3cgdG8gZGVzY3JpYmUgaXQgd2l0aCBPQVMzIHNpbmNlIGVuZHBvaW50IHJlc3BvbnNlIGlzbid0IEpTT04oaHRtbCBwYWdlKS4gSWYgeW91IGhhdmUgYW55IHN1Z2dlc3Rpb24gcGxlYXNlIHN1Ym1pdCBhbiBpc3N1ZSB0byB0aGlzIHJlcG8uCgpTaW5jZSBbUkZDIDY3NDkgLSBUaGUgT0F1dGgyLjAgQXV0aG9yaXphdGlvbiBGcmFtZXdvcmsgLSAyLjMuMS4gQ2xpZW50IFBhc3N3b3JkXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjc0OSNzZWN0aW9uLTIuMy4xKSBkb2Vzbid0IHJlY29tbWVuZCB0byBzZW5kIGNsaWVudCBwYXNzd29yZCBpbiByZXF1ZXN0IGJvZHkgdGhlbiBvdXIgZXhhbXBsZSBleHBlY3RzIGJhc2ljIGF1dGhvcml6YXRpb24gaW4gYWxsIGVuZHBvaW50cy4KCiMjIEluc3RhbGxhdGlvbgoKIyMjIENvcHkgUGFzdGUKU2luY2UgaXQncyBub3QgYWN0dWFsbHkgYSBjb2RlLCBidXQgbWFya3VwIHlvdSBjYW4ganVzdCBjb3B5IGFueXRoaW5nIHlvdSB3YW50IGZyb20gW2Rpc3Qvb2F1dGgyX2VuZHBvaW50cy55bWxdKGRpc3Qvb2F1dGgyX2VuZHBvaW50cy55bWwpLgoKVGhlcmUgaXMgYWxzbyBlbmhhbmNlZCBleGFtcGxlIHdpdGggcG9seW1vcnBoaXNtIGF0IFtkaXN0L29hdXRoMl9lbmRwb2ludHNfcG9seW1vcnBoaXNtLnltbF0oZGlzdC9vYXV0aDJfZW5kcG9pbnRzX3BvbHltb3JwaGlzbS55bWwpLiAqKlBsZWFzZSwgbWFrZSBzdXJlIHRoYXQgeW91ciB0b29scyBzdXBwb3J0cyBwb2x5bW9ycGhpc20uIFRoaXMgZXhhbXBsZSBjb250YWlucyBuZXcgZmVhdHVyZXMgbm90IGhpZ2hseSBhZG9wdGVkIHlldC4gQ2hlY2sgYXQgbGVhc3QgYG9uZU9mYCBwcm9wZXJ0eSBzdXBwb3J0LiBJIHdvdWxkbid0IHVzZSBpdCBteXNlbGYgYmVjYXVzZSBtb3N0IG9mIHRoZSBPcGVuQVBJIHRvb2xzIGhhdmUgaXNzdWVzIHdpdGggcG9seW1vcnBoaXNtIG5vdywgYnV0IHRoaXMgZXhhbXBsZSBtYXkgYmUgdXNlZnVsIGluIGZvcnNlZWFibGUgZnV0dXJlLioqCgojIyMgQ29tcG9zZXIKSW5zdGFsbCBbQ29tcG9zZXIgLSBEZXBlbmRlbmN5IE1hbmFnZXIgZm9yIFBIUF0oaHR0cHM6Ly9nZXRjb21wb3Nlci5vcmcvZG93bmxvYWQvKQoKVGhlbiBydW4gaW4gdGVybWluYWw6CmBgYGNvbnNvbGUKY29tcG9zZXIgcmVxdWlyZSB5YmVsZW5rby9vYXV0aDJfYXNfb2FzM19jb21wb25lbnRzCmBgYAoKVXNlIHByb3ZpZGVkIGNvbXBvbmVudHMgdmlhIGAkcmVmYCBhdHRyaWJ1dGUgbGlrZToKCmBgYHlhbWwKcGF0aHM6CiAgL3Rva2VuOgogICAgcG9zdDoKICAgICAgc3VtbWFyeTogT2J0YWluIGFjY2VzcyB0b2tlbiB3aXRoICJhdXRob3JpemF0aW9uX2NvZGUiIGdyYW50LgogICAgICByZXF1ZXN0Qm9keToKICAgICAgICAkcmVmOiAnLi92ZW5kb3IveWJlbGVua28vb2F1dGgyX2FzX29hczNfY29tcG9uZW50cy9kaXN0L2NvbXBvbmVudHMvcmVxdWVzdEJvZGllcy9Ub2tlblJlcXVlc3RDb2RlR3JhbnQueW1sJwogICAgICByZXNwb25zZXM6CiAgICAgICAgJzIwMCc6CiAgICAgICAgICAkcmVmOiAnLi92ZW5kb3IveWJlbGVua28vb2F1dGgyX2FzX29hczNfY29tcG9uZW50cy9kaXN0L2NvbXBvbmVudHMvcmVzcG9uc2VzL09BdXRoMlRva2VuU3VjY2Vzc1Jlc3BvbnNlLnltbCcKICAgICAgICAnNFhYJzoKICAgICAgICAgICRyZWY6ICcuL3ZlbmRvci95YmVsZW5rby9vYXV0aDJfYXNfb2FzM19jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9yZXNwb25zZXMvT0F1dGgyVG9rZW5FcnJvclJlc3BvbnNlLnltbCcKYGBgCgpFeHRlbmRlZCBleGFtcGxlIHdpdGggcmVmcyBbZGlzdC9vYXV0aDJfZW5kcG9pbnRzX3dpdGhfcmVmcy55bWxdKGRpc3Qvb2F1dGgyX2VuZHBvaW50c193aXRoX3JlZnMueW1sKQoKIyMjIE5QTQpbSW5zdGFsbCBOUE0gYW5kIE5vZGUuanNdKGh0dHBzOi8vZG9jcy5ucG1qcy5jb20vZG93bmxvYWRpbmctYW5kLWluc3RhbGxpbmctbm9kZS1qcy1hbmQtbnBtKQoKVGhlbiBydW4gaW4gdGVybWluYWw6CmBgYGNvbnNvbGUKbnBtIGkgLS1zYXZlIG9hdXRoMl9hc19vYXMzX2NvbXBvbmVudHMKYGBgCgpVc2UgcHJvdmlkZWQgY29tcG9uZW50cyB2aWEgYCRyZWZgIGF0dHJpYnV0ZSBsaWtlOgoKYGBgeWFtbApwYXRoczoKICAvdG9rZW46CiAgICBwb3N0OgogICAgICBzdW1tYXJ5OiBPYnRhaW4gYWNjZXNzIHRva2VuIHdpdGggImF1dGhvcml6YXRpb25fY29kZSIgZ3JhbnQuCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgICRyZWY6ICcuL25vZGVfbW9kdWxlcy9vYXV0aDJfYXNfb2FzM19jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9yZXF1ZXN0Qm9kaWVzL1Rva2VuUmVxdWVzdENvZGVHcmFudC55bWwnCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAnMjAwJzoKICAgICAgICAgICRyZWY6ICcuL25vZGVfbW9kdWxlcy9vYXV0aDJfYXNfb2FzM19jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9yZXNwb25zZXMvT0F1dGgyVG9rZW5TdWNjZXNzUmVzcG9uc2UueW1sJwogICAgICAgICc0WFgnOgogICAgICAgICAgJHJlZjogJy4vbm9kZV9tb2R1bGVzL29hdXRoMl9hc19vYXMzX2NvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL3Jlc3BvbnNlcy9PQXV0aDJUb2tlbkVycm9yUmVzcG9uc2UueW1sJwpgYGAKCkV4dGVuZGVkIGV4YW1wbGUgd2l0aCByZWZzIFtkaXN0L29hdXRoMl9lbmRwb2ludHNfd2l0aF9yZWZzLnltbF0oZGlzdC9vYXV0aDJfZW5kcG9pbnRzX3dpdGhfcmVmcy55bWwpCgojIyBDb250cmlidXRpbmcKCklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBwbGVhc2Ugc3VibWl0IGFuIGlzc3VlLgoKIyMgTGljZW5zZQpbTUlUIExpY2Vuc2VdKExJQ0VOU0UpCg==
    readmeEtag: '"2dac335026c09589bb1b8ee7826118cabd036171e30556afaedaf86fdd2d85fb"'
    readmeLastModified: Tue, 20 Apr 2021 20:45:12 GMT
    description: OAuth2 definitions as OpenAPI Spec 3.0 components
    created: "2021-04-16T09:35:37Z"
    updated: "2022-03-21T18:11:33Z"
    language: null
    archived: false
    stars: 2
    watchers: 2
    forks: 1
    owner: ybelenko
    logo: https://avatars.githubusercontent.com/u/5541023?v=4
    license: MIT
    repoEtag: '"9ca7380db251abb8d673dac950b8644bcda2b65e58f9ed3002e2bccbefaf3360"'
    repoLastModified: Mon, 21 Mar 2022 18:11:33 GMT
  foundInMaster: true
- source: https://openapi.tools/
  name: Mayhem for API
  category: testing
  link: https://forallsecure.com/mayhem-for-api
  language: Any
  source_description: >-
    Probe your REST API with an infinite stream of test cases generated
    automatically from your OpenAPI specification.
  v2: true
  v3: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: Meta-API
  category: miscellaneous
  link: https://www.meta-api.io
  language: SaaS
  source_description: >-
    A SaaS platform to integrate APIs using OpenAPI documents, and manipulation
    of data with online code editor, and automating configuration,
    authentication, deployment and monitoring.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: BlocklyAutomation
  category:
    - Code Generators
    - Sdk
    - Documentation
    - Testing
  link: https://ignatandrei.github.io/BlocklyAutomation/
  repository: http://github.com/ignatandrei/blocklyautomation
  language:
    - Javascript
    - .NET
  source_description: >-
    Input any OpenAPI document to have generated Blocks in Blockly form to test
    and generate documentation.
  v3: true
  v3_1: true
  repositoryMetadata:
    base64Readme: >-
      IyBCbG9ja2x5QXV0b21hdGlvbgo8IS0tIEFMTC1DT05UUklCVVRPUlMtQkFER0U6U1RBUlQgLSBEbyBub3QgcmVtb3ZlIG9yIG1vZGlmeSB0aGlzIHNlY3Rpb24gLS0+ClshW0FsbCBDb250cmlidXRvcnNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvYWxsX2NvbnRyaWJ1dG9ycy0yLW9yYW5nZS5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUpXSgjY29udHJpYnV0b3JzLSkKPCEtLSBBTEwtQ09OVFJJQlVUT1JTLUJBREdFOkVORCAtLT4KCkJsb2NrbHkgQXV0b21hdGlvbiA6ICBpcyBhIHRvb2wgZm9yIExvd0NvZGUgLyBhdXRvbWF0aW9uIG9mIHNpdGVzIChTd2FnZ2VyIC8gT3BlbkFQSSAvIFJQQSApIGFuZCBQQyBtYWRlIG9mIEJsb2NrbHkuIAoKIyBIb3cgdG8gdXNlIGlmIHlvdSBhcmUKCiMjIGEgYmFja2VuZCBkZXZlbG9wZXIgd2l0aCBhbiBSRVNUIC8gT3BlbkFQSSAvIFN3YWdnZXIgZW5hYmxlZCBzaXRlIGFuZCBJIHdhbnQgdG8gc2hvdyB0aGUgdXNlIG9mIG15IHNpdGUKCgpVc2UgdGhlIGFwcHJvcGlhdGUgcGFja2FnZToKCi5ORVQgQ29yZTogIVtOdWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC9kdC9OZXRDb3JlMkJsb2NrbHkpCgpOb2RlOiAhW25wbV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vdi9ub2RlMi1ibG9ja2x5KQoKb3IKCkRvd25sb2FkIHRoZSBIVE1MIHJlbGVhc2UgW0Jsb2NrbHlBdXRvbWF0aW9uXShodHRwczovL2dpdGh1Yi5jb20vaWduYXRhbmRyZWkvQmxvY2tseUF1dG9tYXRpb24vcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3JlbGVhc2VCbG9ja2x5QXV0b21hdGlvbi56aXAvKSAuCgpGb2xsb3cgdGhlIGluc3RydWN0aW9ucyBpbiB0aGUgd2lraSBmaWxlLiAgCgoKIyMgYSBmcm9udGVuZCAgZGV2ZWxvcGVyIHRoYXQgZmluZHMgYSBidWcgaW4gYSBSRVNUIC8gT3BlbkFQSSAvIFN3YWdnZXIgZW5hYmxlZCBzaXRlCgpZb3Ugd2FudCB0byBzaG93IHRvIHRoZSBiYWNrZW5kIGRldmVsb3BlciBob3cgdG8gcmVwcm9kdWNlIHRoZSBwcm9ibGVtIC4KCklmIHlvdSBjb250cm9sIHRoZSBzaXRlICwgdGhlbiB5b3UgY2FuIHVzZSB0aGUgW0Jsb2NrbHlBdXRvbWF0aW9uXShodHRwczovL2dpdGh1Yi5jb20vaWduYXRhbmRyZWkvQmxvY2tseUF1dG9tYXRpb24vcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3JlbGVhc2VCbG9ja2x5QXV0b21hdGlvbi56aXAvKSB0byByZXByb2R1Y2UgdGhlIHByb2JsZW0uCgpGb2xsb3cgdGhlIGluc3RydWN0aW9ucyBpbiB0aGUgd2lraSBmaWxlLiAgCgpJZiB5b3UgZG8gbm90IGNvbnRyb2wgdGhlIHNpdGUsIHRoZW4gaW5zdGFsbCB0aGUgYXBwbGljYXRpb24gZnJvbSBodHRwOi8vYmEuc2VydmljaWlwZXdlYi5yby8gYW5kIHRoZW4gdXNlIGl0IHRvIHJlcHJvZHVjZSB0aGUgcHJvYmxlbS4gKCB3aWtpIHNpdGUgY29taW5nIHdpdGggZGV0YWlscykgCgojIyBhIHdlYiBzaXRlIGFwcGxpY2F0aW9uIHRlc3RlcgpJZiB5b3UgY29udHJvbCB0aGUgc2l0ZSAsIHRoZW4gY2FuIHVzZSB0aGUgaHR0cHM6Ly9naXRodWIuY29tL2lnbmF0YW5kcmVpL0Jsb2NrbHlBdXRvbWF0aW9uL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9yZWxlYXNlQmxvY2tseUF1dG9tYXRpb24uemlwLyAgYW5kIHRoZW4gdXNlIGl0IHRvIHJlcHJvZHVjZSB0aGUgcHJvYmxlbS4gKCB3aWtpIHNpdGUgY29taW5nIHdpdGggZGV0YWlscykgLgoKSWYgeW91IGRvZXMgbm90IGNvbnRyb2wgdGhlIHNpdGUsIHRoZW4gaW5zdGFsbCB0aGUgYXBwbGljYXRpb24gZnJvbSBodHRwOi8vYmEuc2VydmljaWlwZXdlYi5yby8gYW5kIHRoZW4gdXNlIGl0IHRvIG1ha2UgdGVzdCBjYXNlcy4gKCB3aWtpIHNpdGUgY29taW5nIHdpdGggZGV0YWlscykgCgoKIyMgbm90IGEgcHJvZ3JhbW1lci4gIEkgd2FudCB0byBhdXRvbWF0ZS9nYXRoZXIgZGF0YSBmcm9tIHNldmVyYWwgc2l0ZXMgKCBwdWJsaWMgb3IgcHJpdmF0ZSApCgpZb3Ugd2FudCB0byBvYnRhaW4gc29tZSBkYXRhIGZyb20gdGhlIHdlYi4gRm9yIGV4YW1wbGUsIGV4dHJhY3QgdGhlIGV4Y2hhbmdlIGJldHdlZW4gRVVSIC8gUk9OIC4KCkluc3RhbGwgdGhlIGFwcGxpY2F0aW9uIGZyb20gaHR0cDovL2JhLnNlcnZpY2lpcGV3ZWIucm8vIC4KCkZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIGluIHRoZSB3aWtpIGZpbGUuCgoKIyMgbm90IGEgcHJvZ3JhbW1lciBhbmRJIHdhbnQgdG8gYXV0b21hdGUgdGhpbmdzIG9uIG15IFBDLiAKCllvdSB3YW50IHRvIG9idGFpbiBzb21lIGRhdGEgZnJvbSB5b3VyIFBDLiBGb3IgZXhhbXBsZSwgZXh0cmFjdCBhbmQgZXhwb3J0IHRvIENTViB0aGUgQ2hyb21lIEJvb2ttYXJrcy4KCkluc3RhbGwgdGhlIGFwcGxpY2F0aW9uIGZyb20gaHR0cDovL2JhLnNlcnZpY2lpcGV3ZWIucm8vIC4KCkZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIGluIHRoZSB3aWtpIGZpbGUuCgoKCiMjIFN1Z2dlc3QgYSBwdWJsaWMgQVBJIGZvciBCbG9ja2x5QXV0b21hdGlvbgoKSWYgeW91IGhhdmUgYSBwdWJsaWMgQVBJL3NpdGUgdGhhdCB5b3Ugd2FudCB0byBhdXRvbWF0ZSwgcGxlYXNlIHNlbmQgZmlsZSBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vaWduYXRhbmRyZWkvQmxvY2tseUF1dG9tYXRpb24vaXNzdWVzIAoKCiMjIEhvdyB0byBzZWUgYSBwcmV2aWV3CgoKVG8gc2VlIHRoZSB3aG9sZSBwb3RlbnRpYWwgLCBwbGVhc2UgZ28gdG8gaHR0cDovL2JhLnNlcnZpY2lpcGV3ZWIucm8vIGFuZCBjbGljayBMYXVuY2ggLgoKSWYgeW91IHdhbnQgdG8gc2VlIHNvbWUgd2ViIERlbW8gLCBwbGVhc2UgZ28gdG8gaHR0cHM6Ly9pZ25hdGFuZHJlaS5naXRodWIuaW8vQmxvY2tseUF1dG9tYXRpb24vIGFuZCB0ZXN0IHZhcmlvdXMgSFRUUCByZXF1ZXN0LCBTd2FnZ2VycyBhbmQgbW9yZQoKIyMgSG93IHRvIGluc3RhbGwgb24geW91ciBQQwoKU2VlIFtyZWxlYXNlcyB0YWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9pZ25hdGFuZHJlaS9CbG9ja2x5QXV0b21hdGlvbi9yZWxlYXNlcykKCllvdSBjYW4gZmluZCB0aGUgCgoxLiBBbmd1bGFyIHNpdGUgLCByZWFkeSB0byBiZSBkZXBsb3llZCB0byBhbnkgc2VydmVyCjIuIElJUyBzaXRlICAgLCByZWFkeSB0byBiZSBkZXBsb3llZCBvbiBJSVMKMy4gQSAuTkVUIENvcmUgc2l0ZSwgcmVhZHkgdG8gYmUgZGVwbG95ZWQgb24gTGludXggb3IgV2luZG93cywgc3RhbmRhbG9uZSAoIGFzIGEgc2VydmljZSApCgojIFlvdSBoYXZlIGEgc2l0ZSB3aXRoIE9wZW5BUEkgLyBTd2FnZ2VyLiBXaGF0IHNob3VsZCBJIGRvICA/CgpEb3dubG9hZCBmcm9tIFtyZWxlYXNlcyB0YWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9pZ25hdGFuZHJlaS9CbG9ja2x5QXV0b21hdGlvbi9yZWxlYXNlcykgdGhlIEFuZ3VsYXIgc2l0ZS4gUHV0IGluZGV4Lmh0bWwgYW5kIGFsbCBvdGhlciBmaWxlcyBpbnRvIGEgQkxvY2tseUF1dG9tYXRpb24gZm9sZGVyIGluc2lkZSB5b3VyIHd3d3Jvb3QgIGZvbGRlciAoIG9yIGluIHlvdXIgcHJvamVjdCByb290ICkgYW5kIHlvdSBhcmUgZ29vZCB0byBnby4KCjEuIEl0IGNvdWxkIGJlIGFuIGlkZWEgdG8gbWFwIGV2ZXJ5dGhpbmcgdGhhdCBzdGFydCB3aXRoIC9CbG9ja2x5QXV0b21hdGlvbiB0byAvQmxvY2tseUF1dG9tYXRpb24vaW5kZXguaHRtbCAtIHNlZSBzcmNcTG9hZGVyc1xTaW1wbGVTaXRlIHRvIGhhdmUgYW4gQyMgZXhhbXBsZSAKICAgCjIuIE1vZGlmeSBhc3NldHMvc2V0dGluZ3MuanNvbiB0byBjaGFuZ2UgdGhlIG5hbWUgYW5kIHRoZSBzdGFydGluZyBibG9ja3MKICAgCjMuIE1vZGlmeSBhc3NldHMvbG9hZEF0U3RhcnR1cC9zd2FnZ2Vycy5qc29uIHRvIGFkZCB5b3VyIHN3YWdnZXJzCgo0LiBNb2RpZnkgYXNzZXRzL3Nob3dVc2FnZS9kZW1vQmxvY2tzL2FsbC50eHQgdG8gYWRkIHlvdXIgZGVtbyBmb3IgdGhlIGJsb2NrcyAuIAogICAoIFlvdSBjYW4gY29uc3RydWN0IGFuZCB0aGVuIGRvd25sb2FkIGFuZCBzYXZlIGFzIGZpbGVzKQoKNS4gU2VuZCBtZSBhbiBlbWFpbCB0byBoZWxwIHlvdSAgaWYgc29tZXRoaW5nICBpcyBub3Qgd29ya2luZy4KIyMgSG93IHRvIGN1c3RvbWl6ZQoKVG8gY3VzdG9taXplIHRoZSB0aXRsZSAsIGludHJvZHVjdGlvbiBhbmQgc3RhcnQgYmxvY2tzICwgc2VlIGFzc2V0cy9zZXR0aW5ncy5qc29uCgpUbyBsb2FkIHN3YWdnZXJzIGF0IHN0YXJ0dXAsIHNlZSAgYXNzZXRzL2xvYWRBdFN0YXJ0dXAvc3dhZ2dlcnMuanNvbgoKVG8gY3VzdG9taXplIGRlbW8gYmxvY2tzLGRvd25sb2FkIHlvdXIgYmxvY2tzLCBwdXQgdGhlIHR4dCBmaWxlIGluICBhc3NldHMvc2hvd1VzYWdlL2RlbW9CbG9ja3MvIGFuZCBtb2RpZnkgYXNzZXRzL3Nob3dVc2FnZS9kZW1vQmxvY2tzL2FsbC50eHQKCiMjICBIb3cgdG8gY29udHJpYnV0ZQoKSWYgeW91IGFyZSBhIGJlZ2lubmVyIHRvIGJsb2NrbHksIHNlZSAKCmh0dHBzOi8vZ2l0aHViLmNvbS9pZ25hdGFuZHJlaS9CbG9ja2x5QXV0b21hdGlvbi9pc3N1ZXM/cT1pcyUzQWlzc3VlK2lzJTNBb3BlbitsYWJlbCUzQSUyMmdvb2QrZmlyc3QraXNzdWUlMjIKCiFbR2l0SHViIGlzc3VlcyBieS1sYWJlbF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvaXNzdWVzL2lnbmF0YW5kcmVpL0Jsb2NrbHlBdXRvbWF0aW9uL2dvb2QlMjBmaXJzdCUyMGlzc3VlKQoKWW91IHdpbGwgYmUgbWVudGlvbmVkIGJlbG93IDstKQoKCiMjIENvbnRyaWJ1dG9ycyDinKgKClRoYW5rcyBnb2VzIHRvIHRoZXNlIHdvbmRlcmZ1bCBwZW9wbGUgKFtlbW9qaSBrZXldKGh0dHBzOi8vYWxsY29udHJpYnV0b3JzLm9yZy9kb2NzL2VuL2Vtb2ppLWtleSkpOgoKPCEtLSBBTEwtQ09OVFJJQlVUT1JTLUxJU1Q6U1RBUlQgLSBEbyBub3QgcmVtb3ZlIG9yIG1vZGlmeSB0aGlzIHNlY3Rpb24gLS0+CjwhLS0gcHJldHRpZXItaWdub3JlLXN0YXJ0IC0tPgo8IS0tIG1hcmtkb3dubGludC1kaXNhYmxlIC0tPgo8dGFibGU+CiAgPHRyPgogICAgPHRkIGFsaWduPSJjZW50ZXIiPjxhIGhyZWY9Imh0dHBzOi8vYWVueXgtZGVzaWducy5jb20vIj48aW1nIHNyYz0iaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzMzMTk2MzQxP3Y9ND9zPTEwMCIgd2lkdGg9IjEwMHB4OyIgYWx0PSIiLz48YnIgLz48c3ViPjxiPkJvZ2RhbiBCb2JlPC9iPjwvc3ViPjwvYT48YnIgLz48YSBocmVmPSIjZGVzaWduLWFyZWFsc2hhZG93IiB0aXRsZT0iRGVzaWduIj7wn46oPC9hPiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaWduYXRhbmRyZWkvQmxvY2tseUF1dG9tYXRpb24vY29tbWl0cz9hdXRob3I9YXJlYWxzaGFkb3ciIHRpdGxlPSJDb2RlIj7wn5K7PC9hPjwvdGQ+CiAgICA8dGQgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Fkcmlhbi1iYWR1bGVzY3UiPjxpbWcgc3JjPSJodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvNDk0OTA5NDY/dj00P3M9MTAwIiB3aWR0aD0iMTAwcHg7IiBhbHQ9IiIvPjxiciAvPjxzdWI+PGI+QWRyaWFuIEJhZHVsZXNjdTwvYj48L3N1Yj48L2E+PGJyIC8+PGEgaHJlZj0iI2V4YW1wbGUtYWRyaWFuLWJhZHVsZXNjdSIgdGl0bGU9IkV4YW1wbGVzIj7wn5KhPC9hPjwvdGQ+CiAgPC90cj4KPC90YWJsZT4KCjwhLS0gbWFya2Rvd25saW50LXJlc3RvcmUgLS0+CjwhLS0gcHJldHRpZXItaWdub3JlLWVuZCAtLT4KCjwhLS0gQUxMLUNPTlRSSUJVVE9SUy1MSVNUOkVORCAtLT4KClRoaXMgcHJvamVjdCBmb2xsb3dzIHRoZSBbYWxsLWNvbnRyaWJ1dG9yc10oaHR0cHM6Ly9naXRodWIuY29tL2FsbC1jb250cmlidXRvcnMvYWxsLWNvbnRyaWJ1dG9ycykgc3BlY2lmaWNhdGlvbi4gQ29udHJpYnV0aW9ucyBvZiBhbnkga2luZCB3ZWxjb21lIQ==
    readmeEtag: '"c0460b205dfb68ee641c0ca760ddb4eb4bdcb77dcf95599796875d190d0ce35a"'
    readmeLastModified: Mon, 14 Mar 2022 05:59:38 GMT
    description: BLockly for automation
    created: "2021-11-11T17:14:47Z"
    updated: "2022-03-20T15:00:02Z"
    language: JavaScript
    archived: false
    stars: 6
    watchers: 6
    forks: 3
    owner: ignatandrei
    logo: https://avatars.githubusercontent.com/u/153982?v=4
    license: MIT
    repoEtag: '"6bd9454127e8189797a22277abc1fd373b78af7a2cf82ab998cbe9b1373f565c"'
    repoLastModified: Sun, 20 Mar 2022 15:00:02 GMT
  foundInMaster: true
- source:
    - openapi3 tags
    - openapi31 tags
  repository: https://github.com/redocly/create-openapi-repo
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"4e532a650c22c83e4fa44d8f83c3a3f52b073e7dacc69be398cb0c8b28447dc3"'
    readmeLastModified: Thu, 17 Mar 2022 08:48:44 GMT
    description: >-
      🤖 Generator for GH repo to help you manage the OpenAPI definition
      lifecycle
    created: "2016-05-16T22:45:23Z"
    updated: "2022-04-28T03:40:38Z"
    language: JavaScript
    archived: false
    stars: 593
    watchers: 593
    forks: 105
    owner: Redocly
    logo: https://avatars.githubusercontent.com/u/32099856?v=4
    license: MIT
    repoEtag: '"6181cb4a58dcf26786d051283e20cc80ad92495eb385a7a673b47e253c3e1a38"'
    repoLastModified: Thu, 28 Apr 2022 03:40:38 GMT
  foundInMaster: true
  v3_1: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/ronnypfannschmidt/prance
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"b0bc8d7c0bb20fa6dc3692e69de8517c9e2cfa36bfd91f05730fc865bc9947bb"'
    readmeLastModified: Fri, 26 Nov 2021 10:06:22 GMT
    description: Resolving Swagger/OpenAPI 2.0 and 3.0 Parser
    created: "2016-09-08T10:23:39Z"
    updated: "2022-04-20T15:49:13Z"
    language: Python
    archived: false
    stars: 179
    watchers: 179
    forks: 30
    owner: RonnyPfannschmidt
    logo: https://avatars.githubusercontent.com/u/156838?v=4
    license: NOASSERTION
    repoEtag: '"0971ce1103c33efe47a50f665442494ad389279ac522d23732d75f9366d9db21"'
    repoLastModified: Wed, 20 Apr 2022 15:49:13 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/swagger-api/validator-badge
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTd2FnZ2VyIFZhbGlkYXRvciBCYWRnZSA8aW1nIHNyYz0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N3YWdnZXItYXBpL3N3YWdnZXIuaW8vd29yZHByZXNzL2ltYWdlcy9hc3NldHMvU1ctbG9nby1jbHIucG5nIiBoZWlnaHQ9IjUwIiBhbGlnbj0icmlnaHQiPgoKWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2plbmtpbnMvYnVpbGQuc3ZnP2pvYlVybD1odHRwczovL2plbmtpbnMuc3dhZ2dlci5pby9qb2Ivb3NzLXN3YWdnZXItdmFsaWRhdG9yLWJhZGdlLW1hc3RlcildKGh0dHBzOi8vamVua2lucy5zd2FnZ2VyLmlvL3ZpZXcvT1NTJTIwLSUyMEphdmEvam9iL29zcy1zd2FnZ2VyLXZhbGlkYXRvci1iYWRnZS1tYXN0ZXIpCgpUaGlzIHByb2plY3Qgc2hvd3MgYSAidmFsaWQgc3dhZ2dlciIgYmFkZ2Ugb24geW91ciBzaXRlLCBzdXBwb3J0aW5nIFN3YWdnZXIvT3BlbkFQSSAyLjAgYW5kIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb25zLiAgCgpUaGVyZSBpcyBhbiBvbmxpbmUgdmVyc2lvbiBob3N0ZWQgb24gaHR0cDovL3ZhbGlkYXRvci5zd2FnZ2VyLmlvLiAgCgpZb3UgY2FuIGFsc28gcHVsbCBhIGRvY2tlciBpbWFnZSBvZiB0aGUgdmFsaWRhdG9yIGRpcmVjdGx5IGZyb20gW0RvY2tlckh1Yl0oaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3N3YWdnZXJhcGkvc3dhZ2dlci12YWxpZGF0b3ItdjIvKSwgZS5nLjoKCmBgYApkb2NrZXIgcHVsbCBzd2FnZ2VyYXBpL3N3YWdnZXItdmFsaWRhdG9yLXYyOnYyLjAuOApkb2NrZXIgcnVuIC1pdCAtcCA4MDgwOjgwODAgLS1uYW1lIHN3YWdnZXItdmFsaWRhdG9yLXYyIHN3YWdnZXJhcGkvc3dhZ2dlci12YWxpZGF0b3ItdjI6djIuMC44CmBgYAoKU2luY2UgdmVyc2lvbiBgMi4wLjJgIGxvY2FsIGFuZCBub24gaHR0cC9odHRwcyB1cmxzIGFyZSByZWplY3RlZCBieSBkZWZhdWx0LCBhbG9uZyB3aXRoIHJlZGlyZWN0czsgdGhpcyBpcyBjb250cm9sbGFibGUgd2l0aCBkb2NrZXIgZW52IHZhcmlhYmxlcyAvIGphdmEgc3lzdGVtIHByb3BlcnRpZXM6CgpgYGAKZG9ja2VyIHJ1biAtaXQgLXAgODA4MDo4MDgwIC1lICJSRUpFQ1RfTE9DQUw9ZmFsc2UiIC1lICJSRUpFQ1RfUkVESVJFQ1Q9ZmFsc2UiIC0tbmFtZSBzd2FnZ2VyLXZhbGlkYXRvci12MiBzd2FnZ2VyYXBpL3N3YWdnZXItdmFsaWRhdG9yLXYyOnYyLjAuOApgYGAKCkluIG5vbiBkb2NrZXIgZW52aXJvbm1lbnRzLCBzeXN0ZW0gcHJvcGVydGllcyBgcmVqZWN0TG9jYWxgIGFuZCBgcmVqZWN0UmVkaXJlY3RgIGNhbiBiZSB1c2VkLgoKCgpXZWIgVUkgaXMgcmVhY2hhYmxlIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9pbmRleC5odG1sIGFuZCBPcGVuQVBJIHNwZWMgYXQgaHR0cDovL2xvY2FsaG9zdDo4MDgwL3ZhbGlkYXRvci9vcGVuYXBpLmpzb24KCgoKWW91IGNhbiB2YWxpZGF0ZSBhbnkgT3BlbkFQSSBzcGVjaWZpY2F0aW9uIGFnYWluc3QgdGhlIFtTd2FnZ2VyL09wZW5BUEkgMi4wIFNjaGVtYV0oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvc2NoZW1hcy92Mi4wL3NjaGVtYS5qc29uKSBhbmQgW09wZW5BUEkgMy4wIFNjaGVtYV0oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi92My4wLjEvdmVyc2lvbnMvMy4wLjEubWQpIGFzIGZvbGxvd3M6CgpgYGAKPGltZyBzcmM9Imh0dHBzOi8vdmFsaWRhdG9yLnN3YWdnZXIuaW8vdmFsaWRhdG9yP3VybD17WU9VUl9VUkx9Ij4KYGBgCgpPZiBjb3Vyc2UgdGhlIGBZT1VSX1VSTGAgbmVlZHMgdG8gYmUgYWRkcmVzc2FibGUgYnkgdGhlIHZhbGlkYXRvciAoaS5lLiB3b24ndCBmaW5kIGFueXRoaW5nIG9uIGxvY2FsaG9zdCkuICBJZiBpdCB2YWxpZGF0ZXMsIHlvdSdsbCBnZXQgYSBuaWNlIGdyZWVuIFZBTElEIGxvZ28uICBGYWlsdXJlcyB3aWxsIGdpdmUgYW4gSU5WQUxJRCBsb2dvLCBhbmQgaWYgdGhlcmUgYXJlIGVycm9ycyBwYXJzaW5nIHRoZSBzcGVjaWZpY2F0aW9uIG9yIHJlYWNoaW5nIGl0LCBhbiB1Z2x5IHJlZCBFUlJPUiBsb2dvLgoKRm9yIGV4YW1wbGUsIHVzaW5nIFtodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9tYXN0ZXIvZXhhbXBsZXMvdjIuMC9qc29uL3BldHN0b3JlLWV4cGFuZGVkLmpzb25dKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92Mi4wL2pzb24vcGV0c3RvcmUtZXhwYW5kZWQuanNvbikgYXMgYSBzb3VyY2UsIHdlIGdldCAuLi4KCiFbXShodHRwczovL3ZhbGlkYXRvci5zd2FnZ2VyLmlvL3ZhbGlkYXRvcj91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vbWFzdGVyL2V4YW1wbGVzL3YyLjAvanNvbi9wZXRzdG9yZS1leHBhbmRlZC5qc29uKQoKSWYgeW91ciBzcGVjaWZpY2F0aW9uIGZhaWxzIHRvIHZhbGlkYXRlIGZvciBzb21lIHJlYXNvbiwgb3IgaWYgdGhlcmUgaXMgYW4gZXJyb3IsIHlvdSBjYW4gZ2V0IG1vcmUgaW5mb3JtYXRpb24gb24gd2h5IGJ5IHZpc2l0aW5nIGBgYGh0dHBzOi8vdmFsaWRhdG9yLnN3YWdnZXIuaW8vdmFsaWRhdG9yL2RlYnVnP3VybD17WU9VUl9VUkx9YGBgLgoKU2luY2UgdGhlIHZhbGlkYXRvciB1c2VzIGEgYnJvd3Nlcmxlc3MgYmFjay1lbmQgdG8gZmV0Y2ggdGhlIGNvbnRlbnRzIGFuZCBzY2hlbWEsIGl0J3Mgbm90IHN1YmplY3QgdG8gdGhlIHRlcnJpYmxlIHdvcmxkIG9mIENPUlMuCgpZb3UgY2FuIGFsc28gcG9zdCBhIHNwZWMgdXAgdG8gdGhlIHNlcnZpY2Ugd2l0aCBDVVJMOgoKYGBgCmN1cmwgLVggUE9TVCAtZCBAc3dhZ2dlci5qc29uIC1IICdDb250ZW50LVR5cGU6YXBwbGljYXRpb24vanNvbicgaHR0cHM6Ly92YWxpZGF0b3Iuc3dhZ2dlci5pby92YWxpZGF0b3IvZGVidWcKYGBgCgpJbiB0aGlzIGV4YW1wbGUsIGBzd2FnZ2VyLmpzb25gIGlzIHRoZSBzd2FnZ2VyIGRlZmluaXRpb24gaW4gSlNPTiBmb3JtYXQsIGluIHRoZSBDV0QuCgpOb3RlIHRoYXQgYWxsIHRoZSBhYm92ZSBpcyBhbHNvIGFwcGxpY2FibGUgdG8gT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbnM7IGZvciBleGFtcGxlLCB1c2luZyBbaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby9hcGkvdjMvb3BlbmFwaS5qc29uXShodHRwczovL3BldHN0b3JlMy5zd2FnZ2VyLmlvL2FwaS92My9vcGVuYXBpLmpzb24pIGFzIGEgc291cmNlLCB3ZSBnZXQgLi4uCgohW10oaHR0cHM6Ly92YWxpZGF0b3Iuc3dhZ2dlci5pby92YWxpZGF0b3I/dXJsPWh0dHBzOi8vcGV0c3RvcmUzLnN3YWdnZXIuaW8vYXBpL3YzL29wZW5hcGkuanNvbikKCgojIyMgUnVubmluZyBsb2NhbGx5CgpZb3UgY2FuIGJ1aWxkIGFuZCBydW4gdGhlIHZhbGlkYXRvciBsb2NhbGx5OgoKYGBgCm12biBwYWNrYWdlIGpldHR5OnJ1bgpgYGAKCkFuZCBhY2Nlc3MgdGhlIHZhbGlkYXRvciBsaWtlIHN1Y2g6CgpgYGAKaHR0cDovL2xvY2FsaG9zdDo4MDgwL3ZhbGlkYXRvcj91cmw9e1VSTH0KYGBgCgpvcgoKYGBgCmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92YWxpZGF0b3I/dXJsPWh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvL3YyL3N3YWdnZXIuanNvbgpgYGAKYGBgCmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92YWxpZGF0b3I/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwKYGBgCgojIyBTZWN1cml0eSBjb250YWN0CgpQbGVhc2UgZGlzY2xvc2UgYW55IHNlY3VyaXR5LXJlbGF0ZWQgaXNzdWVzIG9yIHZ1bG5lcmFiaWxpdGllcyBieSBlbWFpbGluZyBbc2VjdXJpdHlAc3dhZ2dlci5pb10obWFpbHRvOnNlY3VyaXR5QHN3YWdnZXIuaW8pLCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBwdWJsaWMgaXNzdWUgdHJhY2tlci4K
    readmeEtag: '"f708b7554c3b4fc9d79b34d95c916345c2666a94c6fc5a67e0a19153c25b482c"'
    readmeLastModified: Mon, 14 Feb 2022 17:23:18 GMT
    description: Validate your Swagger JSON/YAML today!
    created: "2014-08-19T06:18:38Z"
    updated: "2022-03-24T13:37:59Z"
    language: Java
    archived: false
    stars: 171
    watchers: 171
    forks: 80
    owner: swagger-api
    logo: https://avatars.githubusercontent.com/u/7658037?v=4
    license: Apache-2.0
    repoEtag: '"02305226e91ef1534326bfbce48da27fa3b3df4579344ce48b117733af743a11"'
    repoLastModified: Thu, 24 Mar 2022 13:37:59 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/lezhnev74/openapi-psr7-validator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      It validates PSR-7 messages (HTTP request/response) against OpenAPI
      specifications
    created: "2019-05-01T13:32:30Z"
    updated: "2021-12-31T01:48:50Z"
    language: PHP
    archived: false
    stars: 172
    watchers: 172
    forks: 10
    owner: lezhnev74
    logo: https://avatars.githubusercontent.com/u/10206110?v=4
    license: MIT
    repoEtag: '"c0833f6ccce09988a27ad144690b0d789494105274cc6258aa223f7eac6273c5"'
    repoLastModified: Sat, 05 Feb 2022 13:48:25 GMT
    readmeEtag: '"480f263956dee33d66ace6103ff423ddfcfbc3844b78942d621f0cadc2de5a2b"'
    readmeLastModified: Thu, 19 Sep 2019 09:02:21 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/dgarcia360/openapi-boilerplate
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGgxIGFsaWduPSJjZW50ZXIiPgogIDxkaXYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Ij4KICAgICAgPGltZyBzcmM9ImRvY3MvaGVhZGVyLnBuZyIgd2lkdGg9IjU1MCIvPgogIDwvZGl2Pgo8L2gxPgoKIVtidWlsZF0oaHR0cHM6Ly9naXRodWIuY29tL2RnYXJjaWEzNjAvb3BlbmFwaS1ib2lsZXJwbGF0ZS93b3JrZmxvd3MvYnVpbGQvYmFkZ2Uuc3ZnKQpbIVtMaWNlbnNlOiBNSVRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvTGljZW5zZS1NSVQteWVsbG93LnN2ZyldKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKQoKIyBPcGVuQVBJIGJvaWxlcnBsYXRlCgpBIHN0YXJ0ZXIgdGVtcGxhdGUgZm9yICoqT3BlbkFQSSBTcGVjaWZpY2F0aW9uKiogKE9BUykgcHJvamVjdHMuCgpUaGlzIHByb2plY3Qgc3BsaXRzIHRoZSBbU3dhZ2dlciBQZXRzdG9yZV0oaHR0cHM6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLykgZXhhbXBsZSBmcm9tIHRoZSBvZmZpY2lhbCBkb2N1bWVudGF0aW9uIGludG8gc21hbGxlciBmaWxlcy4gSXQgYWxzbyBhZGRzIGhhbmR5IGNvbW1hbmRzIHRvIGJ1aWxkLCBsaW50LCBhbmQgcHJldmlldyB0aGUgT3BlbkFQSSBkb2N1bWVudCBmcm9tIHRoZSB0ZXJtaW5hbC4KCllvdSBjYW4gdXNlIHRoaXMgdGVtcGxhdGUgdG8gZ3VpZGUgdGhlIG9yZ2FuaXphdGlvbiBvZiB5b3VyIHByb2plY3QuIEVpdGhlciBpZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBuZXcgT3BlbkFQSSBkb2N1bWVudCBmcm9tIHNjcmF0Y2ggb3IgaWYgeW91IGFscmVhZHkgaGF2ZSBpdCBkZWZpbmVkLiAKCiMjIEZlYXR1cmVzCgoqIPCfk50gV3JpdGUgT3BlbkFQSSBkZWZpbml0aW9ucyBpbiBkaWZmZXJlbnQgZmlsZXMuCiog8J+UgCBDb21iaW5lIGFsbCBmaWxlcyB3aXRoIFtBUElEZXZUb29scy9zd2FnZ2VyLWNsaV0oaHR0cHM6Ly9naXRodWIuY29tL0FQSURldlRvb2xzL3N3YWdnZXItY2xpKS4KKiDinIUgVmFsaWRhdGUgYW5kIGxpbnQgdGhlIE9wZW5BUEkgZG9jdW1lbnQgd2l0aCBbc3RvcGxpZ2h0L3NwZWN0cmFsXShodHRwczovL2dpdGh1Yi5jb20vc3RvcGxpZ2h0L3NwZWN0cmFsKS4KKiDinKggUHVibGlzaCByZWZlcmVuY2UgZG9jcyB3aXRoIFtyZWRvY2x5L3JlZG9jXShodHRwczovL2dpdGh1Yi5jb20vUmVkb2NseS9yZWRvYykgJiBHaXRIdWIgUGFnZXMuCgojIyBXaHk/CgpXaGVuIEkgdXNlZCB0byBkb2N1bWVudCBBUElzIGZvbGxvd2luZyB0aGUgT3BlbkFQSSBzcGVjLCBJIGFsd2F5cyBlbmRlZCB1cCB3aXRoIGRvY3VtZW50cyBvZiB0aG91c2FuZHMgb2YgbGluZXMsIHdoaWNoIHdlcmUgYSBuaWdodG1hcmUgdG8gbWFpbnRhaW4uCgpGb3IgdGhpcyByZWFzb24sIEkgZXhwbG9yZWQgaG93IHRvIHNwbGl0IE9wZW5BUEkgZG9jdW1lbnRzLiBKdW1wIG92ZXIgdG8gbXkgW2Jsb2ddKGh0dHBzOi8vZGF2aWRnYXJjaWEuZGV2L3Bvc3RzL2hvdy10by1zcGxpdC1vcGVuLWFwaS1zcGVjLWludG8tbXVsdGlwbGUtZmlsZXMvKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSBwcm9jZXNzLiBCYXNlZCBvbiBteSByZXNlYXJjaCwgSSBjcmVhdGVkIHRoaXMgb3BpbmlvbmF0ZWQgdGVtcGxhdGUgdG8gZGVmaW5lLCB0ZXN0LCBhbmQgcHVibGlzaCBtb2R1bGFyIE9wZW5BUEkgcHJvamVjdHMuCgpQcm9wZXJseSBvcmdhbml6aW5nIHlvdXIgcHJvamVjdCBjb21lcyB3aXRoIGdyZWF0IGFkdmFudGFnZXMuIEJ5IHNwbGl0dGluZyBhIGxhcmdlIE9wZW5BUEkgc3BlYyBpbnRvIG11bHRpcGxlIGZpbGVzLCBpdCB3aWxsIG5vdCBvbmx5IGJlIG11Y2ggZWFzaWVyIHRvIGhhbmRsZS4gRG9jdW1lbnRpbmcgaXQgd2lsbCBiZSBtdWNoIG1vcmUgZW5qb3lhYmxlLCB0b28uIEkgYWxzbyByZWd1bGFybHkgZ2V0IHRoZSBmZWVkYmFjayB0aGF0IG90aGVyIGRldmVsb3BlcnMgYXJlIG1vcmUgd2lsbGluZyB0byBjb250cmlidXRlIGFuZCBwcm9wb3NlIGNoYW5nZXMgdG8gdGhlIGRvY3VtZW50IHdoZW4gaXQgaXMgcHJvcGVybHkgb3JnYW5pemVkLgoKIyMgR2V0dGluZyBzdGFydGVkCgojIyMgUmVxdWlyZW1lbnRzCgoqIE5vZGUuanMgMTYgKGN1cnJlbnQpCgojIyMgSW5zdGFsbGF0aW9uCgoxLiBDbG9uZSB0aGUgcmVwb3NpdG9yeS4KCiAgICBgYGAKICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZGdhcmNpYTM2MC9vcGVuYXBpLWJvaWxlcnBsYXRlLmdpdAogICAgYGBgCgoyLiBJbnN0YWxsIHRoZSBwcm9qZWN0IGRlcGVuZGVuY2llcy4KCiAgICBgYGAKICAgIG5wbSBpbnN0YWxsCiAgICBgYGAKCjMuIEVkaXQgYG9wZW5hcGkueWFtbGAgdG8gZml0IHlvdXIgQVBJIGRlZmluaXRpb24uIElmIHlvdeKAmXJlIG5vdCBmYW1pbGlhciB3aXRoIHRoZSBPcGVuQVBJIFNwZWNpZmljYXRpb24sIHJlYWQgW0dldHRpbmcgc3RhcnRlZCB3aXRoIE9BU10oaHR0cHM6Ly9zd2FnZ2VyLmlvL3NvbHV0aW9ucy9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC1vYXMvKSBmaXJzdC4KCiMjIFVzZWZ1bCBjb21tYW5kcwoKVGhlIHByb2plY3Qgd2lsbCBidWlsZCwgbGludCwgYW5kIHByZXZpZXcgdGhlIE9wZW5BUEkgZG9jdW1lbnQgZnJvbSB0aGUgdGVybWluYWwsIHdpdGggdGhlIGZvbGxvd2luZyBjb21tYW5kczoKCiMjIyBCdWlsZAoKVGhlIGNvbW1hbmQgYnVuZGxlcyB0aGUgc3BlYyBhcyBvbmUgYC55YW1sYCBmaWxlLgoKYGBgCm5wbSBydW4gYnVpbGQKYGBgCgpUaGUgbWluaWZpZWQgZG9jdW1lbnQgaXMgc3RvcmVkIGluIGBfYnVpbGQvb3BlbmFwaS55YW1sYC4KCiMjIyBUZXN0CgpUaGUgY29tbWFuZCBjaGVja3MgaWYgdGhlIGRvY3VtZW50IGZvbGxvd3MgdGhlIE9wZW5BUEkgMy4wIFNwZWNpZmljYXRpb24uCgpgYGAKbnBtIHJ1biB0ZXN0CmBgYAoKIyMjIFByZXZpZXcKClRoZSBjb21tYW5kIGJ1aWxkcyBhIGRvY3Mgc2l0ZSBzbyB0aGF0IHlvdSBjYW4gdmlldyB0aGUgcmVuZGVyaW5nIG9uIHlvdXIgbG9jYWwgYnJvd3Nlci4KCmBgYApucG0gcnVuIHByZXZpZXcKYGBgCgpUaGUgc2VydmVyIHN0YXJ0cyBvbiBodHRwOi8vMTI3LjAuMC4xOjgwODAuCgpUaGUgc2l0ZSBpcyBnZW5lcmF0ZWQgd2l0aCBbUmVEb2NdKGh0dHBzOi8vZ2l0aHViLmNvbS9SZWRvY2x5L3JlZG9jKS4KSGVyZSdzIGEgcHJldmlldyBvZiBhIHNpdGUgZ2VuZXJhdGVkIHdpdGggdGhpcyBjb21tYW5kOiBbU3dhZ2dlciBQZXRzdG9yZSBSZWZlcmVuY2UgRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZ2FyY2lhMzYwLmdpdGh1Yi5pby9vcGVuYXBpLWJvaWxlcnBsYXRlLykuCgojIyBSZWFkeS10by11c2Ugd29ya2Zsb3dzCgpUaGUgcHJvamVjdCB1c2VzIFtHaXRIdWIgQWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzL2FjdGlvbnMpIGZvciBDb250aW51b3VzIEludGVncmF0aW9uIChDSSkuCgpPbiBldmVyeSBuZXcgcHVsbCByZXF1ZXN0LCB0aGUgT3BlbkFQSSBkb2N1bWVudCBpcyBsaW50ZWQgd2l0aCBbc3BlY3RyYWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9zdG9wbGlnaHRpby9zcGVjdHJhbCkuIElmIHRoZXJlIGFyZSBjaGFuZ2VzIHRoYXQgaW50cm9kdWNlIGVycm9ycywgdGhlIGJvdCB3aWxsIGhpZ2hsaWdodCB0aGVtIHJlcGx5aW5nIHRvIHRoZSBwdWxsIHJlcXVlc3QuCgpXaGVuIHRoZSBkZWZhdWx0IGJyYW5jaCAoZS5nLiBgbWFzdGVyYCkgcmVjZWl2ZXMgYW4gdXBkYXRlLCBhIHdvcmtmbG93IGF1dG9tYXRpY2FsbHkgcHVibGlzaGVzIHRoZSBBUEkgcmVmZXJlbmNlIGRvY3VtZW50YXRpb24gc2l0ZSB0byBHaXRIdWIgUGFnZXMuCgpTZWUgYC5naXRodWIvd29ya2Zsb3dzYCB0byBjdXN0b21pemUgdGhlIGF2YWlsYWJsZSB3b3JrZmxvd3MuIElmIHlvdSBkb24ndCBwbGFuIHRvIHVzZSBHaXRIdWIgdG8gaG9zdCB5b3VyIHNwZWMgb3IgcHJlZmVyIHRvIGtlZXAgZG9jcyBwcml2YXRlLCBkZWxldGUgdGhlIGAuZ2l0aHViYCBmb2xkZXIuCgojIyBDb250cmlidXRpbmcKCkNvbnRyaWJ1dGlvbnMgYXJlIHdlbGNvbWUgYW5kIGFwcHJlY2lhdGVkISAKSWYgeW91IHdhbnQgdG8gZW5oYW5jZSB0aGUgYm9pbGVycGxhdGUsIHBsZWFzZSByZWFkIFtDT05UUklCVVRJTkcubWRdKENPTlRSSUJVVElORy5tZCkgZmlsZSBmaXJzdC4KCiMjIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAxOS1wcmVzZW50IERhdmlkIEdhcmNpYSAoW0BkZ2FyY2lhMzYwXShodHRwczovL2RhdmlkZ2FyY2lhLmRldikpLiBMaWNlbnNlZCB1bmRlciB0aGUgW01JVCBMaWNlbnNlXShMSUNFTlNFLm1kKS4KClRoZSBQZXRTdG9yZSBleGFtcGxlIHVzZWQgaXMgZGVyaXZlZCBmcm9tIFtPQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwpLCBDb3B5cmlnaHQgVGhlIExpbnV4IEZvdW5kYXRpb24sIExpY2Vuc2VkIHVuZGVyIHRoZSBbQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci9MSUNFTlNFKS4KCgo=
    readmeEtag: '"09a3f6a367c301b13066ef2174bb4a2d0898e4de1eb24754b3d195409b13c7ed"'
    readmeLastModified: Tue, 12 Apr 2022 07:43:17 GMT
    description: 📘 Multi-file boilerplate for Open API Specification
    created: "2020-02-08T10:23:15Z"
    updated: "2022-04-28T04:30:28Z"
    language: Shell
    archived: false
    stars: 174
    watchers: 174
    forks: 49
    owner: dgarcia360
    logo: https://avatars.githubusercontent.com/u/9107969?v=4
    license: NOASSERTION
    repoEtag: '"4c87f584b008fe894b325721e45752eb1d058207d89d20c4a00745eab3f29d6c"'
    repoLastModified: Thu, 28 Apr 2022 04:30:28 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/networknt/light-rest-4j
  v3: true
  repositoryMetadata:
    base64Readme: >-
      QSBSRVNUZnVsIEFQSSBvciBzZXJ2aWNlIGZyYW1ld29yayBidWlsdCBvbiB0b3Agb2YgbGlnaHQtNGoKCltTdGFjayBPdmVyZmxvd10oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2xpZ2h0LTRqKSB8CltHb29nbGUgR3JvdXBdKGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyFmb3J1bS9saWdodC00aikgfApbR2l0dGVyIENoYXRdKGh0dHBzOi8vZ2l0dGVyLmltL25ldHdvcmtudC9saWdodC1yZXN0LTRqKSB8CltTdWJyZWRkaXRdKGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vci9saWdodGFwaS8pIHwKW1lvdXR1YmUgQ2hhbm5lbF0oaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ0hDUk1XSlZYdzhpQjd6S3hGNTVCeXcpIHwKW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jLm5ldHdvcmtudC5jb20vc3R5bGUvbGlnaHQtcmVzdC00ai8pIHwKW0NvbnRyaWJ1dGlvbiBHdWlkZV0oaHR0cHM6Ly9kb2MubmV0d29ya250LmNvbS9jb250cmlidXRlLykgfAoKWyFbQnVpbGQgU3RhdHVzXShodHRwczovL3RyYXZpcy1jaS5vcmcvbmV0d29ya250L2xpZ2h0LXJlc3QtNGouc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL3RyYXZpcy1jaS5vcmcvbmV0d29ya250L2xpZ2h0LXJlc3QtNGopIFshW2NvZGVjb3YuaW9dKGh0dHBzOi8vY29kZWNvdi5pby9naXRodWIvbmV0d29ya250L2xpZ2h0LXJlc3QtNGovY292ZXJhZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvZGVjb3YuaW8vZ2l0aHViL25ldHdvcmtudC9saWdodC1yZXN0LTRqP2JyYW5jaD1tYXN0ZXIpCgpUaGlzIHJlcG9zaXRvcnkgY29udGFpbnMgbWlkZGxld2FyZSBoYW5kbGVycyB0aGF0IHdvcmsgd2l0aCBlaXRoZXIgU3dhZ2dlciAyLjAgb3IgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbi4gSWYgeW91IGFyZSBzdGFydGluZyBhIGJyYW5kIG5ldyBwcm9qZWN0LCBpdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgdXNpbmcgdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gZm9yIHlvdXIgZGVzaWduLiAKClRvIGdldCBzdGFydGVkIHlvdXIgZmlyc3QgcHJvamVjdCwgcGxlYXNlIHZpc2l0IHRoZSBbZ2V0dGluZyBzdGFydGVkXShodHRwczovL2RvYy5uZXR3b3JrbnQuY29tL2dldHRpbmctc3RhcnRlZC9saWdodC1yZXN0LTRqLykgdG8gd2FsayB0aHJvdWdoIHRoZSBwcm9jZXNzLgoKRm9yIGRvY3VtZW50YXRpb24gb24gdGhlIGhhbmRsZXJzLCBwbGVhc2UgdmlzaXQgdGhlIFtyZWZlcmVuY2UgZG9jdW1lbnRdKGh0dHBzOi8vZG9jLm5ldHdvcmtudC5jb20vc3R5bGUvbGlnaHQtcmVzdC00ai8pLgoKVGhlcmUgYXJlIGFsc28gbnVtZXJpYyBbdHV0b3JpYWxzXShodHRwczovL2RvYy5uZXR3b3JrbnQuY29tL3R1dG9yaWFsL3Jlc3QvKSB0byBzaG93IHVzZXJzIGhvdyB0byBidWlsZCBSZXN0ZnVsIHNlcnZpY2VzLiAK
    readmeEtag: '"9921bfc335b2ceea97d394ae304fa590ecb82722655436a749b99b6e1199706c"'
    readmeLastModified: Thu, 17 Mar 2022 16:07:09 GMT
    description: >-
      A RESTful framework built on top of light-4j with both Swagger 2.0 and
      OpenAPI 3.0 supports
    created: "2017-01-22T14:48:44Z"
    updated: "2022-03-01T08:17:15Z"
    language: Java
    archived: false
    stars: 111
    watchers: 111
    forks: 29
    owner: networknt
    logo: https://avatars.githubusercontent.com/u/8740739?v=4
    license: Apache-2.0
    repoEtag: '"d5e0b705b6fba6805daa0a4d9892d7c42bf8882c0e47052b9fb7556f5580c98c"'
    repoLastModified: Tue, 01 Mar 2022 08:17:15 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source:
    - openapi3 tags
    - openapi31 tags
  repository: https://github.com/redocly/openapi-sampler
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLXNhbXBsZXIKClshW1RyYXZpcyBidWlsZCBzdGF0dXNdKGh0dHA6Ly9pbWcuc2hpZWxkcy5pby90cmF2aXMvUmVkb2NseS9vcGVuYXBpLXNhbXBsZXIuc3ZnP3N0eWxlPWZsYXQpXShodHRwczovL3RyYXZpcy1jaS5vcmcvUmVkb2NseS9vcGVuYXBpLXNhbXBsZXIpIFshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvUmVkb2NseS9vcGVuYXBpLXNhbXBsZXIvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXImc2VydmljZT1naXRodWIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvUmVkb2NseS9vcGVuYXBpLXNhbXBsZXI/YnJhbmNoPW1hc3RlcikgWyFbRGVwZW5kZW5jeSBTdGF0dXNdKGh0dHBzOi8vZGF2aWQtZG0ub3JnL1JlZG9jbHkvb3BlbmFwaS1zYW1wbGVyLnN2ZyldKGh0dHBzOi8vZGF2aWQtZG0ub3JnL1JlZG9jbHkvb3BlbmFwaS1zYW1wbGVyKSBbIVtkZXZEZXBlbmRlbmN5IFN0YXR1c10oaHR0cHM6Ly9kYXZpZC1kbS5vcmcvUmVkb2NseS9vcGVuYXBpLXNhbXBsZXIvZGV2LXN0YXR1cy5zdmcpXShodHRwczovL2RhdmlkLWRtLm9yZy9SZWRvY2x5L29wZW5hcGktc2FtcGxlciNpbmZvPWRldkRlcGVuZGVuY2llcykKClRvb2wgZm9yIGdlbmVyYXRpb24gc2FtcGxlcyBiYXNlZCBvbiBPcGVuQVBJIHBheWxvYWQvcmVzcG9uc2Ugc2NoZW1hCgojIyBGZWF0dXJlcwoKLSBEZXRlcm1pbmlzdGljIChnaXZlbiBhIHBhcnRpY3VsYXIgaW5wdXQsIHdpbGwgYWx3YXlzIHByb2R1Y2UgdGhlIHNhbWUgb3V0cHV0KQotIFN1cHBvcnRzIGNvbXBvdW5kIGtleXdvcmRzOiBgYWxsT2ZgLCBgb25lT2ZgLCBgYW55T2ZgLCBgaWYvdGhlbi9lbHNlYAotIFN1cHBvcnRzIGBhZGRpdGlvbmFsUHJvcGVydGllc2Agd2l0aCBbYHgtYWRkaXRpb25hbFByb3BlcnRpZXNOYW1lYF0oaHR0cHM6Ly9naXRodWIuY29tL1JlZG9jbHkvcmVkb2MvYmxvYi9tYXN0ZXIvZG9jcy9yZWRvYy12ZW5kb3ItZXh0ZW5zaW9ucy5tZCN4LWFkZGl0aW9uYWxwcm9wZXJ0aWVzbmFtZSkKLSBVc2VzIGBjb25zdGAsIGBleGFtcGxlc2AsIGBlbnVtYCBhbmQgYGRlZmF1bHRgIHdoZXJlIHBvc3NpYmxlIC0gaW4gdGhpcyBvcmRlcgotIEdvb2QgYXJyYXkgc3VwcG9ydDogc3VwcG9ydHMgYGNvbnRhaW5zYCwgYG1pbkl0ZW1zYCwgYG1heEl0ZW1zYCwgYW5kIHR1cGxlcyAoYGl0ZW1zYCBhcyBhbiBhcnJheSkKLSBTdXBwb3J0cyBgbWluTGVuZ3RoYCwgYG1heExlbmd0aGAsIGBtaW5gLCBgbWF4YCwgYGV4Y2x1c2l2ZU1pbmltdW1gLCBgZXhjbHVzaXZlTWF4aW11bWAKLSBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGBzdHJpbmdgIGZvcm1hdHM6CiAgLSBlbWFpbAogIC0gaWRuLWVtYWlsCiAgLSBwYXNzd29yZAogIC0gZGF0ZS10aW1lCiAgLSBkYXRlCiAgLSB0aW1lCiAgLSBpcHY0CiAgLSBpcHY2CiAgLSBob3N0bmFtZQogIC0gaWRuLWhvc3RuYW1lCiAgLSB1cmkKICAtIHVyaS1yZWZlcmVuY2UKICAtIHVyaS10ZW1wbGF0ZQogIC0gaXJpCiAgLSBpcmktcmVmZXJlbmNlCiAgLSB1dWlkCiAgLSBqc29uLXBvaW50ZXIKICAtIHJlbGF0aXZlLWpzb24tcG9pbnRlcgogIC0gcmVnZXgKLSBJbmZlcnMgc2NoZW1hIHR5cGUgYXV0b21hdGljYWxseSBmb2xsb3dpbmcgc2FtZSBydWxlcyBhcyBbanNvbi1zY2hlbWEtZmFrZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2pzb24tc2NoZW1hLWZha2VyI2luZmVycmVkLXR5cGVzKQotIFN1cHBvcnQgZm9yIGAkcmVmYCByZXNvbHZpbmcKLSBIYXMgYmFzaWMgc3VwcG9ydHMgZm9yIEpTT04gU2NoZW1hIGRyYWZ0IDcgKHRoYW5rcyB0byBbQFAwbGlwXShodHRwczovL2dpdGh1Yi5jb20vUDBsaXApIGZyb20gW0BzdG9wbGlnaHRpb10oaHR0cHM6Ly9naXRodWIuY29tL3N0b3BsaWdodGlvKSBmb3IgY29udHJpYnV0aW5nKQoKIyMgSW5zdGFsbGF0aW9uCgpJbnN0YWxsIHVzaW5nIFtucG1dKGh0dHBzOi8vZG9jcy5ucG1qcy5jb20vZ2V0dGluZy1zdGFydGVkL3doYXQtaXMtbnBtKQoKICAgIG5wbSBpbnN0YWxsIG9wZW5hcGktc2FtcGxlciAtLXNhdmUKCm9yIHVzaW5nIFt5YXJuXShodHRwczovL3lhcm5wa2cuY29tKQoKICAgIHlhcm4gYWRkIG9wZW5hcGktc2FtcGxlcgoKVGhlbiByZXF1aXJlIGl0IGluIHlvdXIgY29kZToKCmBgYGpzCnZhciBPcGVuQVBJU2FtcGxlciA9IHJlcXVpcmUoJ29wZW5hcGktc2FtcGxlcicpOwpgYGAKCiMjIFVzYWdlCiMjIyMgYE9wZW5BUElTYW1wbGVyLnNhbXBsZShzY2hlbWEsIFtvcHRpb25zXSwgW3NwZWNdKWAKLSAqKnNjaGVtYSoqIChfcmVxdWlyZWRfKSAtIGBvYmplY3RgCkFuIFtPcGVuQVBJIFNjaGVtYSBPYmplY3RdKGh0dHA6Ly9zd2FnZ2VyLmlvL3NwZWNpZmljYXRpb24vI3NjaGVtYU9iamVjdCkgb3IgYSBKU09OIFNjaGVtYSBEcmFmdCA3IGRvY3VtZW50LgotICoqb3B0aW9ucyoqIChfb3B0aW9uYWxfKSAtIGBvYmplY3RgCkF2YWlsYWJsZSBvcHRpb25zOgogIC0gKipza2lwTm9uUmVxdWlyZWQqKiAtIGBib29sZWFuYAogIERvbid0IGluY2x1ZGUgbm9uLXJlcXVpcmVkIG9iamVjdCBwcm9wZXJ0aWVzIG5vdCBzcGVjaWZpZWQgaW4gW2ByZXF1aXJlZGAgcHJvcGVydHkgb2YgdGhlIHNjaGVtYSBvYmplY3RdKGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzL3NwZWNpZmljYXRpb24vZGF0YS1tb2RlbHMvZGF0YS10eXBlcy8jcmVxdWlyZWQpCiAgLSAqKnNraXBSZWFkT25seSoqIC0gYGJvb2xlYW5gCiAgRG9uJ3QgaW5jbHVkZSBgcmVhZE9ubHlgIG9iamVjdCBwcm9wZXJ0aWVzCiAgLSAqKnNraXBXcml0ZU9ubHkqKiAtIGBib29sZWFuYAogIERvbid0IGluY2x1ZGUgYHdyaXRlT25seWAgb2JqZWN0IHByb3BlcnRpZXMKICAtICoqcXVpZXQqKiAtIGBib29sZWFuYAogIERvbid0IGxvZyBjb25zb2xlIHdhcm5pbmcgbWVzc2FnZXMKLSAqKnNwZWMqKiAtIHdob2xlIHNwZWNpZmljYXRpb24gd2hlcmUgdGhlIHNjaGVtYSBpcyB0YWtlbiBmcm9tLiBSZXF1aXJlZCBvbmx5IHdoZW4gc2NoZW1hIG1heSBjb250YWluIGAkcmVmYC4gKipzcGVjKiogbXVzdCBub3QgY29udGFpbiBhbnkgZXh0ZXJuYWwgcmVmZXJlbmNlcwoKIyMgRXhhbXBsZQpgYGBqcwpjb25zdCBPcGVuQVBJU2FtcGxlciA9IHJlcXVpcmUoJy4nKTsKT3BlbkFQSVNhbXBsZXIuc2FtcGxlKHsKICB0eXBlOiAnb2JqZWN0JywKICBwcm9wZXJ0aWVzOiB7CiAgICBhOiB7dHlwZTogJ2ludGVnZXInLCBtaW5pbXVtOiAxMH0sCiAgICBiOiB7dHlwZTogJ3N0cmluZycsIGZvcm1hdDogJ3Bhc3N3b3JkJywgbWluTGVuZ3RoOiAxMH0sCiAgICBjOiB7dHlwZTogJ2Jvb2xlYW4nLCByZWFkT25seTogdHJ1ZX0KICB9Cn0sIHtza2lwUmVhZE9ubHk6IHRydWV9KTsKLy8geyBhOiAxMCwgYjogJ3BhJCR3b3JkX3EnIH0KYGBgCg==
    readmeEtag: '"84975be8458acf5a074affd585188d3c89a66076ca3f339f69bc85cdd61d6272"'
    readmeLastModified: Thu, 24 Feb 2022 11:27:55 GMT
    description: >-
      :capital_abcd: Tool for generation samples based on OpenAPI(fka Swagger)
      payload/response schema
    created: "2016-05-29T10:29:32Z"
    updated: "2022-04-24T10:09:40Z"
    language: JavaScript
    archived: false
    stars: 105
    watchers: 105
    forks: 34
    owner: Redocly
    logo: https://avatars.githubusercontent.com/u/32099856?v=4
    license: MIT
    repoEtag: '"5be8fe3ee1d9d5b87eaa6a243b4a16ed77e538f5045e9f631f6b820635b3497d"'
    repoLastModified: Sun, 24 Apr 2022 10:09:40 GMT
  foundInMaster: true
  v3_1: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/seriousme/fastify-openapi-glue
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBGYXN0aWZ5IE9wZW5BcGkgR2x1ZQpbIVtDSSBzdGF0dXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJpb3VzbWUvZmFzdGlmeS1vcGVuYXBpLWdsdWUvd29ya2Zsb3dzL05vZGUuanMlMjBDSS9iYWRnZS5zdmcpXShodHRwczovL2dpdGh1Yi5jb20vc2VyaW91c21lL2Zhc3RpZnktb3BlbmFwaS1nbHVlL2FjdGlvbnM/cXVlcnk9d29ya2Zsb3clM0ElMjJOb2RlLmpzK0NJJTIyKQpbIVtDb3ZlcmFnZSBTdGF0dXNdKGh0dHBzOi8vY292ZXJhbGxzLmlvL3JlcG9zL2dpdGh1Yi9zZXJpb3VzbWUvZmFzdGlmeS1vcGVuYXBpLWdsdWUvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvc2VyaW91c21lL2Zhc3RpZnktb3BlbmFwaS1nbHVlP2JyYW5jaD1tYXN0ZXIpClshW0xhbmd1YWdlIGdyYWRlOiBKYXZhU2NyaXB0XShodHRwczovL2ltZy5zaGllbGRzLmlvL2xndG0vZ3JhZGUvamF2YXNjcmlwdC9nL3NlcmlvdXNtZS9mYXN0aWZ5LW9wZW5hcGktZ2x1ZS5zdmc/bG9nbz1sZ3RtJmxvZ29XaWR0aD0xOCldKGh0dHBzOi8vbGd0bS5jb20vcHJvamVjdHMvZy9zZXJpb3VzbWUvZmFzdGlmeS1vcGVuYXBpLWdsdWUvY29udGV4dDpqYXZhc2NyaXB0KQpbIVtOUE0gdmVyc2lvbl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vdi9mYXN0aWZ5LW9wZW5hcGktZ2x1ZS5zdmcpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9mYXN0aWZ5LW9wZW5hcGktZ2x1ZSkKIVtucG1dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL2RtL2Zhc3RpZnktb3BlbmFwaS1nbHVlKQoKCgpBIHBsdWdpbiBmb3IgW2Zhc3RpZnldKGh0dHBzOi8vd3d3LmZhc3RpZnkuaW8pIHRvIGF1dG9nZW5lcmF0ZSBhIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gYSBbT3BlbkFwaV0oaHR0cHM6Ly93d3cub3BlbmFwaXMub3JnLykodjIvdjMpIHNwZWNpZmljYXRpb24uCgpJdCBhaW1zIGF0IGZhY2lsaXRhdGluZyBbImRlc2lnbiBmaXJzdCIgQVBJIGRldmVsb3BtZW50XShodHRwczovL3N3YWdnZXIuaW8vYmxvZy9hcGktZGVzaWduL2Rlc2lnbi1maXJzdC1vci1jb2RlLWZpcnN0LWFwaS1kZXZlbG9wbWVudC8pIGkuZS4geW91IHdyaXRlIG9yIG9idGFpbiBhbiBBUEkgc3BlY2lmaWNhdGlvbiBhbmQgdXNlIHRoYXQgdG8gZ2VuZXJhdGUgY29kZS4gR2l2ZW4gYW4gT3BlbkFwaSBzcGVjaWZpY2F0aW9uIEZhc3RpZnktb3BlbmFwaS1nbHVlIGhhbmRsZXMgdGhlIGZhc3RpZnkgY29uZmlndXJhdGlvbiBvZiByb3V0ZXMgYW5kIHNjaGVtYXMgZXRjLiBZb3UgY2FuIGFsc28gW2dlbmVyYXRlXSgjZ2VuZXJhdG9yKSB5b3VyIG93biBwcm9qZWN0IGZyb20gYSBPcGVuQXBpIHNwZWNpZmljYXRpb24uCgo8YSBuYW1lPSJpbnN0YWxsIj48L2E+CiMjIEluc3RhbGwgCmBgYApucG0gaSBmYXN0aWZ5LW9wZW5hcGktZ2x1ZSAtLXNhdmUKYGBgCjxhIG5hbWU9InBsdWdpbiI+PC9hPgojIyBQbHVnaW4KPGEgbmFtZT0icGx1Z2luVXNhZ2UiPjwvYT4KIyMjIFVzYWdlCgpBZGQgdGhlIHBsdWdpbiB0byB5b3VyIHByb2plY3Qgd2l0aCBgcmVnaXN0ZXJgIGFuZCBwYXNzIGl0IHNvbWUgYmFzaWMgb3B0aW9ucyBhbmQgeW91IGFyZSBkb25lICEKYGBgamF2YXNjcmlwdAppbXBvcnQgb3BlbmFwaUdsdWUgZnJvbSAiZmFzdGlmeS1vcGVuYXBpLWdsdWUiOwppbXBvcnQgU2VydmljZSBmcm9tICIuL3NlcnZpY2UuanMiOwppbXBvcnQgU2VjdXJpdHkgZnJvbSAiLi9zZWN1cml0eS5qcyI7Cgpjb25zdCBvcHRpb25zID0gewogIHNwZWNpZmljYXRpb246IGAke2N1cnJlbnREaXJ9L3BldHN0b3JlLW9wZW5hcGkudjMuanNvbmAsCiAgc2VydmljZTogbmV3IFNlcnZpY2UoKSwKICBzZWN1cml0eUhhbmRsZXJzOiBuZXcgU2VjdXJpdHkoKSwKICBwcmVmaXg6ICJ2MSIsCiAgbm9BZGRpdGlvbmFsOiB0cnVlLAogIGFqdk9wdGlvbnM6IHsKICAgIGZvcm1hdHM6IHsKICAgICAgImN1c3RvbS1mb3JtYXQiOiAvXGR7Mn0tXGR7NH0vCiAgICB9CiAgfQp9OwoKCmZhc3RpZnkucmVnaXN0ZXIob3BlbmFwaUdsdWUsIG9wdGlvbnMpOwpgYGAKCkFsbCBzY2hlbWEgYW5kIHJvdXRlcyB3aWxsIGJlIHRha2VuIGZyb20gdGhlIE9wZW5BcGkgc3BlY2lmaWNhdGlvbiBsaXN0ZWQgaW4gdGhlIG9wdGlvbnMuIE5vIG5lZWQgdG8gc3BlY2lmeSB0aGVtIGluIHlvdXIgY29kZS4gCjxhIG5hbWU9InBsdWdpbk9wdGlvbnMiPjwvYT4KIyMjIE9wdGlvbnMKICAtIGBzcGVjaWZpY2F0aW9uYDogdGhpcyBjYW4gYmUgYSBKU09OIG9iamVjdCwgb3IgdGhlIG5hbWUgb2YgYSBKU09OIG9yIFlBTUwgZmlsZSBjb250YWluaW5nIGEgdmFsaWQgT3BlbkFwaSh2Mi92MykgZmlsZSAKICAtIGBzZXJ2aWNlYDogdGhpcyBjYW4gYmUgYSBqYXZhc2NyaXB0IG9iamVjdCBvciBjbGFzcywgb3IgdGhlIG5hbWUgb2YgYSBqYXZhc2NyaXB0IGZpbGUgY29udGFpbmluZyBzdWNoIGFuIG9iamVjdC4gSWYgdGhlIGltcG9ydCBvZiB0aGUgZmlsZSByZXN1bHRzIGluIGEgZnVuY3Rpb24gaW5zdGVhZCBvZiBhbiBvYmplY3QgdGhlbiB0aGUgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCBkdXJpbmcgaW1wb3J0LiAKICAtIGBzZWN1cml0eUhhbmRsZXJzYDogdGhpcyBjYW4gYmUgYSBqYXZhc2NyaXB0IG9iamVjdCBvciBjbGFzcywgb3IgdGhlIG5hbWUgb2YgYSBqYXZhc2NyaXB0IGZpbGUgY29udGFpbmluZyBzdWNoIGFuIG9iamVjdC4gSWYgdGhlIGltcG9ydCBvZiB0aGUgZmlsZSByZXN1bHRzIGluIGEgZnVuY3Rpb24gaW5zdGVhZCBvZiBhbiBvYmplY3QgdGhlbiB0aGUgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCBkdXJpbmcgaW1wb3J0LiBTZWUgdGhlIFtzZWN1cml0eUhhbmRsZXJzIGRvY3VtZW50YXRpb25dKGRvY3Mvc2VjdXJpdHlIYW5kbGVycy5tZCkgZm9yIG1vcmUgZGV0YWlscy4KICAtIGBwcmVmaXhgOiB0aGlzIGlzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgdG8gcHJlZml4IHRoZSByb3V0ZXMsIGl0IGlzIHBhc3NlZCB2ZXJiYXRpbSB0byBmYXN0aWZ5LiBFLmcuIGlmIHRoZSBwYXRoIHRvIHlvdXIgb3BlcmF0aW9uIGlzIHNwZWNpZmllZCBhcyAiL29wZXJhdGlvbiIgdGhlbiBhIHByZWZpeCBvZiAidjEiIHdpbGwgbWFrZSBpdCBhdmFpbGFibGUgYXQgIi92MS9vcGVyYXRpb24iLiBUaGlzIHNldHRpbmcgb3ZlcnJ1bGVzIGFueSAiYmFzZVBhdGgiIHNldHRpbmcgaW4gYSB2MiBzcGVjaWZpY2F0aW9uLiBTZWUgdGhlIFtzZXJ2ZXJzIGRvY3VtZW50YXRpb25dKGRvY3Mvc2VydmVycy5tZCkgZm9yIG1vcmUgZGV0YWlscyBvbiB1c2luZyBwcmVmaXggd2l0aCBhIHYzIHNwZWNpZmljYXRpb24uCiAgLSBgbm9BZGRpdGlvbmFsYDogYnkgZGVmYXVsdCBGYXN0aWZ5IHdpbGwgc2lsZW50bHkgaWdub3JlIGFkZGl0aW9uYWwgcHJvcGVydGllcyBpbiBhIG1lc3NhZ2UuIFNldHRpbmcgYG5vQWRkaXRpb25hbGAgdG8gYHRydWVgIHdpbGwgY2hhbmdlIHRoaXMgYmVoYXZpb3VyIGFuZCB3aWxsIG1ha2UgRmFzdGlmeSByZXR1cm4gYSBIVFRQIGVycm9yIDQwMCB3aGVuIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJlc2VudC4gRGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBvcHRpb24gaXMgYGZhbHNlYC4KICAtIGBhanZPcHRpb25zYDogUGFzcyBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gQUpWIChzZWUgaHR0cHM6Ly9hanYuanMub3JnL29wdGlvbnMuaHRtbCkKCmBzcGVjaWZpY2F0aW9uYCBhbmQgYHNlcnZpY2VgIGFyZSBtYW5kYXRvcnksIGBzZWN1cml0eUhhbmRsZXJzYCwgYHByZWZpeGAgYW5kIGBub0FkZGl0aW9uYWxgIGFyZSBvcHRpb25hbC4KClNlZSB0aGUgW2V4YW1wbGVzXSgjZXhhbXBsZXMpIHNlY3Rpb24gZm9yIGEgZGVtby4KClBsZWFzZSBiZSBhd2FyZSB0aGF0IGB0aGlzYCB3aWxsIHJlZmVyIHRvIHlvdXIgc2VydmljZSBvYmplY3Qgb3IgeW91ciBzZWN1cml0eUhhbmRsZXIgb2JqZWN0IGFuZCBub3QgdG8gRmFzdGlmeSBhcyBleHBsYWluZWQgaW4gdGhlIFtiaW5kaW5ncyBkb2N1bWVudGF0aW9uXShkb2NzL2JpbmRpbmdzLm1kKQoKPGEgbmFtZT0iZ2VuZXJhdG9yIj48L2E+CiMjIEdlbmVyYXRvcgoKVG8gbWFrZSBsaWZlIGV2ZW4gbW9yZSBlYXN5IHRoZXJlIGlzIHRoZSBgb3BlbmFwaS1nbHVlYCBjbGkuIFRoZSBgb3BlbmFwaS1nbHVlYCBjbGkgdGFrZXMgYSB2YWxpZCBPcGVuQXBpICh2Mi92MykgZmlsZSAoSlNPTiBvciBZQU1MKSBhbmQgZ2VuZXJhdGVzIGEgcHJvamVjdCBpbmNsdWRpbmcgYSBmYXN0aWZ5IHBsdWdpbiB0aGF0IHlvdSBjYW4gdXNlIG9uIGFueSBmYXN0aWZ5IHNlcnZlciwgYSBzdHViIG9mIHRoZSBzZXJ2aWNlIGNsYXNzIGFuZCBhIHNrZWxldG9uIG9mIGEgdGVzdCBoYXJuZXNzIHRvIHRlc3QgdGhlIHBsdWdpbi4gCgo8YSBuYW1lPSJnZW5lcmF0b3JVc2FnZSI+PC9hPgojIyMgVXNhZ2UKYGBgCiAgb3BlbmFwaS1nbHVlIFtvcHRpb25zXSA8T3BlbkFwaSBzcGVjaWZpY2F0aW9uPgpgYGAKb3IgaWYgeW91IGRvbid0IGhhdmUgYG9wZW5hcGktZ2x1ZWAgaW5zdGFsbGVkOgpgYGAKICBucHggZ2l0aHViOnNlcmlvdXNtZS9mYXN0aWZ5LW9wZW5hcGktZ2x1ZSA8T3BlbkFwaSBzcGVjaWZpY2F0aW9uPgpgYGAKVGhpcyB3aWxsIGdlbmVyYXRlIGEgcHJvamVjdCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgT3BlbkFwaSBzcGVjaWZpY2F0aW9uLgpBbnkgZXhpc3RpbmcgZmlsZXMgaW4gdGhlIHByb2plY3QgZm9sZGVyIHdpbGwgYmUgb3ZlcndyaXR0ZW4hClNlZSB0aGUgW2dlbmVyYXRvciBleGFtcGxlc10oI2V4YW1wbGVzKSBzZWN0aW9uIGZvciBhIGRlbW8uCjxhIG5hbWU9ImdlbmVyYXRvck9wdGlvbnMiPjwvYT4KIyMjIE9wdGlvbnMKYGBgCgogIC1wIDxuYW1lPiAgICAgICAgICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcHJvamVjdCB0byBnZW5lcmF0ZQogIC0tcHJvamVjdE5hbWU9PG5hbWU+ICAgICAgICBbZGVmYXVsdDogZ2VuZXJhdGVkUHJvamVjdF0KCiAgLWIgPGRpcj4gLS1iYXNlRGlyPTxkaXI+ICAgIERpcmVjdG9yeSB0byBnZW5lcmF0ZSB0aGUgcHJvamVjdCBpbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBkaXJlY3RvcnkgbXVzdCBhbHJlYWR5IGV4aXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGVmYXVsdDogIi4iXQoKVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBvbmx5IHVzZWZ1bGwgZm9yIHRlc3RpbmcgdGhlIG9wZW5hcGktZ2x1ZSBwbHVnaW46CiAgLWMgLS1jaGVja3N1bU9ubHkgICAgICAgICAgIERvbid0IGdlbmVyYXRlIHRoZSBwcm9qZWN0IG9uIGRpc2sgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja3N1bXMgb25seS4KICAtbCAtLWxvY2FsUGx1Z2luICAgICAgICAgICAgVXNlIGEgbG9jYWwgcGF0aCB0byB0aGUgcGx1Z2luLgpgYGAKU2VlIHRoZSBbZ2VuZXJhdG9yIGV4YW1wbGVdKCNnZW5lcmF0b3JFeGFtcGxlcykgc2VjdGlvbiBmb3IgYSBkZW1vLgoKCjxhIG5hbWU9ImV4YW1wbGVzIj48L2E+CiMjIEV4YW1wbGVzCkNsb25lIHRoaXMgcmVwb3NpdG9yeSBhbmQgcnVuIGBucG0gaWAgCgo8YSBuYW1lPSJwbHVnaW5FeGFtcGxlcyI+PC9hPgojIyMgUGx1Z2luCkV4ZWN1dGluZyBgbnBtIHN0YXJ0YCB3aWxsIHN0YXJ0IGZhc3RpZnkgb24gbG9jYWxob3N0IHBvcnQgMzAwMCB3aXRoIHRoZQpyb3V0ZXMgZXh0cmFjdGVkIGZyb20gdGhlIFtwZXRzdG9yZSBleGFtcGxlXShleGFtcGxlcy9wZXRzdG9yZS9wZXRzdG9yZS1vcGVuYXBpLnYzLmpzb24pIGFuZCB0aGUgW2FjY29tcGFueWluZyBzZXJ2aWNlIGRlZmluaXRpb25dKGV4YW1wbGVzL3BldHN0b3JlL3NlcnZpY2UuanMpCgoqIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92Mi9wZXQvMjQgd2lsbCByZXR1cm4gYSBwZXQgYXMgc3BlY2lmaWVkIGluIHNlcnZpY2UuanMKKiBodHRwOi8vbG9jYWxob3N0OjMwMDAvdjIvcGV0L215UGV0IHdpbGwgcmV0dXJuIGEgZmFzdGlmeSB2YWxpZGF0aW9uIGVycm9yOgoKYGBganNvbgp7CiAgInN0YXR1c0NvZGUiOiA0MDAsCiAgImVycm9yIjogIkJhZCBSZXF1ZXN0IiwKICAibWVzc2FnZSI6ICJwYXJhbXMucGV0SWQgc2hvdWxkIGJlIGludGVnZXIiCn0KYGBgCgoqIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92Mi9wZXQvZmluZEJ5U3RhdHVzP3N0YXR1cz1hdmFpbGFibGUmc3RhdHVzPXBlbmRpbmcgd2lsbCByZXR1cm4KICB0aGUgZm9sbG93aW5nIGVycm9yOgoKYGBganNvbgp7CiAgInN0YXR1c0NvZGUiOiA1MDAsCiAgImVycm9yIjogIkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgIm1lc3NhZ2UiOiAiT3BlcmF0aW9uIGZpbmRQZXRzQnlTdGF0dXMgbm90IGltcGxlbWVudGVkIgp9CmBgYAoKKiBodHRwOi8vbG9jYWxob3N0OjMwMDAvdjIvcGV0LzAgd2lsbCByZXR1cm4gdGhlIGZvbGxvd2luZyBlcnJvcjoKCmBgYGpzb24KewogICJzdGF0dXNDb2RlIjogNTAwLAogICJlcnJvciI6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLAogICJtZXNzYWdlIjoiXCJuYW1lXCIgaXMgcmVxdWlyZWQhIgp9CmBgYAoKYXMgdGhlIHBldCByZXR1cm5lZCBieSBzZXJ2aWNlLmpzIGRvZXMgbm90IG1hdGNoIHRoZSByZXNwb25zZSBzY2hlbWEuCgo8YSBuYW1lPSJnZW5lcmF0b3JFeGFtcGxlcyI+PC9hPgojIyMgR2VuZXJhdG9yClRoZSBmb2xkZXIgW2V4YW1wbGVzL2dlbmVyYXRlZFByb2plY3RdKGV4YW1wbGVzL2dlbmVyYXRlZFByb2plY3QpIGNvbnRhaW5zIHRoZSByZXN1bHQgb2YgcnVubmluZyBgb3BlbmFwaS1nbHVlIC1sIC0tYmFzZURpcj1leGFtcGxlcyBleGFtcGxlcy9wZXRzdG9yZS9wZXRzdG9yZS1zd2FnZ2VyLnYyLnlhbWxgLiBUaGUgZ2VuZXJhdGVkIGNvZGUgY2FuIGJlIHN0YXJ0ZWQgdXNpbmcgYG5wbSBzdGFydGAgaW4gYGV4YW1wbGVzL2dlbmVyYXRlZFByb2plY3RgICh5b3Ugd2lsbCBuZWVkIHRvIHJ1biBgbnBtIGlgIGluIHRoZSBnZW5lcmF0ZWQgZm9sZGVyIGZpcnN0KQo8YSBuYW1lPSJOb3RlcyI+PC9hPgojIyBOb3RlcwotIHRoZSBwbHVnaW4gaWdub3JlcyBpbmZvcm1hdGlvbiBpbiBhIHYzIHNwZWNpZmljYXRpb24gdW5kZXIgYHNlcnZlci91cmxgIGFzIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIHZhbHVlcyBoZXJlLCB1c2UgdGhlIGBwcmVmaXhgIFtvcHRpb25dKCNwbHVnaW5PcHRpb25zKSBpZiB5b3UgbmVlZCB0byBwcmVmaXggeW91ciByb3V0ZXMuIFNlZSB0aGUgW3NlcnZlcnMgZG9jdW1lbnRhdGlvbl0oZG9jcy9zZXJ2ZXJzLm1kKSBmb3IgbW9yZSBkZXRhaWxzLgotIGZhc3RpZnkgb25seSBzdXBwb3J0cyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGB0ZXh0L3BsYWluYCBvdXQgb2YgdGhlIGJveC4gVGhlIGRlZmF1bHQgY2hhcnNldCBpcyBgdXRmLThgLiAgSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBkaWZmZXJlbnQgY29udGVudCB0eXBlcywgeW91IGNhbiB1c2UgdGhlIGZhc3RpZnkgYGFkZENvbnRlbnRUeXBlUGFyc2VyYCBBUEkuCi0gZmFzdGlmeSBvbmx5IHN1cHBvcnRzIG9uZSBzY2hlbWEgcGVyIHJvdXRlLiBTbyB3aGlsZSB0aGUgdjMgc3RhbmRhcmQgYWxsb3dzIGZvciBtdWx0aXBsZSBjb250ZW50IHR5cGVzIHBlciByb3V0ZSwgZWFjaCB3aXRoIHRoZWlyIG93biBzY2hlbWEgdGhpcyBpcyBjdXJyZW50bHkgbm90IGdvaW5nIHRvIHdvcmsgd2l0aCBmYXN0aWZ5LiBQb3RlbnRpYWwgd29ya2Fyb3VuZHMgaW5jbHVkZSBhIGN1c3RvbSBjb250ZW50IHR5cGUgcGFyc2VyIGFuZCBtZXJnaW5nIHNjaGVtYXMgdXBmcm9udCB1c2luZyBKU09OIHNjaGVtYSBgb25lT2ZgLgotIHRoZSBwbHVnaW4gYWltcyB0byBmb2xsb3cgZmFzdGlmeSBhbmQgZG9lcyBub3QgY29tcGVuc2F0ZSBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgcG9zc2libGUgYWNjb3JkaW5nIHRvIHRoZSBPcGVuQXBpIHNwZWNpZmljYXRpb24gYnV0IG5vdCBwb3NzaWJsZSBpbiBzdGFuZGFyZCBmYXN0aWZ5ICh3aXRob3V0IHBsdWdpbnMpLiBUaGlzIHdpbGwga2VlcCB0aGUgcGx1Z2luIGxpZ2h0d2VpZ3RoIGFuZCBtYWludGFpbmFibGUuCi0gaWYgeW91IGhhdmUgc3BlY2lhbCBuZWVkcyBvbiBxdWVyeXN0cmluZyBoYW5kbGluZyAoZS5nLiBhcnJheXMsIG9iamVjdHMgZXRjKSB0aGVuIGZhc3RpZnkgc3VwcG9ydHMgYSBbY3VzdG9tIHF1ZXJ5c3RyaW5nIHBhcnNlcl0oaHR0cHM6Ly93d3cuZmFzdGlmeS5pby9kb2NzL2xhdGVzdC9TZXJ2ZXIvI3F1ZXJ5c3RyaW5ncGFyc2VyKS4gWW91IG1pZ2h0IG5lZWQgdG8gcGFzcyB0aGUgQUpWIG9wdGlvbiBgY29lcmNlVHlwZXM6ICdhcnJheSdgIGFzIGFuIFtvcHRpb25dKCNwbHVnaW5PcHRpb25zKS4KPGEgbmFtZT0iQ29udHJpYnV0aW5nIj48L2E+CiMjIENvbnRyaWJ1dGluZwotIGNvbnRyaWJ1dGlvbnMgYXJlIGFsd2F5cyB3ZWxjb21lLiAKLSBpZiB5b3UgcGxhbiBvbiBzdWJtaXR0aW5nIG5ldyBmZWF0dXJlcyB0aGVuIHBsZWFzZSBjcmVhdGUgYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBhbmQgYXZvaWQgZGlzYXBwb2ludG1lbnRzLgotIG1haW4gZGV2ZWxvcG1lbnQgaXMgZG9uZSBvbiB0aGUgbWFzdGVyIGJyYW5jaCB0aGVyZWZvcmUgUFJzIHRvIHRoYXQgYnJhbmNoIGFyZSBwcmVmZXJyZWQuCi0gcGxlYXNlIG1ha2Ugc3VyZSB5b3UgaGF2ZSBydW4gYG5wbSB0ZXN0YCBiZWZvcmUgeW91IHN1Ym1pdCBhIFBSLgo8YSBuYW1lPSJGYXN0aWZ5LXN3YWdnZXJnZW4iPjwvYT4KIyMgRmFzdGlmeS1zd2FnZ2VyZ2VuCkZhc3RpZnktb3BlbmFwaS1nbHVlIGlzIHRoZSBzdWNjZXNzb3IgdG8gdGhlIG5vdyBkZXByZWNhdGVkIFtmYXN0aWZ5LXN3YWdnZXJnZW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJpb3VzbWUvZmFzdGlmeS1zd2FnZ2VyZ2VuKSBwcm9qZWN0LgpNYWluIGRpZmZlcmVuY2UgaXMgdGhhdCBpdDogCi0gYWltcyB0byBzdXBwb3J0IE9wZW5BcGkgYW5kIG5vdCBqdXN0IFN3YWdnZXIgVjIgKGhlbmNlIHRoZSBuYW1lIGNoYW5nZSkKLSBkb2VzIG5vdCBpbmNsdWRlIGZhc3RpZnktc3dhZ2dlciBzdXBwb3J0IGFueW1vcmUuIElmIHlvdSBuZWVkIHRvIHNob3cgdGhlIHN3YWdnZXIgVUkgeW91IGNhbiBpbmNsdWRlIGl0IHlvdXJzZWxmLiBSZW1vdmluZyB0aGUgc3dhZ2dlciBVSSBjbGVhcnMgdXAgYSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzLgo8YSBuYW1lPSJsaWNlbnNlIj48L2E+CiMgTGljZW5zZQpMaWNlbnNlZCB1bmRlciBbTUlUXShMSUNFTlNFLnR4dCkK
    readmeEtag: '"2c2e5fd4deadfe41432af8e87af37d61f554d9e9aa2731cd018735c47467eb37"'
    readmeLastModified: Fri, 22 Apr 2022 17:06:48 GMT
    description: >-
      A plugin for Fastify to autogenerate a configuration based on a
      OpenApi(v2/v3) specification.
    created: "2018-06-30T19:02:58Z"
    updated: "2022-04-04T18:02:31Z"
    language: JavaScript
    archived: false
    stars: 99
    watchers: 99
    forks: 28
    owner: seriousme
    logo: https://avatars.githubusercontent.com/u/3322396?v=4
    license: MIT
    repoEtag: '"b7d86bf3e8146320166fff9c5b4072bad773fd43a278691f6aba6fb7ae39652c"'
    repoLastModified: Mon, 04 Apr 2022 18:02:31 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/openapi-contrib/openapi3-generator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGgxIGFsaWduPSJjZW50ZXIiPk9wZW5BUEkgMyBHZW5lcmF0b3I8L2gxPgo8cCBhbGlnbj0iY2VudGVyIj4KICBVc2UgeW91ciBBUEkgT3BlbkFQSSAzIGRlZmluaXRpb24gdG8gZ2VuZXJhdGUgY29kZSwgZG9jdW1lbnRhdGlvbiwgYW5kIGxpdGVyYWxseSBhbnl0aGluZyB5b3UgbmVlZC4KPC9wPgoKIyMgSW5zdGFsbAoKVG8gdXNlIGl0IGZyb20gdGhlIENMSToKCmBgYGJhc2gKbnBtIGluc3RhbGwgLWcgb3BlbmFwaTMtZ2VuZXJhdG9yCmBgYAoKIyMgUmVxdWlyZW1lbnRzCgoqIE5vZGUuanMgdjcuNisKCiMjIFVzYWdlCgojIyMgRnJvbSB0aGUgY29tbWFuZC1saW5lIGludGVyZmFjZSAoQ0xJKQoKYGBgYmFzaAogIFVzYWdlOiBvZyBbb3B0aW9uc10gPG9wZW5hcGlGaWxlT3JVUkw+IDx0ZW1wbGF0ZT4KCgogIE9wdGlvbnM6CgogICAgLVYsIC0tdmVyc2lvbiAgICAgICAgICAgICAgICAgIG91dHB1dCB0aGUgdmVyc2lvbiBudW1iZXIKICAgIC1vLCAtLW91dHB1dCA8b3V0cHV0RGlyPiAgICAgICBkaXJlY3Rvcnkgd2hlcmUgdG8gcHV0IHRoZSBnZW5lcmF0ZWQgZmlsZXMgKGRlZmF1bHRzIHRvIGN1cnJlbnQgZGlyZWN0b3J5KQogICAgLXQsIC0tdGVtcGxhdGVzIDx0ZW1wbGF0ZURpcj4gIGRpcmVjdG9yeSB3aGVyZSB0ZW1wbGF0ZXMgYXJlIGxvY2F0ZWQgKGRlZmF1bHRzIHRvIGludGVybmFsIHRlbXBsYXRlcyBkaXJlY3RvcnkpCiAgICAtYiwgLS1iYXNlZGlyIDxiYXNlRGlyPiAgICAgICAgZGlyZWN0b3J5IHRvIHVzZSBhcyB0aGUgYmFzZSB3aGVuIHJlc29sdmluZyBsb2NhbCBmaWxlIHJlZmVyZW5jZXMgKGRlZmF1bHRzIHRvIE9wZW5BUEkgZmlsZSBkaXJlY3RvcnkpCiAgICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgb3V0cHV0IHVzYWdlIGluZm9ybWF0aW9uCmBgYAoKIyMjIyBFeGFtcGxlcwoKVGhlIHNob3J0ZXN0IHBvc3NpYmxlIHN5bnRheDoKYGBgYmFzaApvZyBvcGVuYXBpLnlhbWwgbWFya2Rvd24KYGBgCgpTcGVjaWZ5IHdoZXJlIHRvIHB1dCB0aGUgZ2VuZXJhdGVkIGNvZGU6CmBgYGJhc2gKb2cgLW8gLi9teS1kb2NzIG9wZW5hcGkueWFtbCBtYXJrZG93bgpgYGAKCiMjIFRlbXBsYXRlcwoKIyMjIENyZWF0aW5nIHlvdXIgb3duIHRlbXBsYXRlcwpUZW1wbGF0ZXMgYXJlIHRoZSBzb3VyY2VzIHdoZXJlIHRoZSByZXN1bHQgd2lsbCBiZSBnZW5lcmF0ZWQgZnJvbS4gVGhlcmUgYXJlIGFscmVhZHkgc29tZSB0ZW1wbGF0ZXMKeW91IGNhbiB1c2UgdG8gZ2VuZXJhdGUgY29kZSBhbmQgZG9jdW1lbnRhdGlvbi4KClRoZSBmaWxlcyBpbiB5b3VyIHRlbXBsYXRlIGNhbiBiZSBvZiB0aGUgZm9sbG93aW5nIHR5cGVzOgoxLiBTdGF0aWM6IFRoaXMga2luZCBvZiBmaWxlcyB3aWxsIGJlIHNpbXBseSBjb3BpZWQgdG8gdGhlIG91dHB1dCBkaXJlY3RvcnkuCjIuIFRlbXBsYXRlczogVGhpcyBraW5kIG9mIGZpbGVzIHdpbGwgYmUgY29tcGlsZWQgdXNpbmcgW0hhbmRsZWJhcnNdKGh0dHA6Ly9oYW5kbGViYXJzanMuY29tLyksIGFuZCBjb3BpZWQgdG8gdGhlIG91dHB1dCBkaXJlY3RvcnkuCjMuIFBhdGggdGVtcGxhdGVzOiBUaGlzIGtpbmQgb2YgZmlsZXMgd2lsbCBiZSBjb21waWxlZCB1c2luZyBbSGFuZGxlYmFyc10oaHR0cDovL2hhbmRsZWJhcnNqcy5jb20vKSwgYnV0IGl0IHdpbGwgZ2VuZXJhdGUgb25lIGZpbGUgcGVyIE9wZW5BUEkgcGF0aC4KCkFzc3VtaW5nIHdlIGhhdmUgdGhlIGZvbGxvd2luZyBPcGVuQVBJIFNwZWM6CmBgYHlhbWwKb3BlbmFwaTogIjMuMC4wIgppbmZvOgogIHZlcnNpb246IDEuMC4wCiAgdGl0bGU6IE9wZW5BUEkgUGV0c3RvcmUKICBsaWNlbnNlOgogICAgbmFtZTogTUlUCnNlcnZlcnM6CiAgLSB1cmw6IGh0dHA6Ly9wZXRzdG9yZS5vcGVuYXBpLmlvL3YxCnBhdGhzOgogIC9wZXQ6CiAgICBnZXQ6Li4uCiAgICBwb3N0Oi4uLgogIC9wZXQve3BldElkfToKICAgIGdldDouLi4KICAvdXNlci9sb2dpbjoKICAgIHBvc3Q6Li4uCiAgL3VzZXIve3VzZXJuYW1lfToKICAgIGdldDouLi4KICAgIHB1dDouLi4KICAgIGRlbGV0ZTouLi4KLi4uCmBgYApBbmQgc29tZSB0ZW1wbGF0ZSBmaWxlcyBsaWtlIHRoaXM6CmBgYAp8LSBpbmRleC5qcyAgICAgICAgICAgIC8vIFRoaXMgZmlsZSBjb250YWlucyBzdGF0aWMgY29kZSwgZS5nLiBzdGFydGluZyBhIHdlYnNlcnZlciBhbmQgaW5jbHVkaW5nIC4vYXBpL2luZGV4LmpzCnwrIGFwaS8KIHwtIGluZGV4LmpzLmhicyAgICAgICAvLyBUaGlzIGlzIGEgc3RhdGljIHRlbXBsYXRlLCBpdCBjb250YWlucyBwbGFjZWhvbGRlcnMgdGhhdCB3aWxsIGJlIGZpbGxlZCBpbiwgZS5nLiBpbmNsdWRlcyBmb3IgZWFjaCBmaWxlIGluIHJvdXRlcwogfCsgcm91dGVzLwogIHwtICQkcGF0aCQkLnJvdXRlLmpzLmhicyAgICAgIC8vIFRoaXMgZmlsZSB3aWxsIGJlIGdlbmVyYXRlZCBmb3IgZWFjaCBvcGVyYXRpb24gYW5kIGNvbnRhaW5zIHNrZWxldG9uIGNvZGUgZm9yIGVhY2ggbWV0aG9kIGZvciBhbiBvcGVyYXRpb24uCiAgfCsgJCRwYXRoJCQvICAgICAgICAgICAgICAgICAgLy8gVGhpcyBmb2xkZXIgd2lsbCBhbHNvIGJlIGdlbmVyYXRlZCBmb3IgZWFjaCBvcGVyYXRpb24uCiAgICB8LSByb3V0ZS5qcy5oYnMgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbm90aGVyIGV4YW1wbGUgb2YgYW4gb3BlcmF0aW9uIGZpbGUuCmBgYApUaGUgZmlyc3QgaW1wb3J0YW50IHRoaW5nIHRvIG5vdGljZSBoZXJlIGlzIHRoZSB2YXJpYWJsZSBub3RhdGlvbiBpbiBgJCRwYXRoJCQucm91dGUuanMuaGJzYC4gSXQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgbmFtZSBvZiB0aGUgcGF0aC4KClRoaXMgZXhhbXBsZSBhbHNvIHNob3dzIGAkJHBhdGgkJGAgdXNlZCBpbiBhIGZvbGRlciBuYW1lIC0gdGhlIGdlbmVyYXRlZCBmb2xkZXIgbmFtZXMgaGVyZSB3aWxsIHJlcGxhY2UgJCRwYXRoJCQgd2l0aAp0aGUgbmFtZSBvZiB0aGUgcGF0aCAoaW4ga2ViYWItY2FzZSkuCgpJbiB0aGlzIGV4YW1wbGUgdGhlIGdlbmVyYXRlZCBkaXJlY3Rvcnkgc3RydWN0dXJlIHdpbGwgYmUgbGlrZSB0aGlzOgpgYGAKfC0gaW5kZXguanMgICAgICAgICAgICAvLyBUaGlzIGZpbGUgc3RpbGwgY29udGFpbnMgc3RhdGljIGNvZGUgbGlrZSBiZWZvcmUuCnwrIGFwaS8KIHwtIGluZGV4LmpzICAgICAgICAgICAvLyBUaGlzIGZpbGUgd2lsbCBub3cgZS5nLiBoYXZlIGluY2x1ZGVkIHRoZSB0d28gZmlsZXMgaW4gcm91dGVzLgogfCsgcm91dGVzLwogIHwtIHBldC5yb3V0ZS5qcyAgICAgIC8vIFRoaXMgZmlsZSBjb250YWlucyB0aGUgY29kZSBmb3IgbWV0aG9kcyBvbiBwZXRzLgogIHwgICAgICAgICAgICAgICAgICAgIC8vIChlLmcuIGdldFBldCwgcG9zdFBldCwgZ2V0UGV0QnlQZXRJZCkuCiAgfC0gdXNlci5yb3V0ZS5qcyAgICAgLy8gVGhpcyBmaWxlIHdpbGwgY29udGFpbiB0aGUgY29kZSBmb3IgbWV0aG9kcyBvbiB1c2Vycy4KICB8ICAgICAgICAgICAgICAgICAgICAvLyAoZS5nLiBwb3N0VXNlckxvZ2luLCBnZXRVc2VyQnlVc2VybmFtZSwgcHV0VXNlckJ5VXNlcm5hbWUsIGRlbGV0ZVVzZXJCeVVzZXJuYW1lKS4KICB8KyBwZXQvCiAgIHwgLSByb3V0ZS5qcyAgICAgICAgLy8gdGhpcyBmaWxlIGFsc28gY29udGFpbnMgdGhlIGNvZGUgZm9yIG1ldGhvZHMgb24gcGV0cy4KICB8KyB1c2VyLwogICB8IC0gcm91dGUuanMgICAgICAgIC8vIHRoaXMgZmlsZSBhbHNvIGNvbnRhaW5zIHRoZSBjb2RlIGZvciBtZXRob2RzIG9uIHVzZXJzLgpgYGAKCiMjIyBUZW1wbGF0ZSBmaWxlIGV4dGVuc2lvbnMKWW91IGNhbiAob3B0aW9uYWxseSkgbmFtZSB5b3VyIHRlbXBsYXRlIGZpbGVzIHdpdGggYC5oYnNgIGV4dGVuc2lvbnMsIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIHdyaXRpbmcgdGhlIGdlbmVyYXRlZApmaWxlLiBlLmcuIGBpbmRleC5qcy5oYnNgIHdyaXRlcyBgaW5kZXguanNgLiBgaW5kZXguanNgIHdvdWxkIGFsc28gd3JpdGUgdG8gYGluZGV4LmpzYCwgaWYgeW91IHByZWZlciB0byBvbWl0IHRoZSBoYnMKZXh0ZW5zaW9uLgoKVGhlIG9ubHkgY2FzZSB3aGVyZSB0aGUgYC5oYnNgIGV4dGVuc2lvbiBpc24ndCBvcHRpb25hbCB3b3VsZCBiZSBpZiB5b3UgYXJlIHdyaXRpbmcgaGFuZGxlYmFycyB0ZW1wbGF0ZXMgd2l0aCB0aGUKdGVtcGxhdGVzLiBJbiB0aGF0IGNhc2UgdGhlIHRoZSB0ZW1wbGF0ZSB3b3VsZCBuZWVkIHRoZSBleHRlbnNpb24gYC5oYnMuaGJzYC4gYHVzZXJ0cGwuaGJzLmhic2Agd3JpdGVzIGB1c2VydHBsLmhic2AKKGJ1dCBgdXNlcnRwbC5oYnNgIGFzIGEgc291cmNlIHdvdWxkIHdyaXRlIGB1c2VydHBsYCB3aXRoIG5vIGV4dGVuc2lvbikuCgojIyMgVGVtcGxhdGUgZmlsZSBjb250ZW50ClRoZSBnZW5lcmF0b3IgcGFzc2VzIHRoZSBPcGVuQVBJIHNwZWMgdG8gdGVtcGxhdGUgZmlsZXMsIHNvIGFsbCBpbmZvcm1hdGlvbiBzaG91bGQgYmUgYXZhaWxhYmxlIHRoZXJlLgpJbiBhZGRpdGlvbiB0byB0aGF0LCB0aGUgY29kZSBnZW5lcmF0b3IgYWRkcyBhIGJpdCBbbW9yZSBkYXRhXSgjZGF0YS1wYXNzZWQtdG8taGFuZGxlYmFycy10ZW1wbGF0ZXMpIHRoYXQgY2FuIGJlIGhlbHBmdWwuCgojIyMjIEV4YW1wbGVzOgojIyMjIyBEeW5hbWljYWxseSByZXF1aXJlIGZpbGVzIGluIEphdmFTY3JpcHQKYGBgbXVzdGFjaGUKe3sjZWFjaCBAcm9vdC5vcGVuYXBpLmVuZHBvaW50c319CmNvbnN0IHt7Ln19ID0gcmVxdWlyZSgnLi9yb3V0ZXMve3sufX0ucm91dGUuanMnKQp7ey9lYWNofX0KYGBgCndpbGwgcHJvZHVjZSAodXNpbmcgdGhlIE9BUyBTcGVjIGV4YW1wbGUgZnJvbSBhYm92ZSk6CmBgYGpzCmNvbnN0IHBldCA9IHJlcXVpcmUoJy4vcm91dGVzL3BldC5yb3V0ZS5qcycpCmNvbnN0IHVzZXIgPSByZXF1aXJlKCcuL3JvdXRlcy91c2VyLnJvdXRlLmpzJykKYGBgCgojIyMgRGF0YSBwYXNzZWQgdG8gSGFuZGxlYmFycyB0ZW1wbGF0ZXMKfCBQYXJhbSB8IFR5cGUgfCBEZXNjcmlwdGlvbiB8CnwgLS0tIHwgLS0tIHwgLS0tIHwKfG9wZW5hcGl8b2JqZWN0fFRoZSBPcGVuQVBJIHNwZWMufAp8b3BlbmFwaS5lbmRwb2ludHN8IG9iamVjdCB8IEFsbCBmaXJzdCBsZXZlbCBlbmRwb2ludHMgKGUuZyAgYHBldGAgYW5kIGB1c2VyYCkgfAoKIyMjIEN1c3RvbSBoYW5kbGViYXJzIGhlbHBlcnMKSWYgeW91ciB0ZW1wbGF0ZSBuZWVkcyBIYW5kbGViYXJzIGhlbHBlcnMsIHlvdSBjYW4gZGVmaW5lIHRoZW0gaW4gYSBkaXJlY3RvcnkgY2FsbGVkIGAuaGVscGVyc2AgaW5zaWRlIHlvdXIgdGVtcGxhdGUuCgpDaGVjayBvdXQgc29tZSBleGFtcGxlcyBpbiB0aGUgW21hcmtkb3duXSguL3RlbXBsYXRlcy9tYXJrZG93bi8uaGVscGVycykgdGVtcGxhdGUuCgojIyMgVXNpbmcgaGFuZGxlYmFycyBwYXJ0aWFscwpJZiB5b3Ugd2FudCB0byB1c2UgcGFydGlhbHMgaW4geW91ciB0ZW1wbGF0ZSwgZGVmaW5lIHRoZW0gaW4gYSBkaXJlY3RvcnkgY2FsbGVkIGAucGFydGlhbHNgIGluc2lkZSB5b3VyIHRlbXBsYXRlLgoKQ2hlY2sgb3V0IHNvbWUgZXhhbXBsZXMgaW4gdGhlIFttYXJrZG93bl0oLi90ZW1wbGF0ZXMvbWFya2Rvd24vLnBhcnRpYWxzKSB0ZW1wbGF0ZS4KCj4gVGhlIG5hbWUgb2YgdGhlIHBhcnRpYWwgd2lsbCBiZSBvYnRhaW5lZCBmcm9tIHRoZSBmaWxlIG5hbWUsIGNvbnZlcnRlZCB0byBjYW1lbCBjYXNlLiBTbywgZm9yIGluc3RhbmNlLCBpZiB0aGUgZmlsZSBuYW1lIGlzIGBteS1wYXJ0aWFsLmpzYCwgeW91IGNhbiB1c2UgdGhlIHBhcnRpYWwgd2l0aCBge3s+IG15UGFydGlhbH19YC4KCiMjIEF1dGhvcnMKCiogRnJhbiBNw6luZGV6IChbQGZtdmlsYXNdKGh0dHA6Ly90d2l0dGVyLmNvbS9mbXZpbGFzKSkKKiBSaWNoYXJkIEtsb3NlIChbQHJpY2hhcmRrbG9zZV0oaHR0cDovL2dpdGh1Yi5jb20vcmljaGFyZGtsb3NlKSkK
    readmeEtag: '"89d6d97c3bcc4d27c5080336761ca46b280185c6220c32153cf869affdbfb48e"'
    readmeLastModified: Thu, 11 Jun 2020 10:46:34 GMT
    description: >-
      Use your API OpenAPI 3 definition to generate code, documentation, and
      literally anything you need.
    created: "2018-07-25T13:02:15Z"
    updated: "2022-03-04T10:18:30Z"
    language: JavaScript
    archived: false
    stars: 84
    watchers: 84
    forks: 30
    owner: openapi-contrib
    logo: https://avatars.githubusercontent.com/u/49447320?v=4
    license: Apache-2.0
    repoEtag: '"2e7cbe416737060652fcb7b2d663a3052d01afbd455f2a14a582d128f914c151"'
    repoLastModified: Fri, 04 Mar 2022 10:18:30 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/swagger-api/swagger-petstore
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTd2FnZ2VyIFBldHN0b3JlIFNhbXBsZQoKIyMgT3ZlcnZpZXcKVGhpcyBpcyB0aGUgcGV0IHN0b3JlIHNhbXBsZSBob3N0ZWQgYXQgaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby4gRm9yIG90aGVyIHZlcnNpb25zLCBjaGVjayB0aGUgYnJhbmNoZXMuCldlIHdlbGNvbWUgc3VnZ2VzdGlvbiBib3RoIHRoZSBjb2RlIGFuZCB0aGUgQVBJIGRlc2lnbi4KVG8gbWFrZSBjaGFuZ2VzIHRvIHRoZSBkZXNpZ24gaXRzZWxmLCB0YWtlIGEgbG9vayBhdCBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wZXRzdG9yZS9ibG9iL21hc3Rlci9zcmMvbWFpbi9yZXNvdXJjZXMvb3BlbmFwaS55YW1sLgoKVGhpcyBpcyBhIGphdmEgcHJvamVjdCB0byBidWlsZCBhIHN0YW5kLWFsb25lIHNlcnZlciB3aGljaCBpbXBsZW1lbnRzIHRoZSBPcGVuQVBJIDMgU3BlYy4gIFlvdSBjYW4gZmluZCBvdXQKbW9yZSBhYm91dCBib3RoIHRoZSBzcGVjIGFuZCB0aGUgZnJhbWV3b3JrIGF0IGh0dHA6Ly9zd2FnZ2VyLmlvLgoKVGhpcyBzYW1wbGUgaXMgYmFzZWQgb24gW3N3YWdnZXItaW5mbGVjdG9yXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1pbmZsZWN0b3IpLCBhbmQgcHJvdmlkZXMgYW4gZXhhbXBsZSBvZiBzd2FnZ2VyIC8gT3BlbkFQSSAzIHBldHN0b3JlLgoKIyMjIFRvIHJ1biAod2l0aCBNYXZlbikKVG8gcnVuIHRoZSBzZXJ2ZXIsIHJ1biB0aGlzIHRhc2s6CgpgYGAKbXZuIHBhY2thZ2UgamV0dHk6cnVuCmBgYAoKVGhpcyB3aWxsIHN0YXJ0IEpldHR5IGVtYmVkZGVkIG9uIHBvcnQgODA4MC4KCiMjIyBUbyBydW4gKHZpYSBEb2NrZXIpCgpFeHBvc2UgcG9ydCA4MDgwIGZyb20gdGhlIGltYWdlIGFuZCBhY2Nlc3MgcGV0c3RvcmUgdmlhIHRoZSBleHBvc2VkIHBvcnQuIFlvdSBjYW4gdGhlbiBhZGQgYW5kIGRlbGV0ZSBwZXRzIGFzIHlvdSBzZWUgZml0LgoKCipFeGFtcGxlKjoKCmBgYApkb2NrZXIgYnVpbGQgLXQgc3dhZ2dlcmFwaS9wZXRzdG9yZTM6dW5zdGFibGUgLgpgYGAKCmBgYApkb2NrZXIgcHVsbCBzd2FnZ2VyYXBpL3BldHN0b3JlMzp1bnN0YWJsZQpkb2NrZXIgcnVuICAtLW5hbWUgc3dhZ2dlcmFwaS1wZXRzdG9yZTMgLWQgLXAgODA4MDo4MDgwIHN3YWdnZXJhcGkvcGV0c3RvcmUzOnVuc3RhYmxlCmBgYAoKCiMjIyBUZXN0aW5nIHRoZSBzZXJ2ZXIKT25jZSBzdGFydGVkLCB5b3UgY2FuIG5hdmlnYXRlIHRvIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjMvb3BlbmFwaS5qc29uIHRvIHZpZXcgdGhlIFN3YWdnZXIgUmVzb3VyY2UgTGlzdGluZy4KVGhpcyB0ZWxscyB5b3UgdGhhdCB0aGUgc2VydmVyIGlzIHVwIGFuZCByZWFkeSB0byBkZW1vbnN0cmF0ZSBTd2FnZ2VyLgoKIyMjIFVzaW5nIHRoZSBVSQpUaGVyZSBpcyBhbiBIVE1MNS1iYXNlZCBBUEkgdG9vbCBidW5kbGVkIGluIHRoaXMgc2FtcGxlLS15b3UgY2FuIHZpZXcgaXQgaXQgYXQgW2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MF0oaHR0cDovL2xvY2FsaG9zdDo4MDgwKS4gVGhpcyBsZXRzIHlvdSBpbnNwZWN0IHRoZSBBUEkgdXNpbmcgYW4gaW50ZXJhY3RpdmUgVUkuICBZb3UgY2FuIGFjY2VzcyB0aGUgc291cmNlIG9mIHRoaXMgY29kZSBmcm9tIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aSkK
    readmeEtag: '"c9ae979c7a6a08c69357e19c67998e0e9dfdbf3954cb8084fcde4fc82104a106"'
    readmeLastModified: Mon, 14 Feb 2022 17:30:08 GMT
    description: null
    created: "2019-09-07T14:54:31Z"
    updated: "2022-04-16T19:23:12Z"
    language: Java
    archived: false
    stars: 81
    watchers: 81
    forks: 158
    owner: swagger-api
    logo: https://avatars.githubusercontent.com/u/7658037?v=4
    license: Apache-2.0
    repoEtag: '"433dcbdf700b8da91e6dc15338cef9e8c44891619423f9d6d3f7b7506af9f705"'
    repoLastModified: Sat, 16 Apr 2022 19:23:12 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/skellla/fastify-oas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"be45d4ee9884ca559f2c6c0338699fdf1c39825473f951078f97adb44610f0c2"'
    readmeLastModified: Thu, 28 Jan 2021 08:59:52 GMT
    description: Fastify OpenAPI plugin.
    created: "2018-07-24T21:09:52Z"
    updated: "2022-03-22T07:29:15Z"
    language: JavaScript
    archived: false
    stars: 68
    watchers: 68
    forks: 18
    owner: SkeLLLa
    logo: https://avatars.githubusercontent.com/u/2273103?v=4
    license: MIT
    repoEtag: '"cc9f999dd02c1a051a49ac58c59aa5428ce37c3bc09f49d9378e11dfd895a3e2"'
    repoLastModified: Tue, 22 Mar 2022 07:29:15 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/atlassian/oas3-chow-chow
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvYXMzLWNob3ctY2hvdwoKPiBSZXF1ZXN0IGFuZCByZXNwb25zZSB2YWxpZGF0b3IgYWdhaW5zdCBPcGVuQVBJIFNwZWNpZmljYXRpb24KClshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2F0bGFzc2lhbi9vYXMzLWNob3ctY2hvdy5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9hdGxhc3NpYW4vb2FzMy1jaG93LWNob3cpClshW25wbV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vdi9vYXMzLWNob3ctY2hvdy5zdmc/c3R5bGU9ZmxhdCldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29hczMtY2hvdy1jaG93KQoKIyMgTm90ZXMKCklmIHlvdSBhcmUgbG9va2luZyBmb3IgZnJhbWV3b3JrIHNwZWNpZmljIG1pZGRsZXdhcmUsIHlvdSBtaWdodCB3YW50IHRvIGxvb2sgYXQgZm9sbG93aW5nIGxpYnJhcmllcyB0aGF0IHVzZSBvYXMzLWNob3ctY2hvdyB1bmRlciB0aGUgaG9vZC4KCltrb2Etb2FzM10oaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9rb2Etb2FzMykKW29wZW5hcGkzLW1pZGRsZXdhcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9uYXVndHVyL29wZW5hcGkzLW1pZGRsZXdhcmUpCgojIyBJbnN0YWxsYXRpb24KCmBgYGJhc2gKJCB5YXJuIGFkZCBvYXMzLWNob3ctY2hvdwokICMgT3IKJCBucG0gaSBvYXMzLWNob3ctY2hvdwpgYGAKCiMjIFVzYWdlCgpgYGB0eXBlc2NyaXB0CmltcG9ydCBDaG93Q2hvdyBmcm9tICJvYXMzLWNob3ctY2hvdyI7CmltcG9ydCAqIGFzIGZzIGZyb20gImZzIjsKaW1wb3J0ICogYXMgeWFtbCBmcm9tICJqcy15YW1sIjsKCnZhciBkb2MgPSB5YW1sLnNhZmVMb2FkKGZzLnJlYWRGaWxlU3luYygiLi9vcGVuYXBpLnltbCIsICJ1dGY4IikpOwpjb25zdCBjaG93ID0gbmV3IENob3dDaG93KGRvYyk7CgovLyBGb3IgVVJMOiAvOnBhdGhQYXJhbS9pbmZvP2FyclBhcmFtPXgmYXJyUGFyYW09eSZvdGhlcj16CmNob3cudmFsaWRhdGVSZXF1ZXN0QnlQYXRoKAogIC8vIHVybC5wYXRobmFtZSwKICAiL2Jvb2tzL2luZm8iLAogICJQT1NUIiwgewogICAgcGF0aDogeyBwYXRoUGFyYW06ICJib29rcyIgfSwKICAgIC8vIHF1ZXJ5OiBxdWVyeXN0cmluZy5wYXJzZSh1cmwuc2VhcmNoLnN1YnN0cigxKSksCiAgICBxdWVyeTogeyBhcnJQYXJhbTogWyJ4IiwgInkiXSwgb3RoZXI6ICJ6IiB9LAogICAgLy8gaGVhZGVyOiByZXEuaGVhZGVycywKICAgIGhlYWRlcjogeyAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iIH0sCiAgICBib2R5OiB7IGE6IDEsIGI6IDIgfSwKICB9Cik7CmNob3cudmFsaWRhdGVSZXNwb25zZUJ5UGF0aCgiL2Jvb2tzL2luZm8iLCAiUE9TVCIsIHsKICBoZWFkZXI6IHsgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiB9LAogIGJvZHk6IHsKICAgIG5hbWU6ICJhIG5pY2UgYm9vayIsCiAgICBhdXRob3I6ICJtZSBtZSBtZSIKICB9Cn0pOwpgYGAKCiMjIENvbmZpZwoKWW91IGNvdWxkIG9wdGlvbmFsbHkgcHJvdmlkZSBjb25maWdzIHRvIHRoZSBjb25zdHJ1Y3RvcgpgYGB0eXBlc2NyaXB0CmNvbnN0IGNob3cgPSBuZXcgQ2hvd0Nob3coZG9jLCB7CiAgaGVhZGVyQWp2T3B0aW9uczoge30sCiAgY29va2llQWp2T3B0aW9uczoge30sCiAgcGF0aEFqdk9wdGlvbnM6IHsgY29lcmNlVHlwZXM6IHRydWUgfSwKICBxdWVyeUFqdk9wdGlvbnM6IHsgY29lcmNlVHlwZXM6ICdhcnJheScgfSwKICByZXF1ZXN0Qm9keUFqdk9wdGlvbnM6IHt9LAogIHJlc3BvbnNlQm9keUFqdk9wdGlvbnM6IHt9LAp9KTsKYGBgCgoqICoqaGVhZGVyQWp2T3B0aW9ucyoqOiBBanYgb3B0aW9ucyB0aGF0IHBhc3MgdG8gaGVhZGVyIGFqdiBpbnN0YW5jZQoqICoqY29va2llQWp2T3B0aW9ucyoqOiBBanYgb3B0aW9ucyB0aGF0IHBhc3MgdG8gY29va2llIGFqdiBpbnN0YW5jZQoqICoqcGF0aEFqdk9wdGlvbnMqKjogQWp2IG9wdGlvbnMgdGhhdCBwYXNzIHRvIHBhdGggYWp2IGluc3RhbmNlLCBkZWZhdWx0IGB7IGNvZXJjZVR5cGVzOiB0cnVlIH1gCiogKipxdWVyeUFqdk9wdGlvbnMqKjogQWp2IG9wdGlvbnMgdGhhdCBwYXNzIHRvIHF1ZXJ5IGFqdiBpbnN0YW5jZSwgZGVmYXVsdCBgeyBjb2VyY2VUeXBlczogJ2FycmF5JyB9YAoqICoqcmVxdWVzdEJvZHlBanZPcHRpb25zKio6IEFqdiBvcHRpb25zIHRoYXQgcGFzcyB0byByZXF1ZXN0IGJvZHkgYWp2IGluc3RhbmNlCiogKipyZXNwb25zZUJvZHlBanZPcHRpb25zKio6IEFqdiBvcHRpb25zIHRoYXQgcGFzcyB0byByZXNwb25zZSBib2R5IGFqdiBpbnN0YW5jZQoKIyMgQ29udHJpYnV0b3JzCgpQdWxsIHJlcXVlc3RzLCBpc3N1ZXMgYW5kIGNvbW1lbnRzIHdlbGNvbWUuIEZvciBwdWxsIHJlcXVlc3RzOgoKKiBBZGQgdGVzdHMgZm9yIG5ldyBmZWF0dXJlcyBhbmQgYnVnIGZpeGVzCiogRm9sbG93IHRoZSBleGlzdGluZyBzdHlsZQoqIFNlcGFyYXRlIHVucmVsYXRlZCBjaGFuZ2VzIGludG8gbXVsdGlwbGUgcHVsbCByZXF1ZXN0cwoqIFNlZSB0aGUgZXhpc3RpbmcgaXNzdWVzIGZvciB0aGluZ3MgdG8gc3RhcnQgY29udHJpYnV0aW5nLgoKRm9yIGJpZ2dlciBjaGFuZ2VzLCBtYWtlIHN1cmUgeW91IHN0YXJ0IGEgZGlzY3Vzc2lvbiBmaXJzdCBieSBjcmVhdGluZyBhbiBpc3N1ZSBhbmQgZXhwbGFpbmluZyB0aGUgaW50ZW5kZWQgY2hhbmdlLgoKQXRsYXNzaWFuIHJlcXVpcmVzIGNvbnRyaWJ1dG9ycyB0byBzaWduIGEgQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQsIGtub3duIGFzIGEgQ0xBLiBUaGlzIHNlcnZlcyBhcyBhIHJlY29yZCBzdGF0aW5nIHRoYXQgdGhlIGNvbnRyaWJ1dG9yIGlzIGVudGl0bGVkIHRvIGNvbnRyaWJ1dGUgdGhlIGNvZGUvZG9jdW1lbnRhdGlvbi90cmFuc2xhdGlvbiB0byB0aGUgcHJvamVjdCBhbmQgaXMgd2lsbGluZyB0byBoYXZlIGl0IHVzZWQgaW4gZGlzdHJpYnV0aW9ucyBhbmQgZGVyaXZhdGl2ZSB3b3JrcyAob3IgaXMgd2lsbGluZyB0byB0cmFuc2ZlciBvd25lcnNoaXApLgoKUHJpb3IgdG8gYWNjZXB0aW5nIHlvdXIgY29udHJpYnV0aW9ucyB3ZSBhc2sgdGhhdCB5b3UgcGxlYXNlIGZvbGxvdyB0aGUgYXBwcm9wcmlhdGUgbGluayBiZWxvdyB0byBkaWdpdGFsbHkgc2lnbiB0aGUgQ0xBLiBUaGUgQ29ycG9yYXRlIENMQSBpcyBmb3IgdGhvc2Ugd2hvIGFyZSBjb250cmlidXRpbmcgYXMgYSBtZW1iZXIgb2YgYW4gb3JnYW5pemF0aW9uIGFuZCB0aGUgaW5kaXZpZHVhbCBDTEEgaXMgZm9yIHRob3NlIGNvbnRyaWJ1dGluZyBhcyBhbiBpbmRpdmlkdWFsLgoKKiBbQ0xBIGZvciBjb3Jwb3JhdGUgY29udHJpYnV0b3JzXShodHRwczovL25hMi5kb2N1c2lnbi5uZXQvTWVtYmVyL1Bvd2VyRm9ybVNpZ25pbmcuYXNweD9Qb3dlckZvcm1JZD1lMWMxN2M2Ni1jYTRkLTRhYWItYTk1My0yYzIzMWFmNGEyMGIpCiogW0NMQSBmb3IgaW5kaXZpZHVhbHNdKGh0dHBzOi8vbmEyLmRvY3VzaWduLm5ldC9NZW1iZXIvUG93ZXJGb3JtU2lnbmluZy5hc3B4P1Bvd2VyRm9ybUlkPTNmOTRmYmRjLTJmYmUtNDZhYy1iMTRjLTVkMTUyNzAwYWU1ZCkK
    readmeEtag: '"e518bce60ba121a988da6a2525119a50583052e744aa9728fbd5d18359b4f607"'
    readmeLastModified: Mon, 15 Nov 2021 03:47:17 GMT
    description: Request and response validator against OpenAPI Specification 3
    created: "2018-02-21T02:16:51Z"
    updated: "2022-03-13T11:54:49Z"
    language: TypeScript
    archived: false
    stars: 39
    watchers: 39
    forks: 22
    owner: atlassian
    logo: https://avatars.githubusercontent.com/u/168166?v=4
    license: NOASSERTION
    repoEtag: '"3f489fe1c237c036d443973d3a4f8972f1620446227e2f4803bc6b3e9022e532"'
    repoLastModified: Sun, 13 Mar 2022 11:54:49 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/networknt/light-codegen
  v3: true
  repositoryMetadata:
    base64Readme: >-
      QSBjb2RlIGdlbmVyYXRvciBiYXNlZCBvbiBbcm9ja2VyXShodHRwczovL2dpdGh1Yi5jb20vZml6emVkL3JvY2tlcikgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGNvbW1hbmQgbGluZSB1dGlsaXR5IG9yIHdlYiBzZXJ2aWNlLgoKW1N0YWNrIE92ZXJmbG93XShodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvbGlnaHQtNGopIHwKW0dvb2dsZSBHcm91cF0oaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIWZvcnVtL2xpZ2h0LTRqKSB8CltHaXR0ZXIgQ2hhdF0oaHR0cHM6Ly9naXR0ZXIuaW0vbmV0d29ya250L2xpZ2h0LWNvZGVnZW4pIHwKW1N1YnJlZGRpdF0oaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2xpZ2h0YXBpLykgfApbWW91dHViZSBDaGFubmVsXShodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDSENSTVdKVlh3OGlCN3pLeEY1NUJ5dykgfApbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2MubmV0d29ya250LmNvbS90b29sL2xpZ2h0LWNvZGVnZW4vKSB8CltDb250cmlidXRpb24gR3VpZGVdKGh0dHBzOi8vZG9jLm5ldHdvcmtudC5jb20vY29udHJpYnV0ZS8pIHwKClshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly90cmF2aXMtY2kub3JnL25ldHdvcmtudC9saWdodC1jb2RlZ2VuLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL25ldHdvcmtudC9saWdodC1jb2RlZ2VuKQoKVGhlIExpZ2h0IHBsYXRmb3JtIGNvbnRhaW5zIHNldmVyYWwgZnJhbWV3b3JrcyB0byBidWlsZCBkaWZmZXJlbnQgc3R5bGVzIG9mIEFQSXMgb3IgbWljcm9zZXJ2aWNlcyBiYXNlZCBvbiB0aGUgY29udHJhY3Qgc3BlY2lmaWNhdGlvbnMuIEl0IGVuY291cmFnZXMgdXNlcnMgdG8gY3JlYXRlIHNlcnZpY2UgY29udHJhY3Qgc3BlY2lmaWNhdGlvbiBiZWZvcmUgY29kaW5nLCBhbmQgaXQgd291bGQgYmUgbmljZSBpZiB3ZSBjYW4gc2NhZmZvbGQgYSBwcm9qZWN0IGJhc2VkIG9uIHRoZSBkZXNpZ25lZCBzcGVjaWZpY2F0aW9uLiBGdXJ0aGVyLCBpdCB3b3VsZCBiZSBldmVuIHN3ZWV0ZXIgaWYgd2UgY291bGQgdXRpbGl6ZSB0aGUgc3BlY2lmaWNhdGlvbiBkdXJpbmcgcnVudGltZSB0byB2ZXJpZnkgdGhlIHNlY3VyaXR5IGFuZCB2YWxpZGF0ZSBpbnB1dCByZXF1ZXN0L291dCByZXNwb25zZSBiYXNlZCBvbiB0aGUgc2FtZSBzcGVjaWZpY2F0aW9uLiAKCkJlZm9yZSB3ZSBidWlsdCBvdXIgZ2VuZXJhdG9yLCB3ZSBsb29rZWQgYXQgdGhlIG9wZW4tc291cmNlIGNvbW11bml0eSBhbmQgY291bGRuJ3QgZmluZCBhbnl0aGluZyBzdWl0YWJsZSBmb3Igb3VyIG5lZWRzLiBTbyB3ZSBjcmVhdGVkIG9uZSBvdmVyIGEgd2Vla2VuZCwgYW5kIGl0IHR1cm5lZCBvdXQgdmVyeSBzdWNjZXNzZnVsLiBJZiB5b3Ugd2FudCB0byBrbm93IG1vcmUgYWJvdXQgaXQsIHBsZWFzZSBjaGVjayBvdXQgdGhlIFtsaWdodC1jb2RlZ2VuIGRvY3VtZW50XShodHRwczovL2RvYy5uZXR3b3JrbnQuY29tL3Rvb2wvbGlnaHQtY29kZWdlbi8pLgoKVGhlIGdlbmVyYXRvciBpcyB2ZXJ5IGVhc3kgdG8gdXNlLCBhbmQgdGhlcmUgYXJlIG51bWVyaWMgd2F5cyB0byB1c2UgaXQuIENvbW1hbmQtbGluZSwgRG9ja2VyLCBTY3JpcHRpbmcsIGFuZCBbV2ViIFVJXShodHRwczovL2NvZGVnZW4ubGlnaHRhcGkubmV0KS4gVG8gZ2V0IHN0YXJ0ZWQsIHBsZWFzZSBmb2xsb3cgdGhlIFtnZXR0aW5nLXN0YXJ0ZWRdKGh0dHBzOi8vZG9jLm5ldHdvcmtudC5jb20vZ2V0dGluZy1zdGFydGVkL2xpZ2h0LWNvZGVnZW4vKS4KCklmIHlvdSB3YW50IHRvIGtub3cgYWxsIHRoZSBvcHRpb25zIHdpdGggdGhlIGxpZ2h0LWNvZGVnZW4sIHlvdSBjYW4gZm9sbG93IHRoZSB0dXRvcmlhbHMgZm9yIGVhY2ggZ2VuZXJhdG9yIGF0IFtsaWdodC1jb2RlZ2VuIHR1dG9yaWFsXShodHRwczovL2RvYy5uZXR3b3JrbnQuY29tL3R1dG9yaWFsL2dlbmVyYXRvci8pLgoKQWxzbywgdGhlcmUgYXJlIHNvIG1hbnkgW290aGVyIHR1dG9yaWFsc10oaHR0cHM6Ly9kb2MubmV0d29ya250LmNvbS90dXRvcmlhbC8pIHRoYXQgYXJlIHVzaW5nIGxpZ2h0LWNvZGVnZW4gdG8gc2NhZmZvbGQgcHJvamVjdHMsIGFuZCB0aGVzZSBjYW4gYmUgZm91bmQgaW4gdGhlIHR1dG9yaWFsIHNlY3Rpb24uIAoKCg==
    description: >-
      A code generator based on rocker that can be used as an utility or web
      service
    created: "2017-04-23T01:25:59Z"
    updated: "2021-11-20T21:26:14Z"
    language: Java
    archived: false
    stars: 35
    watchers: 35
    forks: 21
    owner: networknt
    logo: https://avatars.githubusercontent.com/u/8740739?v=4
    license: Apache-2.0
    repoEtag: '"08b2a4a5ced906d2453894fcb8e5d451d50dc745c6577bde3a4d9518ad7994a2"'
    repoLastModified: Fri, 18 Feb 2022 02:28:46 GMT
    readmeEtag: '"aa09a94a0935f14e3d462f1bc8156fcb8af9c24abda121af8302e4186d115137"'
    readmeLastModified: Tue, 01 Mar 2022 20:26:33 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/wol-soft/php-json-schema-model-generator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"0281bdf11b4e6cb1f56fb572562bae2697b35c16bb49dba08fc925e7da30bec9"'
    readmeLastModified: Thu, 17 Mar 2022 16:19:33 GMT
    description: >-
      Creates (immutable) PHP model classes from JSON-Schema files including all
      validation rules as PHP code
    created: "2018-04-19T15:03:37Z"
    updated: "2022-04-07T05:28:42Z"
    language: PHP
    archived: false
    stars: 35
    watchers: 35
    forks: 6
    owner: wol-soft
    logo: https://avatars.githubusercontent.com/u/14750468?v=4
    license: MIT
    repoEtag: '"3fea20fa306ae51692f3d5ca52b6b0e6c099254138bcafc34334472fa4ee25ff"'
    repoLastModified: Thu, 07 Apr 2022 05:28:42 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/openapitools/openapi-petstore
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIHBldHN0b3JlCgpUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPcGVuQVBJIHBldCBzdG9yZSBiYXNlZCBvbiBTcHJpbmctQm9vdC4KCiMjIE92ZXJ2aWV3CgpTdGFydCB5b3VyIHNlcnZlciBhcyBhIHNpbXBsZSBTcHJpbmctQm9vdCBhcHBsaWNhdGlvbgpgYGAKbXZuIHNwcmluZy1ib290OnJ1bgpgYGAKT3IgcGFja2FnZSBpdCB0aGVuIHJ1biBpdCBhcyBhIEphdmEgYXBwbGljYXRpb24KYGBgCm12biBwYWNrYWdlCmphdmEgLWphciB0YXJnZXQvb3BlbmFwaS1wZXRzdG9yZS17VkVSU0lPTn0uamFyCmBgYAoKWW91IGNhbiB2aWV3IHRoZSBhcGkgZG9jdW1lbnRhdGlvbiBpbiBzd2FnZ2VyLXVpIGJ5IHBvaW50aW5nIHRvICAKaHR0cDovL2xvY2FsaG9zdDo4MDgwLwoKIyMgRG9ja2VyCgpUbyBzdGFydCB0aGUgc2VydmVyIHZpYSBkb2NrZXIsIHBsZWFzZSBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kczoKYGBgc2gKZG9ja2VyIHB1bGwgb3BlbmFwaXRvb2xzL29wZW5hcGktcGV0c3RvcmUKZG9ja2VyIHJ1biAtZCAtZSBPUEVOQVBJX0JBU0VfUEFUSD0vdjMgLXAgODA6ODA4MCBvcGVuYXBpdG9vbHMvb3BlbmFwaS1wZXRzdG9yZQpgYGAKClJlZjogaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL29wZW5hcGl0b29scy9vcGVuYXBpLXBldHN0b3JlLwoKIyMgU2VjdXJpdHkKCiMjIyBBUEkga2V5ClVzZSBgc3BlY2lhbC1rZXlgIGZvciBlbmRwb2ludHMgcHJvdGVjdGVkIGJ5IHRoZSBBUEkga2V5CgojIyMgT0F1dGgyCkJ5IGRlZmF1bHQgdGhlIHNlcnZlciBzdXBwb3J0cyB0aGUgaW1wbGljaXQgYW5kIHRoZSBwYXNzd29yZCBmbG93IChldmVuIHRob3VnaCBvbmx5IHRoZSBpbXBsaWNpdCBmbG93IGlzIGRlc2NyaWJlZCBpbiB0aGUgT0FJIHNwZWMpClRoZSBkZWZhdWx0IGNyZWRlbnRpYWxzIGFyZToKKiBjbGllbnQtaWQ6IHNhbXBsZS1jbGllbnQtaWQKKiBjbGllbnQtc2VjcmV0OiBzZWNyZXQKKiB1c2VybmFtZTogdXNlcgoqIHBhc3N3b3JkOiB1c2VyCgojIyBDb25maWd1cmF0aW9uCgpTcHJpbmcgcGFyYW1ldGVycyBpbiBhcHBsaWNhdGlvbi5wcm9wZXJ0aWVzOgoqIFNlcnZlciBwb3J0IDogYHNlcnZlci5wb3J0YCAoZGVmYXVsdD04MDgwKQoqIEFQSSBiYXNlIHBhdGggOiBgb3BlbmFwaS5vcGVuQVBJUGV0c3RvcmUuYmFzZS1wYXRoYCAoZGVmYXVsdD0vdjMpLiBJbiB0aGUgZG9ja2VyIGltYWdlIHRoZSBiYXNlIHBhdGggY2FuIGFsc28gYmUgc2V0IHdpdGggdGhlIGBPUEVOQVBJX0JBU0VfUEFUSGAgZW52aXJvbm1lbnQgdmFyaWFibGUuCgpFbnZpcm9ubWVudCB2YXJpYWJsZXM6CiogYERJU0FCTEVfQVBJX0tFWWAgOiBpZiBzZXQgdG8gIjEiLCB0aGUgc2VydmVyIHdpbGwgbm90IGNoZWNrIHRoZSBhcGkga2V5IGZvciB0aGUgcmVsZXZhbnQgZW5kcG9pbnRzLgoqIGBESVNBQkxFX09BVVRIYCA6IGlmIHNldCB0byAiMSIsIHRoZSBzZXJ2ZXIgd2lsbCBub3QgY2hlY2sgZm9yIGFuIE9BdXRoMiBhY2Nlc3MgdG9rZW4uCgojIyBMaWNlbnNlCgpbQXBhY2hlIDIuMCBMaWNlbnNlXShodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAp
    description: The pet store sample
    created: "2018-06-05T15:27:38Z"
    updated: "2021-10-21T14:29:01Z"
    language: Java
    archived: false
    stars: 32
    watchers: 32
    forks: 28
    owner: OpenAPITools
    logo: https://avatars.githubusercontent.com/u/37325267?v=4
    license: Apache-2.0
    repoEtag: '"a2f261141d3e6b06bce1aae2f635abd31f8c72e22ae3abc6b93359dc4aee813e"'
    repoLastModified: Sat, 22 Jan 2022 06:37:46 GMT
    readmeEtag: '"7316156961f1daa3bfeafdf9e5932b66422e9b687c3c5aa4b94ea2c0f60fc2e7"'
    readmeLastModified: Mon, 13 Aug 2018 06:24:53 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/contentjet/openapi-ui
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIFVJCgpUaGlzIGlzIGEgUmVhY3QgYmFzZWQgc2luZ2xlIHBhZ2UgYXBwIHdoaWNoIHJlbmRlcnMgZG9jdW1lbnRhdGlvbiBmcm9tIGEgdmFsaWQgT3BlbkFQSSAzLjAuMC1SQzAgZG9jdW1lbnQuCgojIE5PVEUKClRoaXMgcHJvamVjdCB3YXMgZXhwZXJpbWVudGFsIGFuZCBpcyBub3QgYmVpbmcgYWN0aXZlbHkgbWFpbnRhaW5lZC4KCiMjIEdldHRpbmcgc3RhcnRlZAoKIyMjIyBQcm9qZWN0IHNldHVwCgpJbnN0YWxsIHByb2plY3QgZGVwZW5kZW5jaWVzOgoKYGBgCm5wbSBpbnN0YWxsCmBgYAoKIyMjIyBSdW4gZGV2ZWxvcG1lbnQgc2VydmVyCgpgYGAKbnBtIHN0YXJ0CmBgYAoKIyMjIyBSdW4gbGludGVyCgpgYGAKbnBtIHJ1biBsaW50CmBgYAoKIyMjIyBDcmVhdGUgcHJvZHVjdGlvbiBidWlsZAoKYGBgCm5wbSBydW4gYnVpbGQKYGBgCg==
    description: React based OpenAPI 3.0+ documentation generator
    created: "2017-03-10T10:16:22Z"
    updated: "2020-11-16T11:46:38Z"
    language: JavaScript
    archived: false
    stars: 31
    watchers: 31
    forks: 3
    owner: contentjet
    logo: https://avatars.githubusercontent.com/u/21168640?v=4
    repoEtag: '"fb837596e5f1db74efaee9135eff6e4921bddf245fa65d6581ffdb36736af7fb"'
    repoLastModified: Mon, 16 Nov 2020 11:46:38 GMT
    readmeEtag: '"5bb64be7ca4f2f181bd66d867a8285694b6d110b2952a29a1ed1c1e41d1c5f49"'
    readmeLastModified: Thu, 15 Aug 2019 06:16:12 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/outofcoffee/vertx-oas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyB2ZXJ0eC1vYXMKCkdlbmVyYXRlcyBhIFN3YWdnZXIvT3BlbkFQSSBzcGVjaWZpY2F0aW9uIGZyb20gYSBWZXJ0LnggV2ViIFJvdXRlci4KCiMjIFVzYWdlCgpBc3N1bWluZyB5b3UncmUgdXNpbmcgVmVydC54IFdlYiwgdXNlIGl0IHdpdGggeW91ciBgUm91dGVyYCBhcyBmb2xsb3dzOgoKYGBgamF2YQovLyB5b3VyIG5vcm1hbCBWZXJ0LnggV2ViIFJvdXRlciB3aXRoIHBhdGhzIGV0Yy4KUm91dGVyIHJvdXRlciA9IFJvdXRlci5yb3V0ZXIodmVydHgpOwpyb3V0ZXIucG9zdCgiL3VzZXJzIikuaGFuZGxlciggcm91dGluZ0NvbnRleHQgLT4geyAvKiBldGMuLi4gKi8gfSk7CnJvdXRlci5nZXQoIi91c2Vycy86dXNlcklkIikuaGFuZGxlciggcm91dGluZ0NvbnRleHQgLT4geyAvKiBldGMuLi4gKi8gfSk7CgovLyBwdWJsaXNoIHRoZSBTd2FnZ2VyL09wZW5BUEkgc3BlY2lmaWNhdGlvbiB0byBhIFVSTApSb3V0ZXJTcGVjR2VuZXJhdG9yLnB1Ymxpc2hBcGlEb2NzKHJvdXRlciwgIi9hcGkvc3BlYyIpOwpgYGAKCkluIHRoaXMgZXhhbXBsZSwgdGhlIHNwZWNpZmljYXRpb24gaXMgcHVibGlzaGVkIHRvIGAvYXBpL3NwZWNgLgoKWW91IGNhbiBvYnRhaW4gWUFNTCBvciBKU09OIHZlcnNpb25zIG9mIHRoZSBzcGVjaWZpY2F0aW9uIGJ5IGFkZGluZyB0aGUgYXBwcm9wcmlhdGUgZmlsZSBleHRlbnNpb24uCgotLS0KCkZvciBleGFtcGxlLCBmZXRjaGluZyBgL2FwaS9zcGVjLnlhbWxgIHdvdWxkIHByb2R1Y2U6CgpgYGB5YW1sCm9wZW5hcGk6ICIzLjAuMSIKaW5mbzoKICB0aXRsZTogIlZlcnQueCBBUElzIgogIGRlc2NyaXB0aW9uOiAiVGhpcyBzcGVjaWZpY2F0aW9uIHdhcyBnZW5lcmF0ZWQgZnJvbSBhIFZlcnQueCBXZWIgUm91dGVyLiIKcGF0aHM6CiAgL3VzZXJzOgogICAgcG9zdDoKICAgICAgcGFyYW1ldGVyczogW10KICAvdXNlcnMve3VzZXJJZH06CiAgICBnZXQ6CiAgICAgIHBhcmFtZXRlcnM6CiAgICAgIC0gbmFtZTogInVzZXJJZCIKICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgIGFsbG93RW1wdHlWYWx1ZTogZmFsc2UKYGBgCgojIyBMaW1pdGF0aW9ucwoKLSBEb2Vzbid0IHVuZGVyc3RhbmQgcmVnZXggcGF0aHMKLSBEb2Vzbid0IGtub3cgdGhlIHR5cGUgb2YgcGF0aCBwYXJhbWV0ZXJzCi0gRG9lc24ndCBrbm93IGFib3V0IHJlcXVlc3Qgb3IgcmVzcG9uc2UgYm9keSBtb2RlbHMKCiMjIFVzZSBpbiB5b3VyIHByb2plY3QKCiMjIyBNYXZlbgoKQWRkIHJlcG9zaXRvcnk6CgpgYGB4bWwKPHByb2plY3Q+Ci4uLgogIDxyZXBvc2l0b3JpZXM+CiAgICA8cmVwb3NpdG9yeT4KICAgICAgPGlkPmdhdGVoaWxsc29mdHdhcmUtc25hcHNob3RzPC9pZD4KICAgICAgPG5hbWU+R2F0ZWhpbGwgU29mdHdhcmUgU25hcHNob3RzPC9uYW1lPgogICAgICA8dXJsPmh0dHBzOi8vczMtZXUtd2VzdC0xLmFtYXpvbmF3cy5jb20vZ2F0ZWhpbGxzb2Z0d2FyZS1tYXZlbi9zbmFwc2hvdHM8L3VybD4KICAgIDwvcmVwb3NpdG9yeT4KICAgIDxyZXBvc2l0b3J5PgogICAgICA8aWQ+c29uYXR5cGUtc25hcHNob3RzPC9pZD4KICAgICAgPG5hbWU+U29uYXR5cGUgT1NTIFNuYXBzaG90czwvbmFtZT4KICAgICAgPHVybD5odHRwczovL29zcy5zb25hdHlwZS5vcmcvY29udGVudC9yZXBvc2l0b3JpZXMvc25hcHNob3RzPC91cmw+CiAgICA8L3JlcG9zaXRvcnk+CiAgPC9yZXBvc2l0b3JpZXM+Ci4uLgo8L3Byb2plY3Q+CmBgYAogICAgCkFkZCBkZXBlbmRlbmN5OgoKYGBgeG1sCjxkZXBlbmRlbmNpZXM+CiAgICAuLi4KICAgIDxkZXBlbmRlbmN5PgogICAgICAgIDxncm91cElkPmNvbS5nYXRlaGlsbC52ZXJ0eC1vYXM8L2dyb3VwSWQ+CiAgICAgICAgPGFydGlmYWN0SWQ+dmVydHgtb2FzPC9hcnRpZmFjdElkPgogICAgICAgIDx2ZXJzaW9uPjEuMC4xPC92ZXJzaW9uPgogICAgPC9kZXBlbmRlbmN5PgogICAgLi4uCjwvZGVwZW5kZW5jaWVzPgpgYGAKCiMjIyBHcmFkbGUKCkFkZCByZXBvc2l0b3J5OgoKICAgIHJlcG9zaXRvcmllcyB7CiAgICAgICAgbWF2ZW4gewogICAgICAgICAgICB1cmwgJ2h0dHBzOi8vczMtZXUtd2VzdC0xLmFtYXpvbmF3cy5jb20vZ2F0ZWhpbGxzb2Z0d2FyZS1tYXZlbi9zbmFwc2hvdHMnCiAgICAgICAgfQogICAgICAgIG1hdmVuIHsKICAgICAgICAgICAgdXJsICdodHRwczovL29zcy5zb25hdHlwZS5vcmcvY29udGVudC9yZXBvc2l0b3JpZXMvc25hcHNob3RzJwogICAgICAgIH0KICAgIH0KICAgIApBZGQgZGVwZW5kZW5jeToKCiAgICBjb21waWxlICdjb20uZ2F0ZWhpbGwudmVydHgtb2FzOnZlcnR4LW9hczoxLjAuMScgIAoKIyMgQnVpbGQKCklmIHlvdSdkIGxpa2UgdG8gYnVpbGQgdGhlIGNvZGUgbG9jYWxseSwgZm9sbG93IHRoZXNlIGluc3RydWN0aW9ucy4KCiMjIyBQcmVyZXF1aXNpdGVzCgotIEpESzgKCiMjIyBDb21waWxlIGFuZCB0ZXN0CgogICAgLi9ncmFkbGV3IGNsZWFuIGJ1aWxkCgojIyMgUHVibGlzaAoKUHVibGlzaCB0byBsb2NhbCBNYXZlbiByZXBvc2l0b3J5OgoKICAgIC4vZ3JhZGxldyBwdWJsaXNoVG9NYXZlbkxvY2FsCgpQdWJsaXNoIHRvIHJlbW90ZSBNYXZlbiByZXBvc2l0b3J5OgoKICAgIC4vZ3JhZGxldyBwdWJsaXNoCgojIyBDb250cmlidXRpbmcKCiogUHVsbCByZXF1ZXN0cyBhcmUgd2VsY29tZS4KKiBQbGVhc2UgcnVuIGBrdGxpbnRgIG9uIHlvdXIgYnJhbmNoLgoKIyMgQXV0aG9yCgpQZXRlIENvcm5pc2ggKG91dG9mY29mZmVlQGdtYWlsLmNvbSkK
    description: Generates a Swagger/OpenAPI specification from a Vert.x Web Router.
    created: "2018-01-20T22:08:13Z"
    updated: "2021-11-04T19:20:55Z"
    language: Kotlin
    archived: false
    stars: 28
    watchers: 28
    forks: 3
    owner: outofcoffee
    logo: https://avatars.githubusercontent.com/u/1248633?v=4
    repoEtag: '"262e69f96fd9e45d5196c6b9bd8a71d9359b71f912078b339bce0d99ab0966f4"'
    repoLastModified: Thu, 04 Nov 2021 19:20:55 GMT
    readmeEtag: '"04ac166bbae74d9dc4c6241f2e7aefdee98d27b91aa938aec9af2f41b730fbda"'
    readmeLastModified: Sun, 04 Mar 2018 17:57:03 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/mrtimofey/vue-admin
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgV2hhdCBpcyBpdD8KClRoaXMgaXMgdGhlIGxhc3QgcGFja2FnZSB5b3Ugd2lsbCBldmVyIG5lZWQgdG8gYnVpbGQgeW91ciBjdXN0b20gZGFzaGJvYXJkIG9yIGFkbWluaXN0cmF0aXZlIHBhbmVsLiBJdCBpbmNsdWRlczoKKiBBZG1pbkxURSAob25seSBzdHlsZXMpCiogVnVlLmpzIGJhc2VkIHJlYWR5LXRvLXVzZSBvdXQgb2YgdGhlIGJveCBTUEEKKiBTaW1wbGUgYnV0IGZsZXhpYmxlIGN1c3RvbWl6YXRpb24gc3lzdGVtCiogT3BlbkFQSSAzIChmb3JtZXJseSBrbm93biBhcyBTd2FnZ2VyKSBzcGVjaWZpY2F0aW9uIGZvciBhIGNvbXBhdGlibGUgc2VydmVyIEFQSSBpbXBsZW1lbnRhdGlvbgoqIEJpZyB2YXJpZXR5IG9mIGJ1aWx0LWluIGZpZWxkIHR5cGVzCiogQmlnIHZhcmlldHkgb2YgYnVpbHQtaW4gZGF0YSBkaXNwbGF5IGZvcm1hdCB0eXBlcwoqIFR5cGUtc2FmZSBieSBkZXNpZ24KKiBTdWl0YWJsZSBmb3IgYSBmYXN0IHByb3RvdHlwaW5nCgpbRGVtbyB3aXRoIExhcmF2ZWwgNS42IGJhY2tlbmRdKGh0dHA6Ly9hZG1pbi1kZW1vLnNoaXQtZnJlZS5zcGFjZSkKCltEb2N1bWVudGF0aW9uXShodHRwczovL21yLXRpbW9mZXkuZ2l0Ym9va3MuaW8vdnVlLWFkbWluKQoKIyMgSG93IGRvZXMgaXQgd29yaz8KClRoZSBwYWNrYWdlIGNvbnRhaW5zIGFsbCB0aGUgbmVjZXNzYXJ5IGZpbGVzIGZvciBidWlsZCBhbmQgZGV2ZWxvcG1lbnQuIFRoZXJlIGlzIG5vIHByZWJ1aWx0IHZlcnNpb24gc2luY2UKYHZ1ZS1hZG1pbi1mcm9udGAgYWltcyB0byBwcm92aWRlIGEgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgd2hlcmUgeW91IGNhbiBjdXN0b21pemUgYWxtb3N0IGV2ZXJ5dGhpbmcgaW5jbHVkaW5nCmJ1aWxkLXRpbWUgc3R1ZmYuIEJ1dCB5b3UgY2FuIHVzZSB0aGlzIGp1c3QgYXMtaXMgYnkgZXhlY3V0aW5nIGEgYnVpbGQgY29tbWFuZCBkZXNjcmliZWQgYmVsbG93LgoKQWxsIHRoZSB0aGluZ3MgcmVsYXRlZCB0byB5b3VyIHByb2plY3QgZGF0YSBzdHJ1Y3R1cmUgYW5kIGRhdGEgbWFuaXB1bGF0aW9uIGNhcGFiaWxpdGllcyBzaG91bGQgYmUgcHJvdmlkZWQKYnkgeW91ciBiYWNrZW5kIFJFU1QgQVBJIGVuZHBvaW50cwpbZGVzY3JpYmVkIGluIE9wZW5BUEkgMyBmb3JtYXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tclRpbW9mZXkvdnVlLWFkbWluL2Jsb2IvbWFzdGVyL2RvY3Mvc3dhZ2dlci55bWwpCgojIyBXaGF0IGFib3V0IHNlcnZlciBzb2x1dGlvbnM/CgpPbmx5IFtQSFA3LjEvTGFyYXZlbCBiYXNlZCBzb2x1dGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21yVGltb2ZleS9sYXJhdmVsLWFkbWluLWFwaSkgZXhpc3RzIGF0IHRoZSBtb21lbnQuCk1ha2luZyBtb3JlIG9mIHRoZW0gd2lsbCBiZSB2ZXJ5IGFwcHJlY2lhdGVkLgpbUmVhZCB0aGUgZG9jc10oaHR0cHM6Ly9tci10aW1vZmV5LmdpdGJvb2tzLmlvL3Z1ZS1hZG1pbi9zZXJ2ZXItYXBpLXByZXJlcXVpc2l0aWVzLmh0bWwpIGZvciBtb3JlIGluZm8uCgojIyBIb3cgdG8gdXNlPwoKSW5zdGFsbDoKYGBgYmFzaApucG0gaSAtUyB2dWUtYWRtaW4tZnJvbnQgY3Jvc3MtZW52IHJpbXJhZiB3ZWJwYWNrLW5hbm8KYGBgCgpBZGQgdGhpcyB0byBwYWNrYWdlLmpzb24gc2NyaXB0czoKYGBganNvbgp7CgkiYWRtaW46ZGV2IjogIm5vZGUgbm9kZV9tb2R1bGVzL3Z1ZS1hZG1pbi1mcm9udC9pbmRleC5qcyIsCgkiYWRtaW46YnVpbGQiOiAicmltcmFmIHB1YmxpYy9hZG1pbi1kaXN0ICYmIGNyb3NzLWVudiBOT0RFX0VOVj1wcm9kdWN0aW9uIHdwIC0tY29uZmlnIG5vZGVfbW9kdWxlcy92dWUtYWRtaW4tZnJvbnQvd2VicGFjay5jb25maWcuanMiCn0KYGBgCgpVc2UgYG5wbSBydW4gYWRtaW46ZGV2YCB0byBzdGFydCBkZXYgc2VydmVyLCBgbnBtIHJ1biBhZG1pbjpidWlsZGAgdG8gbWFrZSBhIHN0YXRpYyBidWlsZCB3aXRoaW4gYHB1YmxpYy9hZG1pbi1kaXN0YCBkaXJlY3RvcnkuCgpNb3JlIGluZm8gW2hlcmVdKGh0dHBzOi8vbXItdGltb2ZleS5naXRib29rcy5pby92dWUtYWRtaW4vcXVpY2stc3RhcnQuaHRtbCkuCg==
    description: Vue.js based administrative interface
    created: "2017-11-30T05:46:35Z"
    updated: "2021-07-12T08:03:32Z"
    language: Vue
    archived: false
    stars: 28
    watchers: 28
    forks: 4
    owner: mrTimofey
    logo: https://avatars.githubusercontent.com/u/7373909?v=4
    license: MIT
    repoEtag: '"423504fb72950ef0d096b47e4435819845d9b76df7a87d5be8cf057bf325008b"'
    repoLastModified: Mon, 12 Jul 2021 08:03:32 GMT
    readmeEtag: '"e47214a3336585513075eef4b7c3819a8f3da94fb06280677b594511ee29dd98"'
    readmeLastModified: Wed, 07 Oct 2020 08:58:30 GMT
  foundInMaster: true
  category:
    - Documentation
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/namsor/namsor-python-sdk2
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      NamSor API v2 Python SDK - classify personal names accurately by gender,
      country of origin, or ethnicity.
    created: "2019-01-14T09:22:11Z"
    updated: "2021-12-07T18:41:10Z"
    language: Python
    archived: false
    stars: 21
    watchers: 21
    forks: 6
    owner: namsor
    logo: https://avatars.githubusercontent.com/u/6951565?v=4
    license: AGPL-3.0
    repoEtag: '"926c5db72167de3424b2f9e034f523d93a2e180ee98601d9bc54d8b9c1f0f4a6"'
    repoLastModified: Wed, 16 Feb 2022 16:19:45 GMT
    readmeEtag: '"278a36c727cbb475e36da9d04fd13d5a4503acb76f406b12386cf185eccb49e9"'
    readmeLastModified: Wed, 16 Feb 2022 16:13:18 GMT
  foundInMaster: true
  category:
    - Server Implementations
    - Description Validators
- source: openapi3 tags
  repository: https://github.com/aerokube/selenium-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTZWxlbml1bSBPcGVuQVBJIFNwZWMKClRoaXMgcmVwb3NpdG9yeSBjb250YWlucyBTZWxlbml1bSBPcGVuQVBJIDMuMCAoZXgtU3dhZ2dlcikgc3BlYy4KCiMjIFVzaW5nIFN3YWdnZXIgRWRpdG9yCgoxKSBMYXVuY2ggU3dhZ2dlciBFZGl0b3IgRG9ja2VyIGNvbnRhaW5lcjoKYGBgCiQgZG9ja2VyIHJ1biAtZCAtLW5hbWUgc3dhZ2dlci1lZGl0b3IgLXAgODA4MDo4MDgwIHN3YWdnZXJhcGkvc3dhZ2dlci1lZGl0b3IKYGBgCgoyKSBPcGVuIGBodHRwOi8vbG9jYWxob3N0OjgwODAvYCBpbiBicm93c2VyLgozKSBDb3B5IGFuZCBwYXN0ZSBgc2VsZW5pdW0ueWFtbGAgY29udGVudHMgdG8gZWRpdG9yLgo=
    readmeEtag: '"23f07e23f4ea73dd4380e3b6e9762a29d113488d0836c1ed46f981b0c3d4e364"'
    readmeLastModified: Tue, 22 Feb 2022 08:21:32 GMT
    description: The missing Selenium OpenAPI spec
    created: "2019-05-07T08:50:02Z"
    updated: "2022-04-27T01:33:16Z"
    language: Shell
    archived: false
    stars: 24
    watchers: 24
    forks: 9
    owner: aerokube
    logo: https://avatars.githubusercontent.com/u/26328913?v=4
    license: Apache-2.0
    repoEtag: '"af7f88a71cd96b2930c31a4fc0647ea5026a261456dcac6e85bf6c4010ea25ea"'
    repoLastModified: Wed, 27 Apr 2022 01:33:16 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/mnf-group/openapimux
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJTXV4Ck9wZW5BUElNdXggaXMgYSAic2NoZW1hLWZpcnN0IiBIVFRQIHJvdXRlci4gSXQgdGFrZXMgb25lIG9yIG11bHRpcGxlCltPcGVuQVBJICAoU3dhZ2dlcildKGh0dHBzOi8vc3dhZ2dlci5pby9zcGVjaWZpY2F0aW9uLykgc2NoZW1hIGZpbGVzIGFzIGFuIGlucHV0CmFuZCB0aGVuIG1hdGNoZXMsIHZhbGlkYXRlcyBhbmQgaGFuZGxlcyBhbGwgaW5jb21pbmcgSFRUUCBiYXNlZCBvbiB0aGVzZSBzY2hlbWFzLgpVbmRlciB0aGUgaG9vZCwgaXQgdXNlcyBba2luLW9wZW5hcGldKGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRraW4va2luLW9wZW5hcGkvKSBmb3IKT3BlbkFQSSBzY2hlbWEgcGFyc2luZyBhbmQgdmFsaWRhdGlvbi4KCiMgTW90aXZhdGlvbgpPcGVuQVBJIG9mZmVycyBhIGdyZWF0IHdheSBvZiBkb2N1bWVudGluZyBBUEkuIEhvd2V2ZXIsIG5vbmUgb2YKW2V4aXN0aW5nIGdvIHJvdXRlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9hdmVsaW5vL2F3ZXNvbWUtZ28jcm91dGVycykgb2ZmZXJzCiJzY2hlbWEgZmlyc3QiIGFwcHJvYWNoLiBJbiBlYWNoIHJvdXRlciwgeW91IG5lZWQgdG8gaW5pdGlhbGl6ZSBhIGxpc3Qgb2YgYXZhaWxhYmxlCnJvdXRlcyBhbmQgdGhlbiBkbyB0aGUgcmVxdWVzdCB2YWxpZGF0aW9uIG1hbnVhbGx5LiBPcGVuQVBJTXV4IGZpbGxzIHRoaXMgZ2FwIGJ5CmFsbG93aW5nIHRvIGluaXRpYWxpemUgYSByb3V0ZXIgZGlyZWN0bHkgZnJvbSB0aGUgT3BlbkFQSSBzY2hlbWEgZGVmaW5pdGlvbiBmaWxlLgoKIyBGZWF0dXJlcwoqIFdvcmtzIHdpdGggYm90aCBPcGVuQVBJIDMuMCBhbmQgT3BlbkFQSSAyLjAgKGFrYSBTd2FnZ2VyKS4gQXMgd2VsbCBhcyBib3RoIGpzb24gYW5kIHlhbWwgc2NoZW1hcwoqIE11bHRpcGxlIE9wZW5BUEkgc2NoZW1hIGZpbGVzIGNhbiBiZSB1c2VkIGF0IHRoZSBzYW1lIHJvdXRlciB0byBzdXBwb3J0IEFQSSB2ZXJzaW9uaW5nCiogSW1wbGVtZW50cyBgaHR0cC5IYW5kbGVyYCBpbnRlcmZhY2UsIHNvIGl0IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgc3RhbmRhcmQgaHR0cC5TZXJ2ZU11eAoqIFN1cHBvcnRzIGdsb2JhbCBsZXZlbCBgaHR0cC5IYW5kbGVyYCBtaWRkbGV3YXJlcywgc28gaXQgaXMgY29tcGF0aWJsZSB3aXRoIHRoaXJkLXBhcnR5IG1pZGRsZXdhcmVzCiogU3VwcG9ydHMgY3VzdG9tIGVycm9yIGhhbmRsZXIgZm9yIG1vcmUgY29udHJvbAoKIyBSb3V0aW5nCiogYG9wZXJhdGlvbklkYCBhdHRyaWJ1dGUgb2YgYW4gT3BlbkFQSSBwYXRoIGlzIHVzZWQgdG8gcmVzb2x2ZSBpdCB0byBhbiBhcHByb3ByaWF0ZSBoYW5kbGVyCiogT3BlbkFQSU11eCBjYW4gZW5jYXBzdWxhdGUgb25lIG9yIG1vcmUgc3dhZ2dlciByb3V0ZXJzLiBFYWNoIHJvdXRlciBjb3VsZApiZSBjcmVhdGVkIGZyb20gYW4gT3BlbkFQSSBzY2hlbWEgZmlsZSBvciBkaXJlY3RseSBhcyBhIHN3YWdnZXIgb2JqZWN0CiogVG8gaGFuZGxlIG11bHRpcGxlIHZlcnNpb25zLCB1c2UgdGhlIGBzZXJ2ZXJzLnVybGAgYXR0cmlidXRlIGluIE9wZW5BUEkgc2NoZW1hLiBFZwogYGBgeWFtbAogc2VydmVyczoKICAtIHVybDogIi92MS4yIgpgYGAKKiBXaGVuIGZpbmRpbmcgYSBtYXRjaGluZyByb3V0ZSwgcm91dGVycyB3aXRoIGBzZXJ2ZXJzYCBhdHRyaWJ1dGUgc2V0IHRha2UgcHJpb3JpdHkKCiMgSW5zdGFsbApgZ28gZ2V0IC11IGdpdGh1Yi5jb20vTU5GR3JvdXAvb3BlbmFwaW11eGAKCiMgRnVsbCBFeGFtcGxlCkFzc3VtaW5nIGBvcGVuYXBpLnlhbWxgIGhhcyB0aGUgZm9sbG93aW5nIHNjaGVtYQpgYGB5YW1sCm9wZW5hcGk6IDMuMC4wCgpwYXRoczoKICAvZm9vOgogICAgZ2V0OgogICAgICBvcGVyYXRpb25JZDogZ2V0Rm9vCmBgYAoKSXQgd2lsbCBjcmVhdGUgYW5kIHN0YXJ0IGEgc2VydmVyIG9uIDgwODAKYGBgZ28KcGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJsb2ciCgkibmV0L2h0dHAiCgoJImdpdGh1Yi5jb20vZ28tY2hpL2NoaS9taWRkbGV3YXJlIgopCgp0eXBlIGZvb0hhbmRsZXIgc3RydWN0e30KCmZ1bmMgKGYgZm9vSGFuZGxlcikgU2VydmVIVFRQKHcgaHR0cC5SZXNwb25zZVdyaXRlciwgciAqaHR0cC5SZXF1ZXN0KSB7CglmbXQuRnByaW50KHcsICJIZWxsbyIpCn0KCmZ1bmMgbWFpbigpIHsKCXIsIGVyciA6PSBOZXdSb3V0ZXIoIi4vb3BlbmFwaS55YW1sIikKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCglyLlVzZUhhbmRsZXJzKG1hcFtzdHJpbmddaHR0cC5IYW5kbGVyewoJCSJnZXRGb28iOiBmb29IYW5kbGVye30sCgl9KQoKCXIuVXNlTWlkZGxld2FyZSgKCQltaWRkbGV3YXJlLlJlY292ZXJlciwKCQltaWRkbGV3YXJlLlJlcXVlc3RJRCwKCQltaWRkbGV3YXJlLkRlZmF1bHRDb21wcmVzcywKCSkKCglyLkVycm9ySGFuZGxlciA9IGZ1bmModyBodHRwLlJlc3BvbnNlV3JpdGVyLCByICpodHRwLlJlcXVlc3QsIGRhdGEgc3RyaW5nLCBjb2RlIGludCkgewoJCXcuV3JpdGVIZWFkZXIoY29kZSkKCQlpZiBjb2RlID09IGh0dHAuU3RhdHVzSW50ZXJuYWxTZXJ2ZXJFcnJvciB7CgkJCWZtdC5QcmludGxuKCJGYXRhbDoiLCBkYXRhKQoJCQl3LldyaXRlKFtdYnl0ZSgiT29wcyIpKQoJCX0gZWxzZSB7CgkJCXcuV3JpdGUoW11ieXRlKGRhdGEpKQoJCX0KCX0KCglsb2cuRmF0YWwoaHR0cC5MaXN0ZW5BbmRTZXJ2ZSgiOjgwODAiLCByKSkKfQpgYGAK
    description: Open API router in go
    created: "2019-06-27T00:45:48Z"
    updated: "2021-11-19T20:59:52Z"
    language: Go
    archived: false
    stars: 21
    watchers: 21
    forks: 3
    owner: mnf-group
    logo: https://avatars.githubusercontent.com/u/40686352?v=4
    license: MIT
    repoEtag: '"555d278ae596b4d564b14370d9a8a0a505148daf9b770853d74b3028450f7d97"'
    repoLastModified: Fri, 19 Nov 2021 20:59:52 GMT
    readmeEtag: '"273425a0fd572d149623646d4d8e699b9b4af21e2d4fce6f48236a62f298371b"'
    readmeLastModified: Mon, 11 Oct 2021 22:26:40 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/mermade/openapi3-examples
  v3: true
  repositoryMetadata:
    description: Passing and failing test cases for OpenAPI 3.x validators
    created: "2017-03-09T10:24:25Z"
    updated: "2021-11-11T02:16:39Z"
    language: null
    archived: false
    stars: 21
    watchers: 21
    forks: 16
    owner: Mermade
    logo: https://avatars.githubusercontent.com/u/15950345?v=4
    license: Apache-2.0
    repoEtag: '"61c18008a461700f21d53b25bc4a81b089c2c37365aceaaddda470038a712145"'
    repoLastModified: Thu, 11 Nov 2021 02:16:39 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/data-fair/data-fair
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyA8aW1nIGFsdD0iRGF0YSBGQUlSIGxvZ28iIHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2RhdGEtZmFpci9kYXRhLWZhaXJAbWFzdGVyL3B1YmxpYy9hc3NldHMvbG9nby5zdmciIHdpZHRoPSI0MCI+IERhdGEgRkFJUgoKKkZpbmRhYmxlLCBBY2Nlc3NpYmxlLCBJbnRlcm9wZXJhYmxlIGFuZCBSZXVzYWJsZSBEYXRhKgoKW1Zpc2l0IGRvY3VtZW50YXRpb24gd2Vic2l0ZSAoZnJlbmNoKV0oaHR0cHM6Ly9kYXRhLWZhaXIuZ2l0aHViLmlvLzMvKQoKIVtdKGRvYy9zdGF0aWMvZGF0YS1mYWlyLmdpZikKCgojIyBEZXZlbG9wbWVudCBlbnZpcm9ubWVudAoKVGhpcyBwcm9qZWN0IHVzZXMgdGhlIGZvbGxvd2luZyBzdGFjayA6IE1vbmdvLCBFbGFzdGljU2VhcmNoLCBOb2RlSlMsIEV4cHJlc3MsIFZ1ZUpTLCBOVVhUIGFuZCBEb2NrZXIuIFRoZSBwcmltYXJ5IGxhbmd1YWdlIHVzZWQgaXMgamF2YXNjcmlwdCB3aXRoIHRoZSBFUzcgc3ludGF4LgoKV2UgdXNlIFtlc2xpbnRdKCkgYm90aCBhcyBhIGxpbnRlciBhbiBhIGZvcm1hdHRlciAodGhhbmtzIHRvIGl0cyBmaXggbW9kZSkuIEl0IGFsc28gd29ya3Mgb24gLnZ1ZSBmaWxlcyB0aGFua3MgdG8gW3Z1ZS1lc2xpbnQtcGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vdnVlanMvZXNsaW50LXBsdWdpbi12dWUpLiBXZSBzdHJvbmdseSBzdWdnZXN0IGludGVncmF0aW5nIHRoZXNlIHRvb2xzIGluIHlvdXIgZWRpdG9yLCB0aGlzIFthcnRpY2xlXShodHRwczovL2FsbGlnYXRvci5pby92dWVqcy92dWUtZXNsaW50LXBsdWdpbi8pIGNhbiBiZSB1c2VmdWwgdG8gY29uZmlndXJlIHZ1ZS1lc2xpbnQtcGx1Z2luIGluIHlvdXIgZWRpdG9yLgoKSW5zdGFsbCBub2RlanMgZGVwZW5kZW5jaWVzIGFuZCBsYXVuY2ggc2VydmljZSBkZXBlbmRlbmNpZXMgd2l0aCBkb2NrZXItY29tcG9zZToKCiAgICBucG0gaW5zdGFsbAogICAgbnBtIHJ1biBkZXYtZGVwcwoKUnVuIHRoZSAyIGRldmVsb3BtZW50IHNlcnZlcnMgd2l0aCB0aGVzZSBjb21tYW5kcyBpbiBzZXBhcmF0ZSBzaGVsbHM6CgogICAgbnBtIHJ1biBkZXYtc2VydmVyCiAgICBucG0gcnVuIGRldi1jbGllbnQKCldoZW4gYm90aCBzZXJ2ZXJzIGFyZSByZWFkeSwgZ28gdG8gW2h0dHA6Ly9sb2NhbGhvc3Q6NTYwMF0oaHR0cDovL2xvY2FsaG9zdDo1NjAwKSBhbmQgY2hvc2UgYW4gYWNjb3VudCBpbiBgdGVzdC9yZXNvdXJjZXMvdXNlcnMuanNvbmAgdG8gbG9naW4gd2l0aCBpdHMgZW1haWwuCgpUZXN0IGJ1aWx0IG51eHQgZGlzdHJpYnV0YWJsZSBpbiBkZXY6CgpgYGAKIyBmaXJzdCBzZXQgcHJveHlOdXh0IHRvIGZhbHNlIGluIGNvbmZpZy9kZXZlbG9wbWVudC5qcwpOT0RFX0VOVj1kZXZlbG9wbWVudCBucG0gcnVuIGJ1aWxkCm5wbSBydW4gZGV2LXNlcnZlcgpgYGAKClJ1biB0ZXN0IHN1aXRlOgoKYGBgCm5wbSBydW4gdGVzdApgYGAKClRlc3QgYnVpbGRpbmcgdGhlIGRvY2tlciBpbWFnZToKCmBgYApkb2NrZXIgYnVpbGQgLS1uZXR3b3JrPWhvc3QgLXQgZGF0YS1mYWlyLWRldiAuCi8vIGRvbid0IGV4cGVjdCB0aGUgZm9sbG93aW5nIGxpbmUgdG8gd29yayBmdWxseSwgaXQgd2lsbCBiZSBtaXNzaW5nIHNlcnZpY2UgZGVwZW5kZW5jaWVzLCBldGMuCmRvY2tlciBydW4gLS1uZXR3b3JrPWhvc3QgLS1lbnYgUE9SVD04MDgxIGRhdGEtZmFpci1kZXYKYGBgCgojIyBFbWJlZGRlZCBkb2N1bWVudGF0aW9uCgpEb2N1bWVudGF0aW9uIGlzIG1haW50YWluZWQgaW4gLi9kb2MgYXMgYSBzbWFsbCBzZXBhcmF0ZSBudXh0IHByb2plY3QuIEl0cyBjb250ZW50IGlzIGJ1aWx0IGFuZCBwdXNoZWQgb24gZ2l0bGFiLXBhZ2VzIGJ5IHRoZSBUcmF2aXMgYnVpbGQuCgpUaGUgcGFnZXMgYXJlIGFsc28gbGlua2VkIHRvIHRoZSBtYWluIG51eHQgcHJvamVjdCwgc28gdGhhdCBhbnkgU2ltcGxlIERpcmVjdG9yeSBpbnN0YW5jZSBlbWJlZHMgaXRzIGZ1bGwgZG9jdW1lbnRhdGlvbi4KClJ1biB0aGUgZG9jdW1lbnRhdGlvbiBkZXZlbG9wbWVudCBzZXJ2ZXI6CgpgYGAKbnBtIGluc3RhbGwKbnBtIHJ1biBkb2MKYGBgCgpUaGVuIG9wZW4gaHR0cDovL2xvY2FsaG9zdDozMDAwL2RhdGEtZmFpci8K
    readmeEtag: '"188773dadfd82d85d5c6cbb596f747110e29bb40c662657cb27b3b209575c141"'
    readmeLastModified: Thu, 21 Apr 2022 14:54:15 GMT
    description: >-
      Findable, Accessible, Interoperable and Reusable Data. A complete
      open-source solution for your open and private data needs. French only for
      the time being, internationalization coming soon.
    created: "2017-11-24T22:19:00Z"
    updated: "2022-03-03T08:52:32Z"
    language: JavaScript
    archived: false
    stars: 21
    watchers: 21
    forks: 6
    owner: data-fair
    logo: https://avatars.githubusercontent.com/u/83776320?v=4
    license: AGPL-3.0
    repoEtag: '"742395c2a04dd58c5ec710cf5bd98e06553f9f727e02875295ef39e0f98ca858"'
    repoLastModified: Thu, 03 Mar 2022 08:52:32 GMT
  foundInMaster: true
  category:
    - Documentation
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/pglass/py-openapi-schema-to-json-schema
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: Python port of https://github.com/mikunn/openapi-schema-to-json-schema
    created: "2018-06-23T03:46:02Z"
    updated: "2021-10-15T22:15:46Z"
    language: Python
    archived: false
    stars: 12
    watchers: 12
    forks: 2
    owner: pglass
    logo: https://avatars.githubusercontent.com/u/1077740?v=4
    license: MIT
    repoEtag: '"3778d52f9ca1dda252e07568a554421244731a72309ff9bb0af4a8f5241e6e15"'
    repoLastModified: Fri, 15 Oct 2021 22:15:46 GMT
    readmeEtag: '"f7eca84b07624412d9264b5e713792178c651afc96feaf444590aa0d82e2d8e4"'
    readmeLastModified: Sat, 25 Jul 2020 05:42:26 GMT
  foundInMaster: true
  category:
    - Converters
    - Parsers
- source: openapi3 tags
  repository: https://github.com/seriousme/openapi-schema-validator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"bfdfe4b635dac2e5e38cf52373f45a5e26e490b98afbf4434d1fa240f249d3dc"'
    readmeLastModified: Wed, 27 Apr 2022 16:59:55 GMT
    description: OpenApi schema validation for OpenApi versions v2, v3.0.x and v3.1.x
    created: "2021-05-08T18:50:37Z"
    updated: "2022-03-29T21:14:05Z"
    language: JavaScript
    archived: false
    stars: 10
    watchers: 10
    forks: 1
    owner: seriousme
    logo: https://avatars.githubusercontent.com/u/3322396?v=4
    license: MIT
    repoEtag: '"691ad55f07fb8a93b4f8502d349d56940076c785f14298a9d89850ef7fed6ff3"'
    repoLastModified: Tue, 29 Mar 2022 21:14:05 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/outline/openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIFNwZWNpZmljYXRpb24KClRoaXMgcmVwb3NpdG9yeSBjb250YWlucyBbT3BlbkFQSSBzcGVjaWZpY2F0aW9uc10oaHR0cHM6Ly9zd2FnZ2VyLmlvL3NwZWNpZmljYXRpb24vKSBmb3IgT3V0bGluZSdzIEFQSS4KCiMjIyBEZXZlbG9wbWVudAoKSXQgaXMgcmVjb21tZW5kZWQgdG8gW2VkaXQgdGhlIHNwZWNpZmljYXRpb24gdXNpbmcgdGhlIFN3YWdnZXIgZWRpdG9yLF0oaHR0cDovL2VkaXRvci5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL291dGxpbmUvb3BlbmFwaS9tYWluL3NwZWMzLnltbCkgd2hpY2ggd2lsbCB2YWxpZGF0ZSB0aGUgc3BlYyBhcyB5b3UgdHlwZS4gSWYgc3VnZ2VzdGluZyBjaGFuZ2VzIG9yIGZpeGVzIHRvIHRoaXMgcmVwb3NpdG9yeSBwbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgYm90aCB0aGUganNvbiBhbmQgeW1sIHZlcnNpb25zIGluIHRoZSBQUi4gCgoKIyMjIERlcGxveW1lbnQKCkNoYW5nZXMgdG8gdGhpcyByZXBvc2l0b3J5IGFwcGVhciBhdCBbZ2V0b3V0bGluZS5jb20vZGV2ZWxvcGVyc10oaHR0cHM6Ly9nZXRvdXRsaW5lLmNvbS9kZXZlbG9wZXJzKSBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIFttYXJrZXRpbmcgd2Vic2l0ZV0oaHR0cHM6Ly9naXRodWIuY29tL291dGxpbmUvd2Vic2l0ZSkgaXMgZGVwbG95ZWQuCg==
    readmeEtag: '"7146f9917faeae335d735359fd07294df144178b4f40be7ff7758775f52e8008"'
    readmeLastModified: Fri, 03 Sep 2021 04:06:50 GMT
    description: OpenAPI specification for the Outline API
    created: "2020-06-15T03:58:23Z"
    updated: "2022-04-01T11:03:12Z"
    language: null
    archived: false
    stars: 11
    watchers: 11
    forks: 5
    owner: outline
    logo: https://avatars.githubusercontent.com/u/1765001?v=4
    license: BSD-3-Clause
    repoEtag: '"66e8ee930493a24635133fef305d66562ec1e81d9b14eab8a60a1a624b7c0281"'
    repoLastModified: Fri, 01 Apr 2022 11:03:12 GMT
  foundInMaster: true
  category:
    - Converters
    - Parsers
- source: openapi3 tags
  repository: https://github.com/mockoon/mock-samples
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGRpdiBhbGlnbj0iY2VudGVyIj4KICA8YSBocmVmPSJodHRwczovL21vY2tvb24uY29tIiBhbHQ9Im1vY2tvb24gbG9nbyI+CiAgICA8aW1nIHdpZHRoPSIyMDAiIGhlaWdodD0iMjAwIiBzcmM9Imh0dHBzOi8vbW9ja29vbi5jb20vaW1hZ2VzL2xvZ28tc3F1YXJlLW1vY2stYXBpLXNhbXBsZXMucG5nIj4KICA8L2E+CiAgPGJyPgogIDxhIGhyZWY9Imh0dHBzOi8vbW9ja29vbi5jb20vI2Rvd25sb2FkIj48aW1nIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9Eb3dubG9hZCUyMGFwcC1Hby1ncmVlbi5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUmY29sb3JCPTE5OTdjNiIvPjwvYT4KICA8YSBocmVmPSJodHRwczovL21vY2tvb24uY29tLyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvV2Vic2l0ZS1Hby1ncmVlbi5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUmY29sb3JCPTE5OTdjNiIvPjwvYT4KICA8YSBocmVmPSJodHRwOi8vZWVwdXJsLmNvbS9kc2tCMlgiPjxpbWcgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL05ld3NsZXR0ZXItU3Vic2NyaWJlLWdyZWVuLnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSIvPjwvYT4KICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL0dldE1vY2tvb24iPjxpbWcgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL1R3aXR0ZXJfQEdldE1vY2tvb24tZm9sbG93LWJsdWUuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlJmNvbG9yQj0xZGExZjIiLz48L2E+CiAgPGEgaHJlZj0iaHR0cHM6Ly9kaXNjb3JkLmdnL011dFJwc1k1Z0UiPjxpbWcgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL0Rpc2NvcmQtZ28tYmx1ZS5zdmc/c3R5bGU9ZmxhdC1zcXVhcmUmY29sb3JBPTZjODRkOSZjb2xvckI9MWRhMWYyIi8+PC9hPgogIDxicj4KICA8YnI+CiAgPGgxPk1vY2tvb24ncyBtb2NrIHNhbXBsZXM8L2gxPgo8L2Rpdj4KCldlbGNvbWUgdG8gTW9ja29vbidzIG1vY2sgQVBJIHNhbXBsZXMgcmVwb3NpdG9yeS4gWW91IHdpbGwgZmluZCBpbiB0aGUgW2BhcGlzYF0oL2FwaXMpIGZvbGRlciBtYW55IG1vY2sgc2FtcGxlcyBmcm9tIHBvcHVsYXIgQVBJcyAoT3BlbiBXZWF0aGVyLCBHaXBoeSwgZXRjLikuIFdlIHdpbGwgYmUgYWRkaW5nIG1vcmUgc2FtcGxlcyBmcm9tIHRpbWUgdG8gdGltZS4KCllvdSB3aWxsIGZpbmQgdGhlIGZ1bGwgbGlzdCBvZiBzYW1wbGUgbW9jayBBUElzIG9uIG91ciB3ZWJzaXRlIHRvbzogaHR0cHM6Ly9tb2Nrb29uLmNvbS9tb2NrLXNhbXBsZXMvCgotLS0KCiMjIEhvdyB0byBvcGVuIHRoZSBzYW1wbGVzIGluIE1vY2tvb24KClRvIG9wZW4gdGhlIHNhbXBsZXMgaW4gTW9ja29vbiBhcHBsaWNhdGlvbiwgeW91IGhhdmUgdHdvIHBvc3NpYmlsaXRpZXM6CgoxLiBEb3dubG9hZCB0aGUgc2FtcGxlIEpTT04gZmlsZSBhbmQgY2xpY2sgb24gdGhlIG9wZW4gYnV0dG9uOgoKICAgIVtvcGVuIGVudmlyb25tZW50XSgvZG9jcy9vcGVuLWVudmlyb25tZW50LnBuZykKCjEuIENvcHkgdGhlIHNhbXBsZSBmaWxlIGNvbnRlbnQgZnJvbSB0aGlzIHJlcG9zaXRvcnkgdG8gdGhlIGNsaXBib2FyZCBhbmQgb3BlbiB0aGUgYEZpbGVgIG1lbnUgYW5kIGNob29zZSBgTmV3IGVudmlyb25tZW50IGZyb20gY2xpcGJvYXJkYDoKCiAgICFbbmV3IGVudmlyb25tZW50IGZyb20gY2xpcGJvYXJkXSgvZG9jcy9uZXctZW52aXJvbm1lbnQtZnJvbS1jbGlwYm9hcmQucG5nKQoKSW4gYm90aCBjYXNlcywgYSBuZXcgZW52aXJvbm1lbnQgd2lsbCBiZSBjcmVhdGVkIGFuZCByZWFkeSB0byB1c2UgYWZ0ZXIgcnVubmluZyBpdCBieSBwcmVzc2luZyB0aGUgZ3JlZW4gInBsYXkiIGJ1dHRvbi4KCiFbUnVuIHRoZSBtb2NrIEFQSV0oL2RvY3MvcnVuLWFwaS5wbmcpCgojIyBIb3cgdG8gdXNlIHRoZSBzYW1wbGVzIHdpdGggTW9ja29vbiBDTEkKClRvIHJ1biB0aGUgbW9jayBzYW1wbGVzIHdpdGggdGhlIFtDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2Nrb29uL2NsaSkgeW91IGNhbiBkaXJhY3RseSBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kIHVzaW5nIHRoZSBzYW1wbGUgcmF3IGZpbGUgR2l0SHViIFVSTDogCgpgbW9ja29vbi1jbGkgc3RhcnQgLS1kYXRhIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tb2Nrb29uL21vY2stc2FtcGxlcy9tYWluL2FwaXMvZ2lwaHkuanNvbmAKCiMjIFN1cHBvcnQvZmVlZGJhY2sKCllvdSBjYW4gZGlzY3VzcyBhbGwgdGhpbmdzIHJlbGF0ZWQgdG8gTW9ja29vbiwgYW5kIGFzayBmb3IgaGVscCwgb24gdGhlIFtvZmZpY2lhbCBjb21tdW5pdHldKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2Nrb29uL21vY2tvb24vZGlzY3Vzc2lvbnMpLiBJdCdzIGFsc28gYSBnb29kIHBsYWNlIHRvIGRpc2N1c3MgYnVncyBhbmQgZmVhdHVyZSByZXF1ZXN0cyBiZWZvcmUgb3BlbmluZyBhbiBpc3N1ZSBvbiB0aGlzIHJlcG9zaXRvcnkuIEZvciBtb3JlIGNoYXQtbGlrZSBkaXNjdXNzaW9ucywgeW91IGNhbiBhbHNvIGpvaW4gb3VyIFtEaXNjb3JkIHNlcnZlcl0oaHR0cHM6Ly9kaXNjb3JkLmdnL011dFJwc1k1Z0UpLgoKIyMgQ29udHJpYnV0aW5nCgpJZiB5b3UgYXJlIGludGVyZXN0ZWQgaW4gY29udHJpYnV0aW5nIHRvIE1vY2tvb24gbW9jayBzYW1wbGVzLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgdGhlIFtjb250cmlidXRpbmcgZ3VpZGVsaW5lc10oaHR0cHM6Ly9naXRodWIuY29tL21vY2tvb24vbW9jay1zYW1wbGVzL2Jsb2IvbWFpbi9DT05UUklCVVRJTkcubWQpLgoKUGxlYXNlIGFsc28gdGFrZSBhIGxvb2sgYXQgb3VyIFtDb2RlIG9mIENvbmR1Y3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2Nrb29uL21vY2stc2FtcGxlcy9ibG9iL21haW4vQ09ERV9PRl9DT05EVUNULm1kKS4KCiMjIERvY3VtZW50YXRpb24KCllvdSB3aWxsIGZpbmQgTW9ja29vbidzIFtkb2N1bWVudGF0aW9uXShodHRwczovL21vY2tvb24uY29tL2RvY3MvbGF0ZXN0KSBvbiB0aGUgb2ZmaWNpYWwgd2Vic2l0ZS4gSXQgY292ZXJzIE1vY2tvb24ncyBtb3N0IGNvbXBsZXggZmVhdHVyZXMuIEZlZWwgZnJlZSB0byBjb250cmlidXRlIG9yIGFzayBmb3IgbmV3IHRvcGljcyB0byBiZSBjb3ZlcmVkLgoKIyMgUm9hZG1hcAoKSWYgeW91IHdhbnQgdG8ga25vdyB3aGF0IHdpbGwgYmUgY29taW5nIGluIHRoZSBuZXh0IHJlbGVhc2UgeW91IGNhbiBjaGVjayB0aGUgW3Byb2plY3QgIlJvYWRtYXAiXShodHRwczovL2dpdGh1Yi5jb20vb3Jncy9tb2Nrb29uL3Byb2plY3RzLzIpLgoKTmV3IHJlbGVhc2VzIHdpbGwgYmUgYW5ub3VuY2VkIG9uIE1vY2tvb24ncyBbVHdpdHRlciBhY2NvdW50IEBHZXRNb2Nrb29uXShodHRwczovL3R3aXR0ZXIuY29tL0dldE1vY2tvb24pIGFuZCB0aHJvdWdoIHRoZSBuZXdzbGV0dGVyIHRvIHdoaWNoIHlvdSBjYW4gc3Vic2NyaWJlIFtoZXJlXShodHRwOi8vZWVwdXJsLmNvbS9kc2tCMlgpLgo=
    readmeEtag: '"53ded4aa6ce6575863bf772fe2e8f638cfbcb91d422b6b92ef6a09e4622cceba"'
    readmeLastModified: Thu, 17 Feb 2022 14:33:42 GMT
    description: "Start using Mockoon in no time with popular APIs mock samples. "
    created: "2020-11-06T13:20:14Z"
    updated: "2022-03-01T20:03:11Z"
    language: TypeScript
    archived: false
    stars: 10
    watchers: 10
    forks: 12
    owner: mockoon
    logo: https://avatars.githubusercontent.com/u/49429147?v=4
    license: MIT
    repoEtag: '"58682108587505d2a898f565ef7e533a58da0fe3b88a6a1a09bbf352ba1d3722"'
    repoLastModified: Tue, 01 Mar 2022 20:03:11 GMT
  foundInMaster: true
  category:
    - Documentation
    - Testing
- source: openapi3 tags
  repository: https://github.com/namsor/namsor-r-sdk2
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      NamSor API v2 R SDK - classify personal names accurately by gender,
      country of origin, or ethnicity.
    created: "2019-01-29T20:28:30Z"
    updated: "2021-03-15T08:47:28Z"
    language: R
    archived: false
    stars: 9
    watchers: 9
    forks: 2
    owner: namsor
    logo: https://avatars.githubusercontent.com/u/6951565?v=4
    repoEtag: '"b2bc6fa49b9afdd297ea2e365d06afac188833392c90baa08dfabcc85fb128e6"'
    repoLastModified: Thu, 13 Jan 2022 13:02:31 GMT
    readmeEtag: '"3f1385179ce158158a2143bcc3500bccb4e4fbb5da661deaf5922e17e137def5"'
    readmeLastModified: Mon, 15 Mar 2021 08:47:25 GMT
  foundInMaster: true
  category:
    - Server Implementations
    - Description Validators
- source: openapi3 tags
  repository: https://github.com/env0/serverless-openapi-typescript
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      Serverless plugin to generate OpenAPI 3.1.0 documentation including models
      from serverless configuration and TypeScript
    created: "2021-08-26T06:57:36Z"
    updated: "2021-12-21T23:07:44Z"
    language: TypeScript
    archived: false
    stars: 10
    watchers: 10
    forks: 2
    owner: env0
    logo: https://avatars.githubusercontent.com/u/46656519?v=4
    repoEtag: '"8bfaaa9df44543edcf7de10749172850625630c78f8d2d4419d526e9efc0f2a9"'
    repoLastModified: Tue, 21 Dec 2021 23:07:44 GMT
    readmeEtag: '"91b22acf38f102c963e874dc70f56599f2e80e305c96c3f63682bd5691bae1fb"'
    readmeLastModified: Wed, 30 Mar 2022 16:00:00 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/ckaratzas/vertx-openapi-spec-generator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBWZXJ0eC1PcGVuQXBpLVNwZWMtR2VuZXJhdG9yClRoZSBwdXJwb3NlIG9mIHRoaXMgcmVwb3NpdG9yeSBpcyB0byBmYWNpbGl0YXRlIHRoZSBhdXRvbWF0aWMgZ2VuZXJhdGlvbiBvZiBPcGVuQVBJIDMgc3BlYyBmcm9tICJyZXN0LWxpa2UiIHZlcnR4IHJvdXRlcy4gVGhlIGZ1bmN0aW9uYWwgbmF0dXJlIG9mIHZlcnR4Cm1ha2VzIHRoaXMgam9iIGRpZmZpY3VsdCB0aHVzIG5vIHNlcmlvdXMgb2ZmaWNpYWwgdG9vbCBleGlzdHMgYXQgdGhlIG1vbWVudC4gSW4gb3JkZXIgdG8gbWl0aWdhdGUgdGhlIHByb2JsZW0gd2UgdHJ5IHRvIGRlc2NyaWJlIHRoZSAKZ2VuZXJhbCBhbGdvcml0aG0gYW5kIGFzc3VtcHRpb25zIG1hZGU6CgoxLiBHZW5lcmF0aW9uIG9mIE9wZW5BUEkgMyBTcGVjIGlzIGdlbmVyYXRlZCBhdCBydW50aW1lIGJ5IGludHJvc3BlY3Rpb24gb2YgdGhlIHZlcnR4IFJvdXRlciBPYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIHJvdXRlcy4gSWYgc29tZW9uZSB3aXNoZXMKdG8gcGVyZm9ybSBnZW5lcmF0aW9uIGF0IGJ1aWxkIHRpbWUsIGEgcG9zc2libGUgc29sdXRpb24gaXMgdG8gZ2VuZXJhdGUgdGhlIHJvdXRlIGluIGEgdW5pdCB0ZXN0IGFuZCBjcmVhdGUgdGhlIHNwZWMgZHVyaW5nIHRlc3QgZXhlY3V0aW9uLgoyLiBFYWNoIHZlcnR4IHJvdXRlIHRoYXQgbmVlZHMgdG8gdGFrZSBwYXJ0IGluIHRoZSBzcGVjIG11c3QgY29udGFpbiBhdCBtb3N0IG9uZSBoYW5kbGVyIHRoYXQgZGVsZWdhdGVzIHRvIGEgbWV0aG9kIHRoYXQgaXMgZGVjb3JhdGVkIHdpdGgKYW4gJ2lvLnN3YWdnZXIudjMub2FzLmFubm90YXRpb25zLk9wZXJhdGlvbicgYW5ub3RhdGlvbi4gVGhlIGhhbmRsZXIgaXRzZWxmIG11c3Qgbm90IGNsb3NlIGluIG5vdGhpbmcgYnV0IHRoZSByb3V0aW5nIGNvbnRleHQuIFRoaXMgd2lsbCBhaWQKdGhlIGludHJvc3BlY3Rpb24gb2YgdGhlIGFjdHVhbCB0eXBlIGxvY2F0ZWQgaW4gdGhlIEpWTSBzeW50aGV0aWMgY2xhc3Mgb2YgdGhlIGhhbmRsZXIgd2hpY2ggYWN0dWFsbHkgY29udGFpbnMgdGhlIGFubm90YXRlZCBtZXRob2QuClRoYXQgaW1wbGllcyB0aGF0IGEgcm91dGUgY2FuIGhhdmUgbWFueSBpbnRlcm1lZGlhdGUgaGFuZGxlcnMgZGVwZW5kaW5nIG9uIHRoZSB1c2UgY2FzZSBhbmQgc3RpbGwgZXhwcmVzcyB0aGUgb3ZlcmFsbCByZXN1bHQgdGhyb3VnaCBhbgonaW8uc3dhZ2dlci52My5vYXMuYW5ub3RhdGlvbnMuT3BlcmF0aW9uJyBhbm5vdGF0aW9uIGZyb20gdGhlIHNlbGVjdGVkIGhhbmRsZXIuCjMuIEFsbCBpby5zd2FnZ2VyLnYzLm9hcy5hbm5vdGF0aW9ucy5PcGVyYXRpb24nIGFubm90YXRpb25zIG11c3QgY29udGFpbiB0aGUgJ21ldGhvZCcgYXR0cmlidXRlIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gYmUgY3Jvc3MtbWF0Y2hlZCB3aXRoIHRoZSByb3V0ZQpkZWZpbml0aW9uIChlLmcgcm91dGUuaGVhZCguLi4uKSAtPiBhbm5vdGF0aW9uIGluIG1ldGhvZCBtdXN0IGhhdmUgdGhlICdIRUFEJyB2YWx1ZSkKNC4gVGhlIGdlbmVyYXRvciBhdCB0aGUgbW9tZW50IHRyaWVzIHRvIGZvY3VzIG9uIE9wZXJhdGlvbnMgYW5kIGp1c3QgcHJvdmlkZSB0aGUgYmFzaWNzIGZvciBvdGhlciBwYXJ0cyBvZiB0aGUgc3BlYyAoSW5mbywgQ29udGFjdHMsIFNlcnZlcykgc2luY2UKbW9zdCBvZiB0aGVtIGFyZSBjb25maWd1cmF0aW9uIHNwZWNpZmljLgo1LiBNYXBwaW5ncyBiZXR3ZWVuIGFubm90YXRpb25zIGFuZCBPcGVuQVBJIDMgbW9kZWwgYXJlIG1pc3NpbmcgYnV0IHRoZSBvdmVyYWxsIGNvbmNlcHQgbWFrZXMgZXh0ZW5zaW9ucyBlYXNpbHkgYWRqdXN0ZWQuCjYuIE5PIEpBWC1SUyBhbm5vdGF0aW9ucyBtdXN0IGJlIHVzZWQuCgojIEV4YW1wbGUgQ2FzZQpBbiBhY3R1YWwgYXBwbGljYXRpb24gb2YgdGhlc2UgZnVuY3Rpb25zIGNhbiBiZSBmb3VuZCBhdDoKCmh0dHBzOi8vZ2l0aHViLmNvbS9ja2FyYXR6YXMvdHVzLXNlcnZlci1pbXBsZW1lbnRhdGlvbi9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS90dXMvb3NzL3NlcnZlci9jb3JlL1NlcnZlclZlcnRpY2xlLmphdmEgZm9yIGdlbmVyYXRpbmcgdGhlIHNwZWMKYW5kCmh0dHBzOi8vZ2l0aHViLmNvbS9ja2FyYXR6YXMvdHVzLXNlcnZlci1pbXBsZW1lbnRhdGlvbi9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS90dXMvb3NzL3NlcnZlci9jb3JlLypIYW5kbGVyLmphdmEgZm9yIHRoZSB1c2FnZSBvZiBhbm5vdGF0aW9ucyBpbiBoYW5kbGVycy4KCiMgQ3VycmVudCBTdGF0dXMKQnkgbm8gbWVhbnMgdGhlIHdob2xlIE9wZW5BUEkgMyBzcGVjIGlzIGNvdmVyZWQuIFRoZSBjdXJyZW50IGNvZGViYXNlIGNhbiBiZSBleHRlbmRlZCBiYXNlZCBvbiB0aGUgYWN0dWFsIHVzZSBjYXNlcyBhbmQgc3VwcG9ydCBtb3JlIE9wZW5BUEkgc3BlY2lmaWNhdGlvbi4KVGhpcyByZXBvc2l0b3J5IGNhbiBiZSB1c2VkIGFzIGEgYmFzaXMgdG8gaW5zcGlyZSB0aGUgZGVzaWduIG9mIG9mZmljaWFsIHZlcnR4ICJvcGVuYXBpLWVuYWJsZWQiIHZlcnR4IHJvdXRlcyBpbiBvcmRlciB0byBtYWtlIHRoZSBpbnRyb3NwZWN0aW9uIGVhc2llciBhbmQKbW9yZSBlZmZlY3RpdmUuIAogCgo=
    description: Runtime Generation of OpenApi 3 specification from vertx routes.
    created: "2018-02-05T08:50:42Z"
    updated: "2020-04-24T09:36:48Z"
    language: Java
    archived: false
    stars: 10
    watchers: 10
    forks: 4
    owner: ckaratzas
    logo: https://avatars.githubusercontent.com/u/35725079?v=4
    license: MIT
    repoEtag: '"a0fe6e47f1a355828e5ebd8d6e88fe9bae3be940b277cc06711138c3fbabd2a3"'
    repoLastModified: Fri, 24 Apr 2020 09:36:48 GMT
    readmeEtag: '"da7dff4ee0b884f36cada206575d450afc1883b641d212919fbd823062504139"'
    readmeLastModified: Fri, 16 Feb 2018 14:55:56 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/avanov/openapi-type
  v3: true
  repositoryMetadata:
    base64Readme: >-
      Li4gX2JhZGdlczoKCi4uIGltYWdlOjogaHR0cHM6Ly9naXRodWIuY29tL2F2YW5vdi9vcGVuYXBpLXR5cGUvd29ya2Zsb3dzL0NJL2JhZGdlLnN2Zz9icmFuY2g9ZGV2ZWxvcAogICAgOnRhcmdldDogaHR0cHM6Ly9naXRodWIuY29tL2F2YW5vdi9vcGVuYXBpLXR5cGUvYWN0aW9ucz9xdWVyeT1icmFuY2glM0FkZXZlbG9wCgouLiBpbWFnZTo6IGh0dHBzOi8vY292ZXJhbGxzLmlvL3JlcG9zL2dpdGh1Yi9hdmFub3Yvb3BlbmFwaS10eXBlL2JhZGdlLnN2Zz9icmFuY2g9ZGV2ZWxvcAogICAgOnRhcmdldDogaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vZ2l0aHViL2F2YW5vdi9vcGVuYXBpLXR5cGU/YnJhbmNoPWRldmVsb3AKCi4uIGltYWdlOjogaHR0cHM6Ly9yZXF1aXJlcy5pby9naXRodWIvYXZhbm92L29wZW5hcGktdHlwZS9yZXF1aXJlbWVudHMuc3ZnP2JyYW5jaD1tYXN0ZXIKICAgIDp0YXJnZXQ6IGh0dHBzOi8vcmVxdWlyZXMuaW8vZ2l0aHViL2F2YW5vdi9vcGVuYXBpLXR5cGUvcmVxdWlyZW1lbnRzLz9icmFuY2g9bWFzdGVyCiAgICA6YWx0OiBSZXF1aXJlbWVudHMgU3RhdHVzCgouLiBpbWFnZTo6IGh0dHBzOi8vcmVhZHRoZWRvY3Mub3JnL3Byb2plY3RzL29wZW5hcGktdHlwZS9iYWRnZS8/dmVyc2lvbj1sYXRlc3QKICAgIDp0YXJnZXQ6IGh0dHBzOi8vb3BlbmFwaS10eXBlLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC8KICAgIDphbHQ6IERvY3VtZW50YXRpb24gU3RhdHVzCgouLiBpbWFnZTo6IGh0dHA6Ly9pbWcuc2hpZWxkcy5pby9weXBpL3Yvb3BlbmFwaS10eXBlLnN2ZwogICAgOnRhcmdldDogaHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9vcGVuYXBpLXR5cGUKICAgIDphbHQ6IExhdGVzdCBQeVBJIFJlbGVhc2UKCgpPcGVuQVBJIFR5cGUKPT09PT09PT09PT09CgpPcGVuQVBJIHNwZWNpZmljYXRpb24gcmVwcmVzZW50ZWQgYXMgYSBQeXRob24gdHlwZS4gVXNlIGl0IHRvIHBhcnNlIHNwZWNpZmljYXRpb25zIHdyaXR0ZW4gaW4gSlNPTiBhbmQgWUFNTCBmb3JtYXRzLgoKLi4gY29kZTo6IGJhc2gKCiAgICBwaXAgaW5zdGFsbCBvcGVuYXBpLXR5cGUKCgouLiBjb2RlOjogcHl0aG9uCgogICAgZnJvbSBvcGVuYXBpX3R5cGUgaW1wb3J0IE9wZW5BUEksIHBhcnNlX3NwZWMsIHNlcmlhbGl6ZV9zcGVjCgoKICAgIHNwZWM6IE9wZW5BUEkgPSBwYXJzZV9zcGVjKHsKICAgICAgICAieW91ciBPcGVuQVBJIFNwZWMgYXMgUHl0aG9uIGRpY3Rpb25hcnkiOiAid2lsbCBiZSBwYXJzZWQgaW50byBhIHByb3BlciBQeXRob24gdHlwZSIKICAgIH0pCiAgICBhc3NlcnQgcGFyc2Vfc3BlYyhzZXJpYWxpemVfc3BlYyhzcGVjKSkgPT0gc3BlYwoKLi4gY29kZTo6IGJhc2gKCiAgICAkIGN1cmwgLXMgaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby9hcGkvdjMvb3BlbmFwaS5qc29uIHwgb3BlbmFwaS10eXBlIGNoZWNrCiAgICBTdWNjZXNzZnVsbHkgcGFyc2VkLgoKCkNvZGVnZW4KLS0tLS0tLQoKSWYgeW91IGFyZSBsb29raW5nIGZvciBhIGNvbXBsZXRlIGNsaWVudCBjb2RlIGdlbmVyYXRvciwgY29uc2lkZXIgYG9wZW5hcGktY2xpZW50LWdlbmVyYXRvciA8aHR0cHM6Ly9naXRodWIuY29tL2F2YW5vdi9vcGVuYXBpLWNsaWVudC1nZW5lcmF0b3I+YF8KdGhhdCB1c2VzIHRoaXMgbGlicmFyeSB1bmRlciB0aGUgaG9vZC4KCkNsb25pbmcgdGhpcyByZXBvCi0tLS0tLS0tLS0tLS0tLS0tCgpUaGUgcHJvcGVyIHdheSB0byBjbG9uZSB0aGlzIHJlcG8gaXM6CgouLiBjb2RlLWJsb2NrOjogYmFzaAoKICAgIGdpdCBjbG9uZSAtLXJlY3Vyc2Utc3VibW9kdWxlcyA8cmVwby11cmw+IDxsb2NhbC1wcm9qZWN0LXJvb3Q+CiAgICBjZCA8bG9jYWwtcHJvamVjdC1yb290PgoKICAgICMgZm9yIHNob3dpbmcgc3VibW9kdWxlIHN0YXR1cyB3aXRoIGBnaXQgc3RhdHVzYAogICAgZ2l0IGNvbmZpZyBzdGF0dXMuc3VibW9kdWxlc3VtbWFyeSAxCgogICAgIyBmb3IgbG9nZ2luZyBzdWJtb2R1bGUgZGlmZiB3aXRoIGBnaXQgZGlmZmAKICAgIGdpdCBjb25maWcgZGlmZi5zdWJtb2R1bGUgbG9nCgoKRG9jdW1lbnRhdGlvbgotLS0tLS0tLS0tLS0tCgpEb2N1bWVudGF0aW9uIGlzIGhvc3RlZCBvbiBSZWFkVGhlRG9jczogaHR0cHM6Ly9vcGVuYXBpLXR5cGUucmVhZHRoZWRvY3MuaW8vZW4vZGV2ZWxvcC8KCgpUZXN0IGZyYW1ld29yawotLS0tLS0tLS0tLS0tLQoKVGhlIHByb2plY3QgdXNlcyBgTml4IDxodHRwczovL25peG9zLm9yZy8+YF8gZm9yIGJvb3RzdHJhcHBpbmcgaXRzIGRldiBlbnZpcm9ubWVudC4KCllvdSBjYW4gcnVuIGV4aXN0aW5nIHRlc3Qgc3VpdGUgd2l0aAoKLi4gY29kZTo6IGJhc2gKCiAgIG5peC1zaGVsbCAtLXJ1biAibWFrZSB0ZXN0IgoKCkNoYW5nZWxvZwotLS0tLS0tLS0KClNlZSBgQ0hBTkdFTE9HIDxodHRwczovL2dpdGh1Yi5jb20vYXZhbm92L29wZW5hcGktdHlwZS9ibG9iL21hc3Rlci9DSEFOR0VMT0cucnN0PmBfLgo=
    readmeEtag: '"3cc6274077035e23a6a6137639872518e78e461baa07c9e08b75eecb88dd40d7"'
    readmeLastModified: Thu, 29 Apr 2021 21:41:39 GMT
    description: >-
      OpenAPI represented as a Python type. Use it to parse specifications
      written in JSON and YAML formats.
    created: "2020-12-27T08:19:27Z"
    updated: "2022-04-06T06:04:06Z"
    language: Python
    archived: false
    stars: 10
    watchers: 10
    forks: 2
    owner: avanov
    logo: https://avatars.githubusercontent.com/u/601955?v=4
    license: MIT
    repoEtag: '"6bfc35a4fdd80ac883b436414b74939cde6282e3d0f20f023954820d3713289d"'
    repoLastModified: Wed, 06 Apr 2022 06:04:06 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/juststeveking/go-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBHbyBBUEkKCkEgc2ltcGxlIEdvIEFQSSBmb2xsb3dpbmcgY29uY2VwdHMgb2YgRG9tYWluIERyaXZlbiBEZXNpZ24gZm9yIGVkdWNhdGlvbmFsIHB1cnBvc2VzLgoKT3BlbiBBUEkgc3BlY2lmaWNhdGlvbiBjYW4gYmUgZm91bmQgW2hlcmVdKGRvY3MvcmVmZXJlbmNlL29wZW5hcGkudjEueWFtbCkKCiMjIEluc3RhbGxhdGlvbgoKQ2xvbmUgdGhlIHJlcG8KCmBgYGJhc2gKJCBnaXQgY2xvbmUgZ2l0QGdpdGh1Yi5jb206SnVzdFN0ZXZlS2luZy9nby1hcGkuZ2l0CmBgYAoKYGBgYmFzaAokIGNkIGdvLWFwaQpgYGAKCiMjIFJ1bm5pbmcKCk9uY2UgaW5zdGFsbGVkLCBzaW1wbHkgc3BpbiB1cCB0aGUgZG9ja2VyIGNvbnRhaW5lcjoKCmBgYGJhc2gKJCBkb2NrZXItY29tcG9zZSB1cCAtZCAtLWJ1aWxkCmBgYAoKVGhpcyB3aWxsIGdpdmUgeW91IGEgc2luZ2xlIGVuZHBvaW50IGZvciBub3cgdW5kZXI6IGBodHRwOi8vbG9jYWxob3N0OjgwODAvcGluZ2Agd2hpY2ggaXMgYSBoZWFsdGhjaGVjayBVUkwsIGFuZCB3aWxsIHJldHVybiB0aGUgZm9sbG93aW5nOgoKYGBganNvbgp7CiAgICAibWVzc2FnZSI6ICJTZXJ2aWNlIE9ubGluZSIKfQpgYGAK
    readmeEtag: '"23be912faf11859e02d0c7b8e10747df7ed6941b6cccd136d3aef7fd6f03ff92"'
    readmeLastModified: Mon, 20 Jul 2020 10:51:45 GMT
    description: >-
      A simple Go API following concepts of Domain Driven Design for educational
      purposes.
    created: "2020-07-15T14:18:30Z"
    updated: "2022-04-10T19:56:21Z"
    language: Go
    archived: false
    stars: 9
    watchers: 9
    forks: 0
    owner: JustSteveKing
    logo: https://avatars.githubusercontent.com/u/6368379?v=4
    repoEtag: '"098e291c12cc66fdc7975509cf4c64887c9585751477439782e5da5738df6f4e"'
    repoLastModified: Sun, 10 Apr 2022 19:56:21 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/szasza/express-gateway-plugin-openapi3-mock-server
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBFeHByZXNzIEdhdGV3YXkgT3BlbkFQSSAzIE1vY2sgU2VydmVyIFBsdWdpbgoKWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vYmFkZ2UuZnVyeS5pby9qcy9leHByZXNzLWdhdGV3YXktcGx1Z2luLW9wZW5hcGkzLW1vY2stc2VydmVyLnN2ZyldKGh0dHBzOi8vYmFkZ2UuZnVyeS5pby9qcy9leHByZXNzLWdhdGV3YXktcGx1Z2luLW9wZW5hcGkzLW1vY2stc2VydmVyKQoKKipfVGhpcyBwbHVnaW4gaXMgdW5kZXIgYWN0aXZlIGRldmVsb3BtZW50LiBXb3VsZCB5b3UgbWVldCBhbnkgcHJvYmxlbXMsIHBsZWFzZSBvcGVuIGEgbmV3IGlzc3VlCmFmdGVyIHZlcmlmeWluZyB0aGF0IHRoZXJlIGlzbid0IG9uZSBhbHJlYWR5Ll8qKgoKIyMgUHJlcmVxdWlzaXRlcwoKUGxlYXNlIGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIG9uIEV4cHJlc3MgR2F0ZXdheSdzIFtHZXR0aW5nIHN0YXJ0ZWRdKGh0dHA6Ly93d3cuZXhwcmVzcy1nYXRld2F5LmlvL2dldHRpbmctc3RhcnRlZC8pIHBhZ2UuCgpBbHNvIHBsZWFzZSB0YWtlIGEgbG9vayBhdCBob3cgcGx1Z2lucyBhcmUgW2luc3RhbGxlZCBhbmQgZW5hYmxlZF0oaHR0cDovL3d3dy5leHByZXNzLWdhdGV3YXkuaW8vZG9jcy9wbHVnaW5zLykuCgojIyBJbnN0YWxsYXRpb24KCmBlZyBwbHVnaW4gaW5zdGFsbCBleHByZXNzLWdhdGV3YXktcGx1Z2luLW9wZW5hcGkzLW1vY2stc2VydmVyYAoKIyMgQ29uZmlndXJhdGlvbgoKWW91IGNhbiB1c2UgYHNhbXBsZXMvYmFzZS1wYXRocy55bWxgIGZvciB0ZXN0aW5nIHB1cnBvc2VzLiBJZiBzbywgcGxlYXNlIGNyZWF0ZSBhIGBkZWZpbml0aW9uc2AgZm9sZGVyCmluIHRoZSBwcm9qZWN0IHJvb3QgYW5kIGNvcHkgdGhlIHNhbXBsZSBZQU1MIHRoZXJlLgoKX3N5c3RlbS5jb25maWcueW1sXwoKYGBgeWFtbAojIHNvbWUgY29uZmlnIGluIGZyb250IG9mIHRoZSBwbHVnaW5zIHNlY3Rpb24KCnBsdWdpbnM6CiAgZXhwcmVzcy1nYXRld2F5LXBsdWdpbi1vcGVuYXBpMy1tb2NrLXNlcnZlcjoKICAgIGRlZmluaXRpb25GaWxlOiAnZGVmaW5pdGlvbnMveW91cmRlZmluaXRpb24ueW1sJyAjIFRoZSBmaWxlIGNvbnRhaW5pbmcgeW91ciBBUEkncyBzcGVjaWZpY2F0aW9uCgojIHNvbWUgY29uZmlnIGFmdGVyIHRoZSBwbHVnaW5zIHNlY3Rpb24KYGBgCgpfZ2F0ZXdheS5jb25maWcueW1sXyAoQSBiYXJlYm9uZSBleGFtcGxlLCBpZiBub3RoaW5nIGVsc2UgaXMgdXNlZC4pCgpgYGB5YW1sCmh0dHA6CiAgcG9ydDogODAKYXBpRW5kcG9pbnRzOgogIGFwaToKICAgIGhvc3Q6ICcqJwpwb2xpY2llczoKICAtIG1vY2sKcGlwZWxpbmVzOgogIGFwaToKICAgIGFwaUVuZHBvaW50czoKICAgICAgICAtIGFwaQogICAgcG9saWNpZXM6CiAgICAgICAgLSBtb2NrOgogICAgICAgICAgLSBhY3Rpb24KYGBgClRoZSBhYm92ZSBjb25maWd1cmF0aW9uIGRpc2FibGVzIHRoZSBBZG1pbiBDTEkgYW5kIHdpbGwgZG8gbm90aGluZyBidXQgcHJvdmlkZSBhIGR1bW15IHJlc3BvbmRlciBiYXNlZCBvbiB5b3VyIApPcGVuQVBJIHNwZWNpZmljYXRpb24uCgojIyBGZWF0dXJlcwoKKiBFbmRwb2ludHMgd2l0aCBhcHByb3ByaWF0ZSByZXF1ZXN0IHR5cGVzIGFyZSBwYXJzZWQgYW5kIHRoZSBmaXJzdCByZXNwb25zZSBleGFtcGxlIGlzIHVzZWQgYXMgYSByZXNwb25zZSBib2R5LgoqIEhUVFAgYW5kIGFwaUtleSBhdXRoIGhlYWRlciBjaGVjayBzdXBwb3J0CgojIyMgVG8gZG8KCiogQWNjZXB0IGhlYWRlciBjaGVja3MgdG8gcmV0dXJuIGFwcHJvcHJpYXRlIHJlc3BvbnNlIGV4YW1wbGUKKiBYLSogaGVhZGVycyBmb3IgdGVzdGluZyBlcnJvciByZXNwb25zZXMKKiBYLSogaGVhZGVycyBmb3IgcmVzcG9uc2UgZXhhbXBsZSBzZWxlY3Rpb24KKiBJbnB1dCBwYXJhbWV0ZXIgdmFsaWRhdGlvbgoqIEdlbmVyYXRvcnMgZm9yIHJhbmRvbSByZXNwb25zZSBkYXRhIGJhc2VkIG9uIHByb3ZpZGVkIHNjaGVtYQo=
    description: An OpenAPI 3 mock server plugin for Express Gateway
    created: "2017-10-15T03:42:06Z"
    updated: "2020-08-17T14:14:25Z"
    language: JavaScript
    archived: false
    stars: 8
    watchers: 8
    forks: 0
    owner: Szasza
    logo: https://avatars.githubusercontent.com/u/911466?v=4
    license: NOASSERTION
    repoEtag: '"adc170d55ef528c09887fb7cd6bd2a4f98a7a2363042937c4464c9b303c26b3e"'
    repoLastModified: Mon, 17 Aug 2020 14:14:25 GMT
    readmeEtag: '"09df3ab227b8a3cabe253bd67870ef925a3c830b9e99eb99b03d96c086107b5b"'
    readmeLastModified: Tue, 28 Nov 2017 08:12:51 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/technocreatives/openapi-mock-eller
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIHYzIE1vY2sgU2VydmVyCgpBIHZlcnkgYWxwaGEgc2VydmVyIGZvciBnZW5lcmF0aW5nIG1vY2sgZGF0YSBmcm9tIGFuIE9wZW5BUEkgdjMgc3BlYy4KClRoZSBjb2RlYmFzZSBpcyB2ZXJ5IHNtYWxsLCBjb250cmlidXRpb25zIGFyZSB2ZXJ5IHdlbGNvbWUuIDpzbWlsZToKCiMjIFVzYWdlCgpObyBucG0gbW9kdWxlIHlldCwgc29ycnkuIFlvdSBjYW4gY2xvbmUgdGhpcyByZXBvIHRob3VnaCBhbmQgZXhlY3V0ZSBpdCBmcm9tIHdoZXJldmVyIHlvdSBsaWtlOgoKYGBgCm5vZGUgc2VydmVyLmpzIDxzcGVjLnlhbWw+IFstLXBvcnQ9ODAwMV0gWy0taG9zdD1sb2NhbGhvc3RdCmBgYAoKWW91ciBzZXJ2ZXIgaXMgbm93IHJ1bm5pbmcgb24gPGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMT4uCllvdSBjYW4gZmluZCB0aGUgcmVuZGVyZWQgZG9jdW1lbnRhdGlvbiBmb3IgeW91ciBzcGVjIGF0IDxodHRwOi8vbG9jYWxob3N0OjgwMDEvZG9jcz4sCmFuZCwgaWYgeW91IGV2ZXIgbmVlZCBpdCwgdGhlIEpTT04gc291cmNlIG9mIHlvdXIgc3BlYyBhdCA8aHR0cDovL2xvY2FsaG9zdDo4MDAxL2RvY3Mvc2NoZW1hLmpzb24+LgoKIyMgTGljZW5zZQoKSVNDIGxpY2Vuc2UgLSBzZWUgTElDRU5TRSBmaWxlLgo=
    description: From OpenAPI v3 spec to running mock server in one command
    created: "2018-04-22T14:39:26Z"
    updated: "2020-01-19T12:49:24Z"
    language: JavaScript
    archived: false
    stars: 8
    watchers: 8
    forks: 2
    owner: technocreatives
    logo: https://avatars.githubusercontent.com/u/4668783?v=4
    license: ISC
    repoEtag: '"68dc4238088d219616310abf1cfac82186ca56d23d61e4617829af7b60b41f81"'
    repoLastModified: Sun, 19 Jan 2020 12:49:24 GMT
    readmeEtag: '"95818e900a9cfd1b72ec2097cba5aa55092d88e0ac3146fec9304eeeccbd8d5c"'
    readmeLastModified: Tue, 24 Jul 2018 21:32:34 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/rinold/steamer
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTdGVhbWVyCgpDb21tYW5kIGxpbmUgdG9vbCBmb3IgW1ZhcG9yXShodHRwczovL3ZhcG9yLmNvZGVzKSBzdHViICh0ZW1wbGF0ZSkgc2VydmVyIGdlbmVyYXRvciBmcm9tIHRoZSBbT3BlbkFQSV0oaHR0cHM6Ly9vcGVuYXBpcy5vcmcvKSAoU3dhZ2dlcikgc3BlY2lmaWNhdGlvbiB3cml0dGVuIGluIFN3aWZ0LgoKIyMjIFRhcmdldGVkIHN1cHBvcnRlZCB2ZXJzaW9uczoKLSBWYXBvciAzCi0gT3BlbkFQSSAzLjAuKiAoW0N1cnJlbnQgbGF0ZXN0IC0gMy4wLjEgU3BlY10oaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjEubWQpKQoKIyMjIENvbmNlcHQKVGhlIE9wZW5BUEkgZGVmaW5pdGlvbiBvZiBBUEkgZGVzaWduIGlzIGEgZ3JlYXQgYmFzZSB0aGF0IGNvdWxkIGFsbG93IHRvIGNyZWF0ZSBhdXRvZ2VuZXJhdGVkIGNvZGUgdGhhdDoKLSBXb3VsZCAqKmJlIHdlbGwtZG9jdW1lbnRlZCoqIC0gYXMgdGhlIE9wZW5BUEkgZGVmaW5pdGlvbiBieSBpdHNlbGYgaWRlYWxseSBzaG91bGQgYmUgYSAnZG9jdW1lbnRhdGlvbicgZm9yIGNsaWVudCBkZXZlbG9wZXJzIGl0IGNvdWxkIGJlIGF1dG9tYXRpY2FsbHkgYnJvdWdodCB0byB0aGUgU3dpZnQgY29kZSBkZWZpbml0aW9ucy4KLSBXb3VsZCAqKnNoYXJlIHRoZSBnZW5lcmF0ZWQgTW9kZWxzIGFuZCBSZXF1ZXN0L1Jlc3BvbnNlIGNvZGUqKiAgYXMgbXVjaCBhcyBwb3NzaWJsZSAqKmJldHdlZW4qKiB0aGUgUkVTVGZ1bCAqKnNlcnZlciBhbmQgY2xpZW50KiogYXBwbGljYXRpb24gd2hpY2ggYXV0b21hdGljYWxseSB3b3VsZCBlbnN1cmUgc2VyaWFsaXNhdGlvbiBvZiBkYXRhIHBhc3NlZCBiZXR3ZWVuIHNlcnZlciBhbmQgY2xpZW50IGlzIFNBTUU6CiAgLSBObyBtb3JlIHR5cG9zLWVycm9yIGRlYnVnZ2luZyBvZiBmYWlsZWQgcmVxdWVzdHMgKGUuZy4gd2hlbiBvbmUgc2lkZSBzZW5kcyAnbGljZW5jZScgaW5zdGVhZCBvZiAnbGljZW5zZScpCiAgLSBObyBtb3JlIHRyaWNreSBlcnJvcnMgb2YgZGF0YSB0eXBlcyBjb252ZXJzaW9ucyAobGlrZSBJbnQ2NCB2cyBJbnQzMiwgdGhlIERhdGUgZm9ybWF0cywgZXRjLikKICAtIFNoYXJlZCBtb2RlbHMgd291bGQgYmUgYSBTSU5HTEUgcGxhY2UgeW91IG5lZWQgdG8gY2hhbmdlIGlmIHJlcXVpcmVkCi0gV291bGQgKipiZSBleHRlbnNpYmxlKiosIGlkZWFsbHkgYWxsb3dpbmcgaW5jcmVtZW50YWwgdXBkYXRlcyBvZiBjb2RlIGZyb20gdGhlIHVwZGF0ZWQgT3BlbkFQSSBkZWZpbml0aW9uIHdpdGggbWluaW1hbCBpbXBhY3Qgb24gbWFudWFsbHkgYWRkZWQgY29kZS4KLSBXb3VsZCAqKmJlIHNpbXBsZSBhbmQgU3dpZnR5KiosIGNyZWF0ZWQgc28gdGhhdCB0aG91Z2h0cyBsaWtlICdpdCB3b3VsZCBiZSBlYXNpZXIgdG8gZGVsZXRlIGFuZCByZXdyaXRlIGl0JyBzaG91bGQgbmV2ZXIgYXBwZWFyIGluIGRldmVsb3BlciBoZWFkIHdoZW4gaGUgc2VlcyBpdC4KCiMjIyBHb2FscwotIEVuY291cmFnZSB0aGUgW0FQSSBkZXNpZ24gZmlyc3RdKGh0dHBzOi8vc3dhZ2dlcmh1Yi5jb20vYmxvZy9hcGktZGVzaWduL2Rlc2lnbi1maXJzdC1vci1jb2RlLWZpcnN0LWFwaS1kZXZlbG9wbWVudC8pIGlmIGl0IHN1aXRzIHlvdXIgbmVlZHMhCi0gTWFrZSBpbXBsZW1lbnRhdGlvbiBhbmQgcHJvdG90eXBpbmcgb2YgUkVTVGZ1bCBzZXJ2ZXJzIHVzaW5nIFZhcG9yIGV2ZW50IG1vcmUgZWFzaWVyIGJ5IG1pbmltaXNpbmcgYm9pbGVycGxhdGUgY29kaW5nCi0gTWVldCBpbmNyZWRpYmxlIGFuZCBhbWF6aW5nIFN3aWZ0IHByb2Zlc3Npb25hbHMgd2hvIHdvdWxkIGxpa2UgdG8gam9pbiBhbmQgY29udHJpYnV0ZSB0byB0aGlzIHByb2plY3QhIDopCgojIyMgRmVhdHVyZXMgLSBUQkQsIHN0YXJ0aW5nIGxpc3QgdG8gdGhpbmsgb2YuLi4KLSBHZW5lcmF0aW9uIG9mIHN0dWJiZWQgQVBJIHNlcnZlciBmcm9tIE9wZW5BUEkgZG9jdW1lbnQ6CiAgLSBNb2RlbHMKICAtIENvbnRyb2xsZXJzCiAgLSBSb3V0aW5nCiAgLSBldmVyeXRoaW5nIGVsc2UgbmVlZGVkIHRvIHJ1bgotIFVzZSBTZWN1cml0eSBTY2hlbWUgZGVmaW5pdGlvbnMgZm9yIGF1dGhvcml6YXRpb24gYW5kIGF1dGhlbnRpZmljYXRpb24gc3VwcG9ydAotIE1vY2sgcmVzcG9uc2VzIHdpdGggZGF0YSBleGFtcGxlcyBpZiBwcm92aWRlZAotIENvbW1lbnRzIC8gZG9jdW1lbnRhdGlvbiBnZW5lcmF0aW9uCi0gLi4uCgojIyMgQ29udHJpYnV0aW9uCklzIHdlbGNvbWUhIEpvaW4gYW5kIGJlIHRoZSBmaXJzdCBvbmUgY29tbWl0aW5nIHJlYWwgY29kZSEgIApZb3VyIGNhbiBjb250YWN0IG1lIHZpYSBlbWFpbDogW21paGFpbC5jaHVyYmFub3ZAZ21haWwuY29tXShtYWlsdG86bWloYWlsLmNodXJiYW5vdkBnbWFpbC5jb20pCgojIyMgRGVwZW5kZW5jaWVzIChQb3RlbnRpYWwpCi0gW1N3YWdnZXJQYXJzZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9BdHRpbGFUaGVGdW4vU3dhZ2dlclBhcnNlcikgLSBTd2lmdCBsaWJyYXJ5IGZvciBwYXJzaW5nIE9wZW5BUEkgMi4wIChmLmsuYS4gU3dhZ2dlcikgZG9jdW1lbnRzIGludG8gbmF0aXZlIHN0cnVjdHVyZXMgKE9wZW5BUEkgMy4wIHN1cHBvcnQgaXMgImFscGhhIi1yZWFkeSwgY3VycmVudGx5IG9uIFtmb3JrXShodHRwczovL2dpdGh1Yi5jb20vcmlub2xkL1N3YWdnZXJQYXJzZXIvdHJlZS9vcGVuYXBpLTMpKS4KLSBbP10gW1lhbXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9qcHNpbS9ZYW1zKSAtIEEgU3dlZXQgYW5kIFN3aWZ0eSBZQU1MIHBhcnNlci4KLSBbP10gW1N0ZW5jaWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9reWxlZi9TdGVuY2lsKSAvIFtMZWFmXShodHRwczovL2dpdGh1Yi5jb20vdmFwb3IvbGVhZikgb3IgLi4uIC0gbmVlZCB0byBjaG9vc2Ugc29tZXRoaW5nIGZvciB0ZW1wbGF0aW5nLgo=
    readmeEtag: '"872d1272783edc6c3e655655ed070bf75f8480b71e57f09306df82921dbcabf8"'
    readmeLastModified: Fri, 29 Jun 2018 15:23:04 GMT
    description: Vapor simple CRUD-server generator
    created: "2017-12-26T19:01:47Z"
    updated: "2022-03-22T06:55:36Z"
    language: Swift
    archived: false
    stars: 7
    watchers: 7
    forks: 0
    owner: rinold
    logo: https://avatars.githubusercontent.com/u/2253795?v=4
    license: MIT
    repoEtag: '"4003b54294eaa157144df9652ab1475e2ca7ccefa7644f737caef0fbb885b6fb"'
    repoLastModified: Tue, 22 Mar 2022 06:55:36 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/tfranzel/drf-spectacular-sidecar
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PT09PT09PT09PT09PT09PT09PT09PT0KZHJmLXNwZWN0YWN1bGFyLXNpZGVjYXIKPT09PT09PT09PT09PT09PT09PT09PT0KCnxweXBpLXZlcnNpb258IHxweXBpLWRsfAoKU2VydmUgc2VsZi1jb250YWluZWQgZGlzdHJpYnV0aW9uIGJ1aWxkcyBvZiBgU3dhZ2dlciBVSWBfIGFuZCBgUmVkb2NgXyB3aXRoIGBEamFuZ29gXyBlaXRoZXIgdmlhIGBydW5zZXJ2ZXJgXyBvciBgY29sbGVjdHN0YXRpY2BfLgoKVGhpcyBEamFuZ28gYXBwIGlzIGFuIG9wdGlvbmFsIGFkZGl0aW9uIHRvIGBkcmYtc3BlY3RhY3VsYXJgXywgYnV0IGRvZXMgbm90IGRlcGVuZCBvbiBpdC4gSXQgbWF5IGFsc28gYmUgdXNlZCBpbmRlcGVuZGVudGx5LgoKKiBgU3dhZ2dlciBVSWBfIHZlcnNpb24gYGA0LjEwLjBgYCAoYG5wbSA8aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3dhZ2dlci11aS1kaXN0PmBfXykKKiBgUmVkb2NgXyB2ZXJzaW9uIGBgMi4wLjAtcmMuNjZgYCAoYG5wbSA8aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVkb2M+YF9fKQoKVGhpcyBpcyBhIHNlbGYtdXBkYXRpbmcgYW5kIHNlbGYtcHVibGlzaGluZyByZXBvc2l0b3J5IHRoYXQgbG9va3MgZm9yIHVwZGF0ZXMgb25jZSBhIHdlZWsuClRoZSBkaXN0cmlidXRpb24gZmlsZXMgYXJlIHNvdXJjZWQgZnJvbSBucG0gdmlhIGBqc2RlbGl2cmBfLCB2YWxpZGF0ZWQsIHBhY2thZ2VkIGFuZCB1cGxvYWRlZCB0byBgUHlQSWBfLgoKSW5zdGFsbGF0aW9uCi0tLS0tLS0tLS0tLQoKLi4gY29kZTo6IGJhc2gKCiAgICAkIHBpcCBpbnN0YWxsIGRyZi1zcGVjdGFjdWxhci1zaWRlY2FyCgpUaGUgcGFja2FnZSBuZWVkcyB0byBiZSByZWdpc3RlcmVkIHRvIGFsbG93IERqYW5nbyB0byBkaXNjb3ZlciB0aGUgc3RhdGljIGZpbGVzLgoKLi4gY29kZTo6IHB5dGhvbgoKICAgIElOU1RBTExFRF9BUFBTID0gWwogICAgICAgICMgQUxMIFlPVVIgQVBQUwogICAgICAgICdkcmZfc3BlY3RhY3VsYXJfc2lkZWNhcicsCiAgICBdCgpSZXF1aXJlbWVudHMKLS0tLS0tLS0tLS0tCgpEamFuZ28gPj0gMi4yCgpMaWNlbnNlcwotLS0tLS0tLQoKUHJvdmlkZWQgYnkgYFQuIEZyYW56ZWwgPGh0dHBzOi8vZ2l0aHViLmNvbS90ZnJhbnplbD5gXy4gYExpY2Vuc2VkIHVuZGVyIDMtQ2xhdXNlIEJTRCA8aHR0cHM6Ly9naXRodWIuY29tL3RmcmFuemVsL2RyZi1zcGVjdGFjdWxhci1zaWRlY2FyL2Jsb2IvbWFzdGVyL0xJQ0VOU0U+YF8uCgpUaGlzIHBhY2thZ2UgaW5jbHVkZXMgZGlzdHJpYnV0aW9uIGJ1aWxkcyBvZgoKKiBgU3dhZ2dlciBVSWBfOiBUaGUgYG9yaWdpbmFsIGxpY2Vuc2UgKEFwYWNoZSAyLjApIDxodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aS9ibG9iL21hc3Rlci9MSUNFTlNFPmBfIGFuZCBjb3B5cmlnaHQgYXBwbHkgdG8gdGhvc2UgZmlsZXMuCiogYFJlZG9jYF86IFRoZSBgb3JpZ2luYWwgbGljZW5zZSAoTUlUKSA8aHR0cHM6Ly9naXRodWIuY29tL1JlZG9jbHkvcmVkb2MvYmxvYi9tYXN0ZXIvTElDRU5TRT5gXyBhbmQgY29weXJpZ2h0IGFwcGx5IHRvIHRob3NlIGZpbGVzLgoKCi4uIHxweXBpLXZlcnNpb258IGltYWdlOjogaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9weXBpL3YvZHJmLXNwZWN0YWN1bGFyLXNpZGVjYXIuc3ZnCiAgIDp0YXJnZXQ6IGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9kcmYtc3BlY3RhY3VsYXItc2lkZWNhci8KLi4gfHB5cGktZGx8IGltYWdlOjogaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9weXBpL2RtL2RyZi1zcGVjdGFjdWxhci1zaWRlY2FyCiAgIDp0YXJnZXQ6IGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9kcmYtc3BlY3RhY3VsYXItc2lkZWNhci8KCi4uIF9QeVBJOiBodHRwczovL3B5cGkub3JnL3Byb2plY3QvZHJmLXNwZWN0YWN1bGFyLXNpZGVjYXIvCi4uIF9qc2RlbGl2cjogaHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLwouLiBfRGphbmdvOiBodHRwczovL3d3dy5kamFuZ29wcm9qZWN0LmNvbS8KLi4gX2RyZi1zcGVjdGFjdWxhcjogaHR0cHM6Ly9naXRodWIuY29tL3RmcmFuemVsL2RyZi1zcGVjdGFjdWxhcgouLiBfUmVkb2M6IGh0dHBzOi8vZ2l0aHViLmNvbS9SZWRvY2x5L3JlZG9jCi4uIF9Td2FnZ2VyIFVJOiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aQouLiBfY29sbGVjdHN0YXRpYzogaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzMuMi9yZWYvY29udHJpYi9zdGF0aWNmaWxlcy8jY29sbGVjdHN0YXRpYwouLiBfcnVuc2VydmVyOiBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vMy4yL3JlZi9jb250cmliL3N0YXRpY2ZpbGVzLyNydW5zZXJ2ZXIK
    readmeEtag: '"ad04d827e05fe61a9e398ab1d1662399e62b600a895b390032f82816ac21c366"'
    readmeLastModified: Fri, 01 Apr 2022 11:25:41 GMT
    description: >-
      Serve self-contained distribution builds of Swagger UI and Redoc with
      Django.
    created: "2021-09-24T22:17:14Z"
    updated: "2022-04-15T05:25:38Z"
    language: Python
    archived: false
    stars: 8
    watchers: 8
    forks: 1
    owner: tfranzel
    logo: https://avatars.githubusercontent.com/u/13507857?v=4
    license: BSD-3-Clause
    repoEtag: '"9b1c32b081cf246b006aaf35b603f95a56fed2d5cbb0433883e280fc35485c7f"'
    repoLastModified: Fri, 15 Apr 2022 05:25:38 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/misl/openapi-validator-maven-plugin
  v3: true
  repositoryMetadata:
    base64Readme: >-
      b3BlbmFwaS12YWxpZGF0b3ItbWF2ZW4tcGx1Z2luCj09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCkEgTWF2ZW4gcGx1Z2luIHRvIHN1cHBvcnQgdmFsaWRhdGlvbiBvZiBhbmQgY29udmVyc2lvbiAoWUFNTCB2cyBKU09OKSB0byBPcGVuQVBJIChzd2FnZ2VyKSBmaWxlcyAgdXNpbmcgdGhlIFtTd2FnZ2VyIFBhcnNlciBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXIpLgoKSXQgbm90IG9ubHkgdmVyaWZpZXMgd2hldGhlciB0aGUgQVBJIHNwZWNpZmljYXRpb24gZmlsZXMgYXJlIHZhbGlkLCBidXQgYWxzbyBtZXJnZXMgc3BsaXR0ZWQgZmlsZXMgaW50byBhIHNpbmdsZSBZQU1MIG9yIEpTT04gZmlsZS4gVGhpcyBpcyBlc3BlY2lhbGx5IHVzZWZ1bGwgd2hlcmUgdG9vbHMgY2FuIG5vdCBjb3BlIHdpdGggSlNPTiBgJHJlZmAgcmVmZXJlbmNlcyB0byBleHRlcm5hbCBmaWxlcy4KCk1vcmUgaW5mbyBvbiBzcGxpdHRlZCBPcGVuQVBJIHNwZWNpZmljYXRpb24gZmlsZXMgcmVhZCBbRGVzaWduIFdlYiBBUElzXShodHRwczovL2FwaWhhbmR5bWFuLmlvL3dyaXRpbmctb3BlbmFwaS1zd2FnZ2VyLXNwZWNpZmljYXRpb24tdHV0b3JpYWwtcGFydC04LXNwbGl0dGluZy1zcGVjaWZpY2F0aW9uLWZpbGUvKQoKVXNhZ2UKPT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKQWRkIHRvIHlvdXIgYGJ1aWxkLT5wbHVnaW5zYCBzZWN0aW9uIChkZWZhdWx0IHBoYXNlIGlzIGBnZW5lcmF0ZS1zb3VyY2VzYCBwaGFzZSkKYGBgeG1sCjxwbHVnaW4+CiAgPGdyb3VwSWQ+aXQudHJhZWNrLnRvb2xzLm9wZW5hcGk8L2dyb3VwSWQ+CiAgPGFydGlmYWN0SWQ+b3BlbmFwaS12YWxpZGF0b3ItbWF2ZW4tcGx1Z2luPC9hcnRpZmFjdElkPgogIDx2ZXJzaW9uPjEuMC4yPC92ZXJzaW9uPgogIDxleGVjdXRpb25zPgogICAgPGV4ZWN1dGlvbj4KICAgICAgPGdvYWxzPgogICAgICAgIDxnb2FsPmdlbmVyYXRlPC9nb2FsPgogICAgICA8L2dvYWxzPgogICAgICA8Y29uZmlndXJhdGlvbj4KICAgICAgICA8aW5wdXRTcGVjPiR7cHJvamVjdC5iYXNlZGlyfS9zcmMvbWFpbi9yZXNvdXJjZXMvYXBpLnlhbWw8L2lucHV0U3BlYz4KICAgICAgICA8b3V0cHV0UGF0aD4ke3Byb2plY3QuYnVpbGQuZGlyZWN0b3J5fS9nZW5lcmF0ZWQtc3BlY2lmaWNhdGlvbjwvb3V0cHV0UGF0aD4KICAgICAgICA8b3V0cHV0RmlsZW5hbWU+b3BlbmFwaTwvb3V0cHV0RmlsZW5hbWU+CiAgICAgICAgPG91dHB1dEZvcm1hdD5KU09OQU5EWUFNTDwvb3V0cHV0Rm9ybWF0PgogICAgICA8L2NvbmZpZ3VyYXRpb24+CiAgICA8L2V4ZWN1dGlvbj4KICA8L2V4ZWN1dGlvbnM+CjwvcGx1Z2luPgpgYGAKCkZvbGxvd2VkIGJ5OgoKYGBgCm12biBjbGVhbiBjb21waWxlCmBgYAoKIyMjIEdlbmVyYWwgQ29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzCgpQYXJhbWV0ZXIgfCBEZXNjcmlwdGlvbiB8IFJlcXVpcmVkIHwgRGVmYXVsdAotLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLXwtLS0tLS0tLS0KYGlucHV0U3BlY2AgfCBPcGVuQVBJIFNwZWMgZmlsZSBwYXRoIHwgdHJ1ZSB8CmBvdXRwdXRQYXRoYCB8IHRhcmdldCBvdXRwdXQgcGF0aCB8IGZhbHNlIHwgYCR7cHJvamVjdC5idWlsZC5kaXJlY3Rvcnl9L2dlbmVyYXRlZC1zcGVjaWZpY2F0aW9uYApgb3V0cHV0RmlsZW5hbWVgIHwgT3V0cHV0IGZpbGVuYW1lICh3aXRob3V0IGV4dGVuc2lvbikgfCBmYWxzZSB8IG9wZW5hcGkKYG91dHB1dEZvcm1hdGAgfCBPdXRwdXQgZmlsZSBmb3JtYXQgKGBKU09OYCwgYFlBTUxgLCBgSlNPTkFORFlBTUxgKSB8IGZhbHNlIHwgSlNPTgpgZW5jb2RpbmdgIHwgZW5jb2RpbmcgdG8gdXNlIGZvciBvdXRwdXQgZmlsZXMgfCBmYWxzZSB8ICR7cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZ30KYHByZXR0eVByaW50YCB8IHdoZXRoZXIgdG8gcHJldHR5IHByaW50ICh0cnVlKSBvdXRwdXQgb3Igbm90IHwgZmFsc2UgfCB0cnVlCgojIyMgU2FtcGxlIGNvbmZpZ3VyYXRpb25zCgpQbGVhc2Ugc2VlIFtleGFtcGxlIGNvbmZpZ3VyYXRpb25zXShleGFtcGxlcykgZm9yIGhvdyB0byB1c2UgdGhpcyBtYXZlbiBwbHVnaW4uCg==
    readmeEtag: '"c60a98563befd831614210f7d0d67bcb37bc8bd378e91ba9ab539f388c989ddf"'
    readmeLastModified: Sat, 19 Feb 2022 11:28:15 GMT
    description: Plugin to validate and merge splitted OpenAPI specification files.
    created: "2019-09-13T08:46:19Z"
    updated: "2022-02-19T11:18:30Z"
    language: Java
    archived: false
    stars: 6
    watchers: 6
    forks: 1
    owner: misl
    logo: https://avatars.githubusercontent.com/u/2040396?v=4
    repoEtag: '"9e9a18c80b10a31e60d978637d6f8ad78b74909a85fa759344a6d27aa3981a72"'
    repoLastModified: Sat, 19 Feb 2022 11:18:30 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/mokkapps/openapi-angular-spring-demo
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLWFuZ3VsYXItc3ByaW5nLWRlbW8KQSBkZW1vIGFwcGxpY2F0aW9uIHdoaWNoIGRlbW9uc3RyYXRlcyBPcGVuQVBJIGdlbmVyYXRvciBpbiBhIEFuZ3VsYXIgKyBTcHJpbmcgQm9vdCBhcHBsaWNhdGlvbgo=
    readmeEtag: '"fd7f31283f5208e30193ff626d8fce3faf0baabcfd8607f1157d3f8262f41c3d"'
    readmeLastModified: Sun, 23 Feb 2020 14:05:05 GMT
    description: >-
      A demo application which demonstrates OpenAPI generator in a Angular +
      Spring Boot application
    created: "2020-02-22T13:44:36Z"
    updated: "2022-03-05T05:43:57Z"
    language: Java
    archived: false
    stars: 6
    watchers: 6
    forks: 2
    owner: Mokkapps
    logo: https://avatars.githubusercontent.com/u/3127210?v=4
    license: MIT
    repoEtag: '"014bef545dea506bacd7cd6ee4a17dd2c3765beacdb84b683615a4183ef6d110"'
    repoLastModified: Sat, 05 Mar 2022 05:43:57 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Sdk
- source: openapi3 tags
  repository: https://github.com/kevinmmartins/python-flask-connexion-example-openapi3
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBCYXNpYyBwcm9qZWN0IHdpdGggRmxhc2sgLCBDb25uZXhpb24gYW5kIE9wZW5BcGkgMwoKWyFbQ29kYWN5IEJhZGdlXShodHRwczovL2FwaS5jb2RhY3kuY29tL3Byb2plY3QvYmFkZ2UvR3JhZGUvNTQyMjA4MGNiNTYxNGE2YWI2ZDhiYWJjNDAzZWVlMWEpXShodHRwczovL2FwcC5jb2RhY3kuY29tL2FwcC9rZXZpbm1tYXJ0aW5zL3B5dGhvbi1mbGFzay1jb25uZXhpb24tZXhhbXBsZS1vcGVuYXBpMz91dG1fc291cmNlPWdpdGh1Yi5jb20mdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD1rZXZpbm1tYXJ0aW5zL3B5dGhvbi1mbGFzay1jb25uZXhpb24tZXhhbXBsZS1vcGVuYXBpMyZ1dG1fY2FtcGFpZ249QmFkZ2VfR3JhZGVfRGFzaGJvYXJkKQpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbm1tYXJ0aW5zL3B5dGhvbi1mbGFzay1jb25uZXhpb24tZXhhbXBsZS1vcGVuYXBpMy5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbm1tYXJ0aW5zL3B5dGhvbi1mbGFzay1jb25uZXhpb24tZXhhbXBsZS1vcGVuYXBpMykKCkJhc2ljIFB5dGhvbiBwcm9qZWN0IHVzaW5nIEZsYXNrIGFuZCBDb25uZXhpb24gYnkgWmFsYW5kbwoKYGBgaHR0cApodHRwczovL2dpdGh1Yi5jb20vemFsYW5kby9jb25uZXhpb24KYGBgCgojIyBSZXF1aXJlbWVudHMKCiogRG9ja2VyIENvbXBvc2UgMS4yMS4yKwoqIFB5dGhvbiAzLjYgKwoKIyMgUnVuIHdpdGggRG9ja2VyIENvbXBvc2UKCmBgYGJhc2gKIyBidWlsZGluZyB0aGUgY29udGFpbmVyCnN1ZG8gZG9ja2VyLWNvbXBvc2UgYnVpbGQKCiMgc3RhcnRpbmcgdXAgYSBjb250YWluZXIKc3VkbyBkb2NrZXItY29tcG9zZSB1cApgYGAKCiMjIEJ1aWxkIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50CgpgYGBiYXNoCnZpcnR1YWxlbnYgLXAgL3Vzci9iaW4vcHl0aG9uMy42IHZlbnYKc291cmNlIHZlbnYvYmluL2FjdGl2YXRlCnBpcDMgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0CnBpcDMgaW5zdGFsbCAtciB0ZXN0LXJlcXVpcmVtZW50cy50eHQKYGBgCgojIyBTd2FnZ2VyIGRlZmluaXRpb24KCmBgYGh0dHAKaHR0cDovL2xvY2FsaG9zdDo4MDgxL3YxL3N3YWdnZXIuanNvbgpgYGAKCiMjIEhlYWx0aCBDaGVjawoKYGBgaHR0cApodHRwOi8vbG9jYWxob3N0OjgwODEvdjEvYmFzaWMvcGluZwpgYGAKCiMjIExhdW5jaCB0ZXN0cwoKYGBgYmFzaApzb3VyY2UgdmVudi9iaW4vYWN0aXZhdGUKdG94CmBgYAo=
    description: >-
      Basic REST project with Flask , Connexion by Zalando , OpenApi3, Docker
      and tox
    created: "2019-04-15T20:35:56Z"
    updated: "2021-12-12T12:41:50Z"
    language: Python
    archived: false
    stars: 6
    watchers: 6
    forks: 3
    owner: kevinmmartins
    logo: https://avatars.githubusercontent.com/u/20428703?v=4
    license: Apache-2.0
    repoEtag: '"1ad3f0a15911267b8505b6349fee7f1bc8520b5b2b1db357fe60019718f60ae3"'
    repoLastModified: Sun, 12 Dec 2021 12:41:50 GMT
    readmeEtag: '"d3067d4c4fcdb2d34fcdcef8995a8962b2937ee842db57d8b8c5d83d9cbc72ff"'
    readmeLastModified: Tue, 29 Mar 2022 13:53:06 GMT
  foundInMaster: true
  category:
    - Mock
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/progremir/django-swagger-render
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBEamFuZ28gU3dhZ2dlciBSZW5kZXIKCiMjIEdldHRpbmcgU3RhcnRlZAoKIyMjIFByZXJlcXVpc2l0ZXMKCi0gcHl0aG9uID49IDMuNQotIERqYW5nbyA+PSAyLjAKCiMjIyBJbnN0YWxsYXRpb24KCkluc3RhbGwgdXNpbmcgcGlwCgpgYGAKcGlwIGluc3RhbGwgZGphbmdvLXN3YWdnZXItcmVuZGVyCmBgYAoKQWRkICdzd2FnZ2VyX3JlbmRlcicgdG8geW91ciBJTlNUQUxMRURfQVBQUyBzZXR0aW5nLgoKYGBgCklOU1RBTExFRF9BUFBTID0gWwogICAgLi4uCiAgICAnc3dhZ2dlcl9yZW5kZXInLApdCmBgYAoKQ3JlYXRlIHRoZSBmb2xkZXIgd2hlcmUgeW91IHdpbGwgc3RvcmUgeW91ciBkb2N1bWVudGF0aW9uCgpgYGAKbWtkaXIgZG9jcwpgYGAKCkNyZWF0ZSB0aGUgYGluZGV4LnltbGAgZmlsZSB3aXRoIHNvbWUgYE9QRU5BUElgIG9yIGBTd2FnZ2VyYCBzcGVjaWZpY2F0aW9ucwoKYGBgCnRvdWNoIGRvY3MvaW5kZXgueW1sCmBgYAoKU2VydmUgeW91ciBkb2N1bWVudGF0aW9uIGZpbGVzCmBgYAp1cmxwYXR0ZXJucyArPSBzdGF0aWMoJy9kb2NzLycsIGRvY3VtZW50X3Jvb3Q9J2RvY3MnKQpgYGAKCkFkZCBgU1dBR0dFUl9ZQU1MX0ZJTEVOQU1FYCBzZXR0aW5nIHRvIHlvdXIgYHNldHRpbmdzLnB5YAoKYGBgClNXQUdHRVJfWUFNTF9GSUxFTkFNRSA9ICcvZG9jcy9pbmRleC55bWwnCmBgYAoKQWRkIHRoZSBgU3dhZ2dlclVJVmlld2AgdG8geW91ciB1cmxzCgpgYGAKZnJvbSBzd2FnZ2VyX3JlbmRlci52aWV3cyBpbXBvcnQgU3dhZ2dlclVJVmlldwoKCnVybHBhdHRlcm5zID0gWwogICAgLi4uCiAgICBwYXRoKCdzd2FnZ2VyLycsIFN3YWdnZXJVSVZpZXcuYXNfdmlldygpKSwKXQpgYGAKClZvaWxhIQo=
    description: Swagger documentation in Django
    created: "2019-08-05T18:04:35Z"
    updated: "2021-09-09T21:08:30Z"
    language: HTML
    archived: false
    stars: 6
    watchers: 6
    forks: 1
    owner: progremir
    logo: https://avatars.githubusercontent.com/u/17231674?v=4
    license: MIT
    repoEtag: '"7f3f2cd48762ea9e52d2d84f9230d2a77595023ea59a9c0a24229d2325090793"'
    repoLastModified: Thu, 09 Sep 2021 21:08:30 GMT
    readmeEtag: '"0f49e3913abfebaab526cfd33ac44131b1c37eb61584d28ee385116759ce05c0"'
    readmeLastModified: Sat, 27 Jun 2020 11:25:49 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/hslatman/caddy-openapi-validator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBDYWRkeSBPcGVuQVBJIFZhbGlkYXRvciAoV0lQKQoKQSBbQ2FkZHldKGh0dHBzOi8vY2FkZHlzZXJ2ZXIuY29tLykgbW9kdWxlIHRoYXQgdmFsaWRhdGVzIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgYWdhaW5zdCBhbiBbT3BlbkFQSV0oaHR0cHM6Ly93d3cub3BlbmFwaXMub3JnLykgc3BlY2lmaWNhdGlvbi4KCiMjIERlc2NyaXB0aW9uCgpUaGUgT3BlbkFQSSBWYWxpZGF0b3IgbW9kdWxlIGlzIGEgW0NhZGR5XShodHRwczovL2NhZGR5c2VydmVyLmNvbS8pIEhUVFAgaGFuZGxlciB0aGF0IHZhbGlkYXRlcyByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGFnYWluc3QgYW4gT3BlbkFQSSBzcGVjaWZpY2F0aW9uLgpUaGUgW2tpbi1vcGVuYXBpXShodHRwczovL2dpdGh1Yi5jb20vZ2V0a2luL2tpbi1vcGVuYXBpKSBgb3BlbmFwaTNmaWx0ZXJgIGxpYnJhcnkgcGVyZm9ybXMgdGhlIGFjdHVhbCB2YWxpZGF0aW9uLgpUaGUgaGFuZGxlciBpbiB0aGlzIHJlcG9zaXRvcnkgaXMgYSBzbWFsbCB3cmFwcGVyIGZvciB0aGUgZnVuY3Rpb25hbGl0eSBwcm92aWRlZCBieSBgb3BlbmFwaTNmaWx0ZXJgLCB3aXRoIGJhc2ljIGNvbmZpZ3VyYXRpb24gYW5kIGludGVncmF0aW9ucyBvcHRpb25zIGZvciBDYWRkeS4gClRoZSBwcm9qZWN0IGlzIGN1cnJlbnRseSBpbiBQT0Mgc3RhZ2UsIG1lYW5pbmcgdGhhdCBtdWNoIG9mIGl0IGNhbiwgYW5kIGxpa2VseSB3aWxsLCBjaGFuZ2UuCgpUaGUgcmVxdWVzdC9yZXNwb25zZSBmbG93IGlzIGFzIGZvbGxvd3M6CgoqIFdoZW4gYSByZXF1ZXN0IGFycml2ZXMsIHRoZSBWYWxpZGF0b3Igd2lsbCBsb29rIGZvciBhIHZhbGlkIHJvdXRlIGluIHRoZSBwcm92aWRlZCBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIHZhbGlkYXRlIHRoZSByZXF1ZXN0IGFnYWluc3QgdGhlIHNjaGVtYS4KKiBUaGUgcmVxdWVzdCBpcyB0aGVuIHBhc3NlZCBvbiB0byB0aGUgbmV4dCBIVFRQIGhhbmRsZXIgaW4gdGhlIGNoYWluIGFuZCB0aGUgVmFsaWRhdG9yIHdpbGwgd2FpdCBmb3IgaXRzIHJlc3BvbnNlLgoqIEFmdGVyIGNhcHR1cmluZyB0aGUgcmVzcG9uc2UsIHRoZSBWYWxpZGF0b3Igd2lsbCB2YWxpZGF0ZSB0aGUgcmVzcG9uc2UgdG8gYmUgdmFsaWQuCiogSWYgbm8gZXJyb3JzIG9jY3VycmVkIGR1cmluZyB0aGUgdmFsaWRhdGlvbiwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgcmV0dXJuZWQuCgojIyBVc2FnZQoKVGhlIHNpbXBsZXN0IHdheSB0byB1c2UgdGhlIE9wZW5BUEkgVmFsaWRhdG9yIEhUVFAgaGFuZGxlciBpcyBieSB1c2luZyBbeGNhZGR5XShodHRwczovL2dpdGh1Yi5jb20vY2FkZHlzZXJ2ZXIveGNhZGR5KToKCmBgYGJhc2gKJCB4Y2FkZHkgYnVpbGQgdjIuMS4xIC0td2l0aCBnaXRodWIuY29tL2hzbGF0bWFuL2NhZGR5LW9wZW5hcGktdmFsaWRhdG9yCmBgYAoKQWx0ZXJuYXRpdmVseSwgdGhlIEhUVFAgaGFuZGxlciBjYW4gYmUgaW5jbHVkZWQgYXMgYSBDYWRkeSBtb2R1bGUgYXMgZm9sbG93czoKCmBgYGdvbGFuZwppbXBvcnQgKAoJXyAiZ2l0aHViLmNvbS9oc2xhdG1hbi9jYWRkeS1vcGVuYXBpLXZhbGlkYXRvciIKKQpgYGAKCkNvbmZpZ3VyZSB0aGUgT3BlbkFQSSBWYWxpZGF0b3IgaGFuZGxlciBhcyBvbmUgb2YgdGhlIGhhbmRsZXJzIHRvIGJlIGV4ZWN1dGVkIGJ5IENhZGR5IChpbiBbSlNPTiBjb25maWddKGh0dHBzOi8vY2FkZHlzZXJ2ZXIuY29tL2RvY3MvanNvbi8pIGZvcm1hdCk6CgpgYGBqc29uCiAgICAuLi4KICAgICAgICAiaGFuZGxlIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaGFuZGxlciI6ICJvcGVuYXBpX3ZhbGlkYXRvciIsCiAgICAgICAgICAgICAgICAiZmlsZXBhdGgiOiAiZXhhbXBsZXMvcGV0c3RvcmUueWFtbCIsCiAgICAgICAgICAgICAgICAidmFsaWRhdGVfcm91dGVzIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJ2YWxpZGF0ZV9yZXF1ZXN0cyI6IHRydWUsCiAgICAgICAgICAgICAgICAidmFsaWRhdGVfcmVzcG9uc2VzIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJ2YWxpZGF0ZV9zZXJ2ZXJzIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJ2YWxpZGF0ZV9zZWN1cml0eSI6IHRydWUsCiAgICAgICAgICAgICAgICAicGF0aF9wcmVmaXhfdG9fYmVfdHJpbW1lZCI6ICIiLAogICAgICAgICAgICAgICAgImFkZGl0aW9uYWxfc2VydmVycyI6IFsiIl0sCiAgICAgICAgICAgICAgICAiZW5mb3JjZSI6IHRydWUsCiAgICAgICAgICAgICAgICAibG9nIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgXQogICAgLi4uCmBgYAoKVGhlIE9wZW5BUEkgVmFsaWRhdG9yIGhhbmRsZXIgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgYW4gYWN0dWFsIEFQSSBpcyBjYWxsZWQuClRoZSBjb25maWd1cmF0aW9uIHNob3duIGFib3ZlIHNob3dzIHRoZSBkZWZhdWx0IHNldHRpbmdzLgpUaGUgYGZpbGVwYXRoYCBjb25maWd1cmF0aW9uIGlzIHJlcXVpcmVkOyB3aXRob3V0IGl0LCBvciB3aGVuIHBvaW50aW5nIHRvIGEgbm9uLWV4aXN0aW5nIGZpbGUsIHRoZSBtb2R1bGUgd29uJ3QgYmUgbG9hZGVkLgoKIyMgRXhhbXBsZQoKQW4gZXhhbXBsZSBvZiB0aGUgT3BlbkFQSSBWYWxpZGF0b3J5IEhUVFAgaGFuZGxlciBpbiB1c2UgY2FuIGJlIGZvdW5kIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vaHNsYXRtYW4vY2FkZHktb3BlbmFwaS12YWxpZGF0b3ItZXhhbXBsZSkuCgojIyBOb3RlcwoKVGhpcyBwcm9qZWN0IGlzIGN1cnJlbnRseSBhIHNtYWxsIFBPQyB3aXRoIHRoZSBpbnRlbnRpb24gdG8gZ3JvdyBpdCBhbG9uZyB3aXRoIG15IG90aGVyIHByb2plY3RzIHVzaW5nIEdvLCBPcGVuQVBJIGFuZCBDYWRkeS4KSSBvbmx5IHJlY2VudGx5IHN0YXJ0ZWQgdXNpbmcgQ2FkZHksIHNvIHRoZXJlIG1heSBiZSBzb21lIHJvdWdoIGVkZ2VzIHRvIGlyb24gb3V0IHdoZW4gbW9yZSB1c2UgY2FzZXMgcHJlc2VudCB0aGVtc2VsdmVzLgoKIyMgVE9ETwoKQSBzbWFsbCBhbmQgaW5jb21wbGV0ZSBsaXN0IG9mIHBvdGVudGlhbCB0aGluZ3MgdG8gaW1wbGVtZW50LCBpbXByb3ZlIGFuZCB0aGluayBhYm91dDoKCiogQWRkIG1vcmUgdGVzdHMgZm9yIHRoZSBPcGVuQVBJIFZhbGlkYXRvciBmdW5jdGlvbmFsaXR5IGFuZCBjb25maWd1cmF0aW9uLgoqIEltcHJvdmUgQ2FkZHlmaWxlIGhhbmRsaW5nIChlLmcuIGFkZCBtb3JlIHN1YmRpcmVjdGl2ZXMpLgoqIEFkZCBhbiBleGFtcGxlIHRoYXQgdXNlcyBhbiBIVFRQIHByb3h5L2ZjZ2kgY29uZmlndXJhdGlvbi4KKiBMb29rIGludG8gd2F5cyB0byBzcGVjaWZ5IHRoZSBlcnJvciBuaWNlbHksIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIGl0IChlLmcuIHJldHVybiBlcnJvciBtZXNzYWdlKHMpIGluIHNwZWNpZmljIGZvcm1hdCkgYW5kL29yIGludGVncmF0ZSBwcm9wZXJseSB3aXRoIGhvdyBDYWRkeSBoYW5kbGVycyBlcnJvcnMuCiogTG9vayBpbnRvIGlmIChhbmQgaG93KSB0aGUgVmFsaWRhdG9yIGNhbiBiZSB1c2VkIG91dHNpZGUgb2YgQ2FkZHkgYXMgYW4gYWx0ZXJuYXRpdmUgKGkuZS4gYSBtb3JlIGdlbmVyaWMgbWlkZGxld2FyZSkuCg==
    description: >-
      A Caddy HTTP handler for validating requests and responses against an
      OpenAPI specification
    created: "2020-08-09T15:02:31Z"
    updated: "2021-07-22T10:38:11Z"
    language: Go
    archived: false
    stars: 5
    watchers: 5
    forks: 0
    owner: hslatman
    logo: https://avatars.githubusercontent.com/u/1219780?v=4
    license: Apache-2.0
    repoEtag: '"4a13d435739b55c8e2f7c8f944ad8896ca045ec91860a2aa04bce8efb2cffb43"'
    repoLastModified: Thu, 22 Jul 2021 10:38:11 GMT
    readmeEtag: '"148806c041efb181af5dfdf0cc3f2af2b286c3220d58bad223b52c9c4b2b0a69"'
    readmeLastModified: Sun, 18 Oct 2020 19:07:52 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/googee/openapi-builder
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuLWFwaQoKd29ya2luZyBpbiBwcm9ncmVzcwoKIyMgUHJvamVjdCBzZXR1cApgYGAKbnBtIGluc3RhbGwKYGBgCgojIyMgQ29tcGlsZXMgYW5kIGhvdC1yZWxvYWRzIGZvciBkZXZlbG9wbWVudApgYGAKbnBtIHJ1biBzZXJ2ZQpgYGAKCiMjIyBDb21waWxlcyBhbmQgbWluaWZpZXMgZm9yIHByb2R1Y3Rpb24KYGBgCm5wbSBydW4gYnVpbGQKYGBgCgojIyMgTGludHMgYW5kIGZpeGVzIGZpbGVzCmBgYApucG0gcnVuIGxpbnQKYGBgCgojIyMgQ3VzdG9taXplIGNvbmZpZ3VyYXRpb24KU2VlIFtDb25maWd1cmF0aW9uIFJlZmVyZW5jZV0oaHR0cHM6Ly9jbGkudnVlanMub3JnL2NvbmZpZy8pLgo=
    description: ":herb: OpenAPI GUI Builder"
    created: "2020-05-15T01:38:24Z"
    updated: "2022-01-04T00:20:06Z"
    language: TypeScript
    archived: false
    stars: 5
    watchers: 5
    forks: 2
    owner: GooGee
    logo: https://avatars.githubusercontent.com/u/13238516?v=4
    repoEtag: '"126a5d2f6555389ffc0a6674cdafa7c9ffb6baacb75f108bce1b582173bc49b2"'
    repoLastModified: Tue, 11 Jan 2022 00:28:29 GMT
    readmeEtag: '"91fbc935cedc66312b78fe57edb1976d88c8ab09e40ae82f1cb3910dc80488a5"'
    readmeLastModified: Wed, 12 Jan 2022 09:12:52 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Testing
- source: openapi3 tags
  repository: https://github.com/buzzingben/springboot-swagger-rest-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTYW1wbGUgU3ByaW5nIEJvb3QgKDIuMy4yKSBSRVNUZnVsIEFQSSB3aXRoIFN3YWdnZXIgKE9wZW5BUEkgMykKCldoaWxlIHNlYXJjaGluZyB0aHJvdWdoIEdpdEh1YiBmb3Igc29tZSBib2lsZXJwbGF0ZSBjb2RlIG9uIGhvdyB0byBzZXR1cCBhIFNwcmluZyBCb290IHByb2plY3Qgd2l0aCBTd2FnZ2VyLCBJIGZvdW5kIGl0IHF1aXRlIGRpZmZpY3VsdCB0byBmaW5kIGEgd29ya2luZyBleGFtcGxlIHdpdGggYSBtb3JlIHJlY2VudCB2ZXJzaW9uIG9mIFNwcmluZyBCb290IGFuZCBKYXZhIChpLmUuIDE0KS4gQW55d2F5cywgSSB0aG91Z2h0IEnigJlkIGNyZWF0ZSBteSBvd24gYW5kIHNoYXJlIHdpdGggZXZlcnlvbmUuIFRoaXMgaXMgZm9yIGFueW9uZSB0aGF0IG5lZWRzIHNvbWUgcXVpY2sgYm9pbGVycGxhdGUgY29kZSB0byBzZXR1cCB0aGVpciBuZXcgQVBJIHByb2plY3QuCgojIyBXaGF0IFlvdSBOZWVkCgoqIEphdmEgMTQKKiBNYXZlbiAzLjYuMCsKCiMjIEJ1aWxkIGFuZCBSdW4gdGhlIFNhbXBsZQoKWW91IGNhbiBpbXBvcnQgdGhlIGNvZGUgc3RyYWlnaHQgaW50byB5b3VyIHByZWZlcnJlZCBJREUgb3IgcnVuIHRoZSBzYW1wbGUgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kIChpbiB0aGUgcm9vdCBwcm9qZWN0IGZvbGRlcikuCgpgYGB6c2gKJCAgbXZuIHNwcmluZy1ib290OnJ1bgpgYGAKQWZ0ZXIgdGhlIGFwcGxpY2F0aW9uIHJ1bnMsIG5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcwMDEvc3dhZ2dlci11aS9pbmRleC5odG1sP2NvbmZpZ1VybD0vYXBpLWRvY3Mvc3dhZ2dlci1jb25maWdgIGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gYWNjZXNzIHRoZSBTd2FnZ2VyIFVJIHBvcnRhbC4K
    readmeEtag: '"dacd0af88a009513e2a018484d5dffaaa60e7a8225eebcc176d2b6e3c7bad92b"'
    readmeLastModified: Tue, 28 Jul 2020 00:13:07 GMT
    description: >-
      A sample RESTful API using Spring Boot (2.3.2) and Java 14 with Swagger
      enabled.
    created: "2020-07-21T23:28:43Z"
    updated: "2022-03-15T16:04:25Z"
    language: Java
    archived: false
    stars: 5
    watchers: 5
    forks: 4
    owner: buzzingben
    logo: https://avatars.githubusercontent.com/u/41641688?v=4
    license: MIT
    repoEtag: '"dd642298f1344746bb2e09e9111a68ea7f5bdeeab7f6b4a8c9030324b216cf96"'
    repoLastModified: Tue, 15 Mar 2022 16:04:25 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/zchee/protoc-gen-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBwcm90b2MtZ2VuLW9wZW5hcGkKClRoaXMgcGFja2FnZSBjb3B5IGZyb20gW2lzdGlvLmlvL3Rvb2xzL29wZW5hcGkvcHJvdG9jLWdlbi1vcGVuYXBpQDU5M2E0MWM3NmM1Y10oaHR0cHM6Ly9naXRodWIuY29tL2lzdGlvL3Rvb2xzL3RyZWUvNTkzYTQxYzc2YzVjODRhNGNkNTFhNGFiMGMzNDU2MzBjNWVkMzBiYS9vcGVuYXBpL3Byb3RvYy1nZW4tb3BlbmFwaSkuCgojIyBXaGF0J3MgdGhpcyBmb3I/CgpgcHJvdG9jLWdlbi1vcGVuYXBpYCBpcyBhIHBsdWdpbiBmb3IgdGhlIEdvb2dsZSBwcm90b2NvbCBidWZmZXIgY29tcGlsZXIgdG8gZ2VuZXJhdGUKb3BlbkFQSSBWMyBzcGVjIGZvciBhbnkgZ2l2ZW4gaW5wdXQgcHJvdG9idWYuIEl0IHJ1bnMgYXMgYSBgcHJvdG9jLWdlbi1gIGJpbmFyeSB0aGF0IHRoZQpwcm90b2J1ZiBjb21waWxlciBpbmZlcnMgZnJvbSB0aGUgYG9wZW5hcGlfb3V0YCBmbGFnLgoKIyMgQnVpbGQgYHByb3RvYy1nZW4tb3BlbmFwaWAKCmBwcm90b2MtZ2VuLW9wZW5hcGlgIGlzIHdyaXR0ZW4gaW4gR28sIHNvIGVuc3VyZSB0aGF0IGlzIGluc3RhbGxlZCBvbiB5b3VyIHN5c3RlbS4gWW91CmNhbiBmb2xsb3cgdGhlIGluc3RydWN0aW9ucyBvbiB0aGUgW2dvbGFuZyB3ZWJzaXRlXShodHRwczovL2dvbGFuZy5vcmcvZG9jL2luc3RhbGwpIG9yCm9uIERlYmlhbiBvciBVYnVudHUsIHlvdSBjYW4gaW5zdGFsbCBpdCBmcm9tIHRoZSBwYWNrYWdlIG1hbmFnZXI6CgpgYGBiYXNoCnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGdvbGFuZwpgYGAKClRvIGJ1aWxkLCBmaXJzdCBlbnN1cmUgeW91IGhhdmUgdGhlIHByb3RvY29sIGNvbXBpbGVyIChwcm90b2MpOgoKYGBgYmFzaApnbyBnZXQgZ2l0aHViLmNvbS9nb2xhbmcvcHJvdG9idWYvcHJvdG8KYGBgClRvIGJ1aWxkLCBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kIGZyb20gdGhpcyBwcm9qZWN0IGRpcmVjdG9yeToKCmBgYGJhc2gKZ28gYnVpbGQKYGBgCgpUaGVuIGVuc3VyZSB0aGUgcmVzdWx0aW5nIGBwcm90b2MtZ2VuLW9wZW5hcGlgIGJpbmFyeSBpcyBpbiB5b3VyIGBQQVRIYC4gQSByZWNvbW1lbmRlZCBsb2NhdGlvbgppcyBgJEhPTUUvYmluYDoKCmBgYGJhc2gKY3AgcHJvdG9jLWdlbi1vcGVuYXBpICRIT01FL2JpbgpgYGAKClNpbmNlIHRoZSBmb2xsb3dpbmcgaXMgb2Z0ZW4gaW4geW91ciBgJEhPTUUvLmJhc2hyY2AgZmlsZToKCmBgYGJhc2gKZXhwb3J0IFBBVEg9JEhPTUUvYmluOiRQQVRICmBgYAoKIyMgVXNpbmcgcHJvdG9jLWdlbi1vcGVuYXBpCgotLS0KKipUSVAqKgoKVGhlIC1JIG9wdGlvbiBpbiBwcm90b2MgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gc3BlY2lmeSBwcm90byBwYXRocyBmb3IgaW1wb3J0cy4KCi0tLQoKVGhlbiB0byBnZW5lcmF0ZSB0aGUgT3BlbkFQSSBzcGVjIG9mIHRoZSBwcm90b2J1ZiBkZWZpbmVkIGJ5IGZpbGUucHJvdG8sIHJ1bgoKYGBgYmFzaApwcm90b2MgLS1vcGVuYXBpX291dD1vdXRwdXRfZGlyZWN0b3J5IGlucHV0X2RpcmVjdG9yeS9maWxlLnByb3RvCmBgYAoKV2l0aCB0aGF0IGlucHV0LCB0aGUgb3V0cHV0IHdpbGwgYmUgd3JpdHRlbiB0bwoKCW91dHB1dF9kaXJlY3RvcnkvZmlsZS5qc29uCgpPdGhlciBzdXBwb3J0ZWQgb3B0aW9ucyBhcmU6CiogICBgcGVyX2ZpbGVgCiAgICAqICAgd2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgb3V0cHV0IGlzIHBlciBwcm90byBmaWxlIGluc3RlYWQgb2YgcGVyIHBhY2thZ2UuCiogICBgc2luZ2xlX2ZpbGVgCiAgICAqICAgd2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgb3V0cHV0IGlzIGEgc2luZ2xlIGZpbGUgb2YgYWxsIHRoZSBpbnB1dCBwcm90b3Mgc3BlY2lmaWVkLgoqICAgYHVzZV9yZWZgCiAgICAqICAgd2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgb3V0cHV0IHVzZXMgdGhlIGAkcmVmYCBmaWVsZCBpbiBPcGVuQVBJIHNwZWMgdG8gcmVmZXJlbmNlIG90aGVyIHNjaGVtYXMuCiogICBgeWFtbGAKICAgICogICB3aGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBvdXRwdXQgaXMgaW4geWFtbCBmaWxlLgo=
    readmeEtag: '"1d28e7842f9e5a5b07724ce987a54906cfd64d5d0d9fd3cee4d7d75382875bb6"'
    readmeLastModified: Sat, 07 Sep 2019 17:43:11 GMT
    description: >-
      protoc-gen-openapi is a plugin for the Google protocol buffer compiler to
      generate openAPI V3 spec for any given input protobuf.
    created: "2019-09-07T17:43:22Z"
    updated: "2022-04-28T03:54:52Z"
    language: Go
    archived: false
    stars: 6
    watchers: 6
    forks: 3
    owner: zchee
    logo: https://avatars.githubusercontent.com/u/6366270?v=4
    license: Apache-2.0
    repoEtag: '"db6d831bac0d150ec42dca196df7d01d68bcf6d57c6e14ca4d65425d40af206f"'
    repoLastModified: Thu, 28 Apr 2022 03:54:52 GMT
  foundInMaster: true
  category:
    - Converters
    - Parsers
- source: openapi3 tags
  repository: https://github.com/elazar/phanua
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: Builds Cycle ORM schemas from OpenAPI 3 component schemas
    created: "2021-07-11T02:35:08Z"
    updated: "2021-08-01T00:11:02Z"
    language: PHP
    archived: false
    stars: 5
    watchers: 5
    forks: 0
    owner: elazar
    logo: https://avatars.githubusercontent.com/u/15487?v=4
    license: MIT
    repoEtag: '"e5e9f71f0627e5f8a690993994333712433db0a694029c9b5493342991cc2489"'
    repoLastModified: Sun, 01 Aug 2021 00:11:02 GMT
    readmeEtag: '"ac01c1bf639e769b29e6a6b1ac71fd9b15205ba46e0c1c8b4061b78a20e82e9f"'
    readmeLastModified: Sun, 01 Aug 2021 00:10:52 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/klebert-engineering/zswag
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"4072ccfd53b6baccba61a3306385acdad537807cdacc03678a2540f4492a5109"'
    readmeLastModified: Tue, 15 Mar 2022 15:59:13 GMT
    description: Access/Serve zserio services via REST/OpenAPI 🌍.
    created: "2020-04-06T11:07:06Z"
    updated: "2022-02-22T13:26:13Z"
    language: C++
    archived: false
    stars: 5
    watchers: 5
    forks: 3
    owner: Klebert-Engineering
    logo: https://avatars.githubusercontent.com/u/6337921?v=4
    license: BSD-3-Clause
    repoEtag: '"af35eacfe03866609d5e7b444baeb2bab33d877d63d64e89a3fdfc79d1470196"'
    repoLastModified: Tue, 22 Feb 2022 13:26:13 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/numberfour/openapi-scala
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      An opinionated library and SBT plugin for generating Scala code from
      OpenAPI 3.
    created: "2020-04-29T15:08:59Z"
    updated: "2021-10-12T11:07:51Z"
    language: Scala
    archived: false
    stars: 6
    watchers: 6
    forks: 4
    owner: NumberFour
    logo: https://avatars.githubusercontent.com/u/319804?v=4
    license: MIT
    repoEtag: '"ab9703927f6856b5c07520475d4cbe9fbb0a11d13343bb2635d47a0344e28991"'
    repoLastModified: Mon, 24 Jan 2022 15:34:46 GMT
    readmeEtag: '"cd1a4bbefcb0dc04efa5daa755b3bca6f814e639c1ffbc6bce08811da624dc84"'
    readmeLastModified: Tue, 18 Aug 2020 13:29:31 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/vaclavnovotny/nswag.examples
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IVtCdWlsZCBhbmQgUHVibGlzaF0oaHR0cHM6Ly9naXRodWIuY29tL3ZhY2xhdm5vdm90bnkvTlN3YWcuRXhhbXBsZXMvd29ya2Zsb3dzL0J1aWxkJTIwYW5kJTIwUHVibGlzaC9iYWRnZS5zdmcpICFbTnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9OU3dhZy5FeGFtcGxlcz9jb2xvcj1ibHVlKQojIFJlc3BvbnNlIGFuZCBSZXF1ZXN0IEJvZHkgRXhhbXBsZXMgZm9yIE5Td2FnClRoaXMgbGlicmFyeSBhbGxvd3MgeW91IHRvIHByb2dyYW1tYXRpY2FsbHkgZGVmaW5lIHN3YWdnZXIgZXhhbXBsZXMgaW4geW91ciBOU1dhZyBhcHBsaWNhdGlvbi4gRXhhbXBsZSBkaXNjb3Zlcnkgb2NjdXJzIGF0IHN0YXJ0IG9mIGFwcGxpY2F0aW9uIGFuZCB1c2VzIHJlZmxlY3Rpb24uIAoKIyMgSW5zdGFsbCBwYWNrYWdlCgpgYGBjc2hhcnAKSW5zdGFsbC1QYWNrYWdlIE5Td2FnLkV4YW1wbGVzCmBgYAoKIyMgU2V0dXAgU3RhcnR1cC5jcwoKQWRkIHNlcnZpY2VzIG5lZWRlZCBmb3IgZXhhbXBsZSBkZWZpbml0aW9uIHVzaW5nIGBBZGRFeGFtcGxlUHJvdmlkZXJzKClgIGFuZCBwcm92aWRlIGFzc2VtYmxpZXMgd2hlcmUgYXJlIHlvdXIgZXhhbXBsZXMgbG9jYXRlZC4KYGBgY3NoYXJwCnB1YmxpYyB2b2lkIENvbmZpZ3VyZVNlcnZpY2VzKElTZXJ2aWNlQ29sbGVjdGlvbiBzZXJ2aWNlcykKewogICAgc2VydmljZXMuQWRkQ29udHJvbGxlcnMoKTsKCiAgICBzZXJ2aWNlcy5BZGRFeGFtcGxlUHJvdmlkZXJzKHR5cGVvZihDaXR5RXhhbXBsZSkuQXNzZW1ibHkpOwogICAgc2VydmljZXMuQWRkT3BlbkFwaURvY3VtZW50KChzZXR0aW5ncywgcHJvdmlkZXIpID0+CiAgICB7CiAgICAgICAgc2V0dGluZ3MuQWRkRXhhbXBsZXMocHJvdmlkZXIpOwogICAgfSk7Cn0KYGBgCgojIyBEZWZpbmUgZXhhbXBsZXMgZm9yIHlvdXIgdHlwZXMKCkNyZWF0ZSBjbGFzcyBhbmQgaW1wbGVtZW50IGludGVyZmFjZSBJRXhhbXBsZVByb3ZpZGVyPFQ+IHdoZXJlIFQgaXMgdGhlIHR5cGUgeW91IHdhbnQgdG8gZGVmaW5lIGV4YW1wbGUgZm9yLgpgYGBjc2hhcnAKcHVibGljIGNsYXNzIENpdHlFeGFtcGxlIDogSUV4YW1wbGVQcm92aWRlcjxDaXR5Pgp7CiAgICBwdWJsaWMgQ2l0eSBHZXRFeGFtcGxlKCkKICAgIHsKICAgICAgICByZXR1cm4gbmV3IENpdHkoKQogICAgICAgIHsKICAgICAgICAgICAgSWQgPSA1LAogICAgICAgICAgICBOYW1lID0gIkJybm8iLAogICAgICAgICAgICBQZW9wbGUgPSBuZXcgTGlzdDxQZXJzb24+KCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmV3IFBlcnNvbigpIHtJZCA9IDEsIEZpcnN0TmFtZSA9ICJIZW5yeSIsIExhc3ROYW1lID0gIkNhdmlsbCJ9LAogICAgICAgICAgICAgICAgbmV3IFBlcnNvbigpIHtJZCA9IDIsIEZpcnN0TmFtZSA9ICJKb2huIiwgTGFzdE5hbWUgPSAiRG9lIn0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9Cn0KYGBgCgojIyBVc2UgZGVwZW5kZW5jeSBpbmplY3Rpb24KCllvdSBjYW4gYWxzbyB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb24gaW4gY29uc3RydWN0b3Igb2YgeW91ciBleGFtcGxlIHByb3ZpZGVyIGNsYXNzLgoKQ29uc3RydWN0b3IgYW5kIGBHZXRFeGFtcGxlYCBtZXRob2QgZ2V0cyBjYWxsZWQgd2hlbiBvcGVyYXRpb24gcHJvY2Vzc29ycyBhcmUgZXhlY3V0ZWQgLSB3aGVuIHN3YWdnZXIgc3BlY2lmaWNhdGlvbiBpcyBiZWluZyBnZW5lcmF0ZWQgd2hpY2ggaXMgZHVyaW5nIGZpcnN0IHJlcXVlc3Qgb24gc3dhZ2dlci4KYGBgY3NoYXJwCnB1YmxpYyBjbGFzcyBQZXJzb25FeGFtcGxlIDogSUV4YW1wbGVQcm92aWRlcjxQZXJzb24+CnsKICAgIHByaXZhdGUgcmVhZG9ubHkgSVBlcnNvbk5hbWVHZW5lcmF0b3IgX25hbWVHZW5lcmF0b3I7CiAgICBwcml2YXRlIHJlYWRvbmx5IFJhbmRvbSBfcmFuZG9tOwoKICAgIHB1YmxpYyBQZXJzb25FeGFtcGxlKElQZXJzb25OYW1lR2VuZXJhdG9yIG5hbWVHZW5lcmF0b3IpCiAgICB7CiAgICAgICAgX25hbWVHZW5lcmF0b3IgPSBuYW1lR2VuZXJhdG9yOwogICAgICAgIF9yYW5kb20gPSBuZXcgUmFuZG9tKCk7IAogICAgfQoKICAgIHB1YmxpYyBQZXJzb24gR2V0RXhhbXBsZSgpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBQZXJzb24oKQogICAgICAgIHsKICAgICAgICAgICAgSWQgPSBfcmFuZG9tLk5leHQoMSwgMTAwKSwKICAgICAgICAgICAgRmlyc3ROYW1lID0gX25hbWVHZW5lcmF0b3IuR2VuZXJhdGVSYW5kb21GaXJzdE5hbWUoKSwKICAgICAgICAgICAgTGFzdE5hbWUgPSBfbmFtZUdlbmVyYXRvci5HZW5lcmF0ZVJhbmRvbUxhc3ROYW1lKCkKICAgICAgICB9OwogICAgfQp9CmBgYAoKIyMgUmVxdWVzdCBCb2R5IFBhcmFtZXRlcnMKCkZvciByZXF1ZXN0IGJvZHkgcGFyYW1ldGVycyB0aGVyZSBpcyBub3RoaW5nIHlvdSBuZWVkIHRvIHdvcnJ5IGFib3V0LCBqdXN0IG1hcmsgeW91ciBwYXJhbWV0ZXIgYFtGcm9tQm9keV1gLgpgYGBjc2hhcnAKW0h0dHBQb3N0XQpwdWJsaWMgYXN5bmMgVGFzazxJQWN0aW9uUmVzdWx0PiBDcmVhdGVQZXJzb24oW0Zyb21Cb2R5LCBCaW5kUmVxdWlyZWRdIFBlcnNvbiBwZXJzb24pCnsKICAgIC8vIGNyZWF0ZSBwZXJzb24gbG9naWMKICAgIHJldHVybiBPaygpOwp9CmBgYApSZXN1bHQgaW4gc3dhZ2dlcjoKIVtJbWFnZSBvZiByZXF1ZXN0IGJvZHldKGh0dHBzOi8vZ2l0aHViLmNvbS92YWNsYXZub3ZvdG55L2ltYWdlcy9ibG9iL21haW4vcmVxdWVzdEV4YW1wbGUuSlBHKQoKIyMgUmVzcG9uc2UgQm9keQoKRm9yIHJlc3BvbnNlIGJvZHkgdHlwZXMgeW91IG5lZWQgdG8gZGVjb3JhdGUgeW91ciBtZXRob2Qgd2l0aCBgW1Byb2R1Y2VzUmVzcG9uc2VUeXBlXWAKYGBgY3NoYXJwCltIdHRwR2V0KCJ7aWR9IildCltQcm9kdWNlc1Jlc3BvbnNlVHlwZShTdGF0dXNDb2Rlcy5TdGF0dXMyMDBPSywgVHlwZSA9IHR5cGVvZihQZXJzb24pKV0KcHVibGljIGFzeW5jIFRhc2s8SUFjdGlvblJlc3VsdD4gR2V0UGVyc29uKFtGcm9tUm91dGVdaW50IGlkKQp7CiAgICByZXR1cm4gT2sobmV3IFBlcnNvbigpKTsKfQpgYGAKClJlc3VsdCBpbiBzd2FnZ2VyOgohW0ltYWdlIG9mIHJlcXVlc3QgYm9keV0oaHR0cHM6Ly9naXRodWIuY29tL3ZhY2xhdm5vdm90bnkvaW1hZ2VzL2Jsb2IvbWFpbi9yZXNwb25zZUV4YW1wbGVTaW5nbGUuSlBHKQoKIyBTdXBwb3J0CkkgcGVyc29uYWxseSB1c2UgdGhpcyBOdUdldCBpbiBteSBwcm9qZWN0cywgc28gSSB3aWxsIGtlZXAgdGhpcyByZXBvc2l0b3J5IHVwLXRvLWRhdGUuIEFueSBpZGVhcyBmb3IgZXh0ZW5kaW5nIGZ1bmN0aW9uYWxpdGllcyBhcmUgd2VsY29tZSwgc28gY3JlYXRlIGFuIGlzc3VlIHdpdGggcHJvcG9zYWwuIAoKIyMjIERpZCBJIHNhdmUgeW91IHNvbWUgaG91cnM/ClshW2tvLWZpXShodHRwczovL3d3dy5rby1maS5jb20vaW1nL2dpdGh1YmJ1dHRvbl9zbS5zdmcpXShodHRwczovL2tvLWZpLmNvbS9VN1U3MkcxQTIpCg==
    readmeEtag: '"159b1fdb7d7657ca18770d81ff1f36f5096e4e84fe8801652699378cb8e394ee"'
    readmeLastModified: Sat, 05 Mar 2022 11:39:12 GMT
    description: >-
      NSwag processor to programmatically define strongly-typed examples for
      response and request body parameters.
    created: "2020-10-12T16:48:05Z"
    updated: "2022-04-25T13:40:45Z"
    language: C#
    archived: false
    stars: 5
    watchers: 5
    forks: 3
    owner: vaclavnovotny
    logo: https://avatars.githubusercontent.com/u/17833494?v=4
    license: MIT
    repoEtag: '"1dde31ac64e6bc5a4a8ece0e3a725c41011eec252458d8aed5d5934b282678f4"'
    repoLastModified: Mon, 25 Apr 2022 13:40:45 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/muskratjs/muskrat
  v3: true
  repositoryMetadata:
    base64Readme: IyBtdXNrcmF0CgpSdW50aW1lIEFQSSBzY2hlbWEgZ2VuZXJhdGlvbgo=
    description: ":rat: Generate project metadata"
    created: "2018-05-29T19:55:40Z"
    updated: "2019-01-29T12:39:19Z"
    language: TypeScript
    archived: false
    stars: 3
    watchers: 3
    forks: 0
    owner: muskratjs
    logo: https://avatars.githubusercontent.com/u/41447837?v=4
    license: MIT
    repoEtag: '"d617833c6f3a759dd44ad115114eba97714e857ac9c1aeb73a983a091910e0b5"'
    repoLastModified: Tue, 29 Jan 2019 12:39:19 GMT
    readmeEtag: '"a1c4af9f5d0b649711081ed65e3d2f1f867f858cb13e7d2282f7c09f68e0cb6e"'
    readmeLastModified: Tue, 29 Jan 2019 12:39:17 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/jordan-chalupka/ouraring
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPdXJhIFJpbmcgT3BlbkFQSXYzIFNjaGVtYSBEZWZpbml0aW9uICsgR28gQ2xpZW50ClRoaXMgcmVwbyBjb250YWlucyBhbiBPcGVuQVBJdjMgc2NoZW1hIGRlZmluaXRpb24gZm9yIFtPdXJhUmluZ10oaHR0cHM6Ly9vdXJhcmluZy5jb20vKQoKT3VyYVJpbmcgQVBJIGRvY3VtZW50YXRpb24gaHR0cHM6Ly9jbG91ZC5vdXJhcmluZy5jb20vZG9jcy8KCiMjIEdlbmVyYXRpbmcgdGhlIGNsaWVudApDbGllbnQgZ2VuZXJhdGlvbiBpcyBkb25lIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWVwbWFwL29hcGktY29kZWdlbgoKVG8gcmVnZW5lcmF0ZSB0aGUgY2xpZW50LCBydW4gdGhlIGNvbW1hbmQKYGBgCm9hcGktY29kZWdlbiAtLXBhY2thZ2Ugb3VyYXJpbmcgb3VyYXJpbmdfb3BlbmFwaS55YW1sID4gb3VyYXJpbmcuZ2VuLmdvCmBgYAoKIyMgRXh0ZW5kaW5nIHRoZSBzY2hlbWEgZGVmaW5pdGlvbgpBdCB0aGlzIHRpbWUsIHRoZSBzY2hlbWEgZGVmaW5pdGlvbiBpcyBub3QgY29tcGxldGUuIAoKSWYgdGhlcmUgaXMgZGF0YSB3aGljaCB5b3Ugd291bGQgbGlrZSB0byBmZXRjaCBidXQgaXQgaXMgbm90IGF2YWlsYWJsZSwgY29uc2lkZXIgYWRkaW5nIGl0IHRvIHRoZSBzY2hlbWEgZGVmaW5pdGlvbgphbmQgcmVnZW5lcmF0aW5nIHRoZSBjbGllbnQuCgojIyBFeGFtcGxlIHVzYWdlCkdldCB5b3VyIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiBmcm9tIEF1cmFSaW5nCmh0dHBzOi8vY2xvdWQub3VyYXJpbmcuY29tL3BlcnNvbmFsLWFjY2Vzcy10b2tlbnMKCmBgYGJhc2gKZXhwb3J0IE9VUkFfQUNDRVNTX1RPS0VOPSJZT1VSX1BFUlNPTkFMX0FDQ0VTU19UT0tFTiIKZ28gcnVuIGV4YW1wbGUvbWFpbi5nbwpgYGAKClNob3VsZCBmZXRjaCB5b3VyIGFjdGl2aXR5IHNjb3JlIGZvciB0b2RheToKYGBgCkFjdGl2aXR5IFNjb3JlOiA4MQpgYGAK
    description: Go client + OpenAPI v3 spec for Oura-Ring
    created: "2021-12-18T21:20:08Z"
    updated: "2021-12-18T22:57:11Z"
    language: Go
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: jordan-chalupka
    logo: https://avatars.githubusercontent.com/u/9794216?v=4
    repoEtag: '"43e5459d9b7353f9a8d50b6fad14d50c645fb370a4ad05d94bb10c244dd75450"'
    repoLastModified: Sun, 23 Jan 2022 02:17:48 GMT
    readmeEtag: '"0a61491ba7de638e1957923fa5d322253a2bd402ec21fc9760bb0eca83e4aed7"'
    readmeLastModified: Sat, 18 Dec 2021 22:55:24 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/wfcd/api-spec
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBXYXJmcmFtZVN0YXQudXMgT3BlbkFQSSBTcGVjaWZpY2F0aW9uClshW0dpdEh1YiBwYWdlc10oaHR0cHM6Ly9naXRodWIuY29tL1dGQ0QvYXBpLXNwZWMvYWN0aW9ucy93b3JrZmxvd3MvZG9jcy55YW1sL2JhZGdlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9XRkNEL2FwaS1zcGVjL2FjdGlvbnMvd29ya2Zsb3dzL2RvY3MueWFtbCkKCiMjIExpbmtzCgotIFtSZWZlcmVuY2UgRG9jdW1lbnRhdGlvbiAoUmVEb2MpXShodHRwczovL2RvY3Mud2FyZnJhbWVzdGF0LnVzKQotIFtTd2FnZ2VyVUldKGh0dHBzOi8vZG9jcy53YXJmcmFtZXN0YXQudXMvc3dhZ2dlci11aS8pCi0gT3BlbkFQSSBSYXcgRmlsZXM6IFtKU09OXShodHRwczovL2RvY3Mud2FyZnJhbWVzdGF0LnVzL29wZW5hcGkuanNvbikgW1lBTUxdKGh0dHBzOi8vZG9jcy53YXJmcmFtZXN0YXQudXMvb3BlbmFwaS55YW1sKQoKKipXYXJuaW5nOioqIEFsbCBhYm92ZSBsaW5rcyBhcmUgdXBkYXRlZCBvbmx5IGFmdGVyIEFjdGlvbnMgZmluaXNoZXMgZGVwbG95bWVudAoKIyMgV29ya2luZyBvbiBzcGVjaWZpY2F0aW9uCiMjIyBJbnN0YWxsCgoxLiBJbnN0YWxsIFtOb2RlIEpTXShodHRwczovL25vZGVqcy5vcmcvKQoyLiBDbG9uZSByZXBvIGFuZCBydW4gYG5wbSBpbnN0YWxsYCBpbiB0aGUgcmVwbyByb290CgojIyMgVXNhZ2UKCiMjIyMgYG5wbSBzdGFydGAKU3RhcnRzIHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXIgb24gcG9ydCBbYDgwODBgXShodHRwOi8vbG9jYWxob3N0OjgwODApLgoKIyMjIyBgbnBtIHJ1biBidWlsZGAKQnVuZGxlcyB0aGUgc3BlYyBhbmQgcHJlcGFyZXMgd2ViX2RlcGxveSBmb2xkZXIgd2l0aCBzdGF0aWMgYXNzZXRzLgoKIyMjIyBgbnBtIHRlc3RgClZhbGlkYXRlcyB0aGUgc3BlYy4KCiMjIyMgYG5wbSBydW4gZ2gtcGFnZXNgCkRlcGxveXMgZG9jcyB0byBHaXRIdWIgUGFnZXMuIFlvdSBkb24ndCBuZWVkIHRvIHJ1biBpdCBtYW51YWxseSBpZiB5b3UgaGF2ZSBUcmF2aXMgQ0kgY29uZmlndXJlZC4K
    readmeEtag: '"ac346286d70fef00c63b25af73922656142151d04fb6b459985682313f8314b3"'
    readmeLastModified: Wed, 20 Apr 2022 02:04:39 GMT
    description: OpenAPI Specifications for WarframeStat.us API
    created: "2017-12-21T18:21:32Z"
    updated: "2022-03-09T07:21:10Z"
    language: CSS
    archived: false
    stars: 2
    watchers: 2
    forks: 3
    owner: WFCD
    logo: https://avatars.githubusercontent.com/u/24436369?v=4
    license: MIT
    repoEtag: '"b6c41722fc92dcdfda17351f483daa23d8bf4df35e19e275dc6eb3c6090183f8"'
    repoLastModified: Wed, 09 Mar 2022 07:21:10 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/funa1g/multi-file-oas-example
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBtdWx0aS1maWxlLW9hcy1leGFtcGxlCkFuIGV4YW1wbGUgb2YgbXVsdGkgZmlsZSBPcGVuQVBJIFNwZWNpZmljYXRpb24gMy4wCgojIyBVc2FnZQpJZiB5b3UgY2hlY2sgdGhpcyBleGFtcGxlLCB1c2UgZG9ja2VyIGVudmlyb25tZW50LgoKYGBgCmRvY2tlci1jb21wb3NlIHVwCmBgYAoKQW5kIHNob3cgYGxvY2FsaG9zdDo4MDgwYAoKIyMgRGV0YWlscwpUaGlzIHNhbXBsZSB1c2VzIGBtdWx0aS1maWxlLXN3YWdnZXJgLgoKIyBDb3B5cmlnaHQKVGhpcyBzb2Z0d2FyZSBpbmNsdWRlcyB0aGUgd29yayB0aGF0IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBBcGFjaGUgTGljZW5zZSAyLjAK
    description: An example of multi file OpenAPI Specification 3.0
    created: "2018-02-11T03:39:43Z"
    updated: "2020-06-01T06:34:45Z"
    language: HTML
    archived: false
    stars: 2
    watchers: 2
    forks: 2
    owner: funa1g
    logo: https://avatars.githubusercontent.com/u/9946679?v=4
    license: MIT
    repoEtag: '"1fdcadf7dac626a429673d935657647f18d01f1edc46de138d4cbd44e537ed89"'
    repoLastModified: Mon, 01 Jun 2020 06:34:45 GMT
    readmeEtag: '"98bd720e1dbcacbe6ff378186a94f1ebbb13f3423ab7774f1b15a83de8dd85cd"'
    readmeLastModified: Sun, 20 May 2018 09:18:01 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/quantumsheep/swagger-schema-extractor
  v3: true
  repositoryMetadata:
    base64Readme: >-
      WyFbbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L3N3YWdnZXItc2NoZW1hLWV4dHJhY3RvcildKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3N3YWdnZXItc2NoZW1hLWV4dHJhY3RvcikKCiMgU3dhZ2dlciBTY2hlbWEgRXh0cmFjdG9yCkV4dHJhY3QgT3BlbkFQSSBzY2hlbWFzIGludG8gVHlwZVNjcmlwdCB0eXBlcy4KCiMjIFVzYWdlCiMjIyBPcGVuQVBJIHYzCmBgYGJhc2gKbnB4IHN3YWdnZXItc2NoZW1hLWV4dHJhY3RvciBodHRwOi8vbG9jYWxob3N0OjMwMDAvb3BlbmFwaS5qc29uID4gdHlwZXMudHMKYGBgCgojIyMgT3BlbkFQSSB2MgpgYGBiYXNoCm5weCBzd2FnZ2VyLXNjaGVtYS1leHRyYWN0b3IgaHR0cDovL2xvY2FsaG9zdDozMDAwL3YyL3N3YWdnZXIuanNvbiA+IHR5cGVzLnRzCmBgYAo=
    description: Extract Swagger (OpenAPI) schemas into TypeScript types
    created: "2020-12-04T11:48:15Z"
    updated: "2020-12-14T23:59:30Z"
    language: JavaScript
    archived: false
    stars: 2
    watchers: 2
    forks: 0
    owner: quantumsheep
    logo: https://avatars.githubusercontent.com/u/7271496?v=4
    license: MIT
    repoEtag: '"978325bb7f45dcfe80e34887736b98ff0fec7b500f7747238df81f423e031c0d"'
    repoLastModified: Mon, 14 Dec 2020 23:59:30 GMT
    readmeEtag: '"760cbf02928210e1849198d52af591b37fd6954154ab02106f30d1fa150c3af0"'
    readmeLastModified: Mon, 07 Dec 2020 09:58:02 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/okaluzny/microservice-assistant
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgbWljcm9zZXJ2aWNlLWFzc2lzdGFudAoKVGhpcyBpcyBhIHNpbXBsZSBsb2dpc3RpYyBhcHBsaWNhdGlvbiBkZW1vbnN0cmF0aW5nIHNvbWUgY2FwYWJpbGl0aWVzIG9mIFNwcmluZyBCb290IGFzIGJhY2tlbmQgc2VydmljZSBjYXBhYmlsaXRpZXMgaW5jbHVkZToKKiBNaWNyb3NlcnZpY2VzIGFyY2hpdGVjdHVyZTsKKiBEYXRhYmFzZSBtaWdyYXRpb24gYW5kIHNjaGVtYSBjaGFuZ2UgbWFuYWdlbWVudCB1c2luZyBMaXF1aWJhc2U7CiogZXRjLgoKIyMgSG93IGl0IHdvcmtzOgoqKjEuIERvY2tlci4gRmlyc3QgeW91IG5lZWQgdG8gaW5zdGFsbCBkb2NrZXIqKgoqIERvd25sb2FkIERvY2tlciBbSGVyZV0oaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZG9ja2VyLWZvci13aW5kb3dzL2luc3RhbGwvKS4gSGludDogRW5hYmxlIEh5cGVyLVYgZmVhdHVyZSBvbiB3aW5kb3dzIGFuZCByZXN0YXJ0OwoqIFRoZW4gb3BlbiBwb3dlcnNoZWxsIGFuZCBjaGVjazoKYGBgYmFzaApkb2NrZXIgaW5mbwpgYGAKb3IsIGFuZCB5b3Ugc2VlIHZlcnNpb25zIGRvY2tlciAmIGRvY2tlciBjb21wb3NlCmBgYGJhc2gKZG9ja2VyIC12CmBgYApgYGBiYXNoCmRvY2tlci1jb21wb3NlIC12CmBgYAoKKioyLiBTcHJpbmcgYm9vdCBhcHAqKgoqIENsb25lIHRoZSByZXBvc2l0b3J5OgpgYGBiYXNoCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vT0thbHV6bnkvbWljcm9zZXJ2aWNlLWFzc2lzdGFudC5naXQKYGBgCiogQnVpbGQgdGhlIG1hdmVuIHByb2plY3Q6CmBgYGJhc2gKbXZuIGNsZWFuIGluc3RhbGwKYGBgCiogTm93IHJ1bjoKYGBgYmFzaApkb2NrZXItY29tcG9zZSB1cApgYGAKCkFwcGVuZGl4IEEuCgpBbGwgY29tbWFuZHMgc2hvdWxkIGJlIHJ1biBmcm9tIHByb2plY3Qgcm9vdCAod2hlcmUgZG9ja2VyLWNvbXBvc2UueW1sIGxvY2F0ZXMp
    description: Shown how to work Microservices architecture
    created: "2019-12-19T07:59:29Z"
    updated: "2021-08-19T17:15:24Z"
    language: Java
    archived: false
    stars: 2
    watchers: 2
    forks: 0
    owner: OKaluzny
    logo: https://avatars.githubusercontent.com/u/13517065?v=4
    repoEtag: '"6d07451feba2e6e56d5c0e8f3ca884f156ff7712ba591415f466d9debfcf2a6e"'
    repoLastModified: Thu, 19 Aug 2021 17:15:24 GMT
    readmeEtag: '"cf01399dea8d0d52b4b87cc6291c5a7918eeab4fe075019efdfee045c0d082dc"'
    readmeLastModified: Wed, 19 Feb 2020 16:14:48 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/elevup/mogen
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"6075a5df6ba596eadc147d72080ca5bb3f4072d2f4f36d696c0ce7e92fae9298"'
    readmeLastModified: Thu, 31 Mar 2022 08:47:39 GMT
    description: Converts Kotlin models to other languages
    created: "2022-02-04T13:36:46Z"
    updated: "2022-03-29T11:43:21Z"
    language: Kotlin
    archived: false
    stars: 2
    watchers: 2
    forks: 0
    owner: elevup
    logo: https://avatars.githubusercontent.com/u/79261866?v=4
    license: Apache-2.0
    repoEtag: '"e045d41712b381a2d9045991481316fb441eadf87efabd745b97e74fae37bf0e"'
    repoLastModified: Tue, 29 Mar 2022 11:43:21 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/manuzhang/akka-http-petstore
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBha2thLWh0dHAtcGV0c3RvcmUgWyFbQ29udGludW91cyBJbnRlZ3JhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21hbnV6aGFuZy9ha2thLWh0dHAtcGV0c3RvcmUvYWN0aW9ucy93b3JrZmxvd3MvY2kueW1sL2JhZGdlLnN2Zz9icmFuY2g9bWFpbildKGh0dHBzOi8vZ2l0aHViLmNvbS9tYW51emhhbmcvYWtrYS1odHRwLXBldHN0b3JlL2FjdGlvbnMvd29ya2Zsb3dzL2NpLnltbCkK
    description: >-
      An akka-http server which implements OpenAPI 3 Spec of
      https://petstore3.swagger.io.
    created: "2021-01-02T09:12:55Z"
    updated: "2021-12-27T04:09:26Z"
    language: Scala
    archived: false
    stars: 2
    watchers: 2
    forks: 1
    owner: manuzhang
    logo: https://avatars.githubusercontent.com/u/1191767?v=4
    license: Apache-2.0
    repoEtag: '"7faaa4c1def22b1ce44255473acb71bfa5d82bb5c93d69ae7e8feec8a8648acb"'
    repoLastModified: Mon, 27 Dec 2021 04:09:26 GMT
    readmeEtag: '"d45aa542de0c9a2547e047b389350c0978a93420a8c903ece587900eb508ac0c"'
    readmeLastModified: Sun, 06 Feb 2022 11:59:38 GMT
  foundInMaster: true
  category:
    - Server
    - Sdk
- source: openapi3 tags
  repository: https://github.com/phstudy/einvoice-api
  v3: true
  repositoryMetadata:
    description: 財政部電子發票應用 API 規格 - OpenAPI 3.0 格式
    created: "2018-02-21T08:00:03Z"
    updated: "2021-08-23T02:36:45Z"
    language: null
    archived: false
    stars: 2
    watchers: 2
    forks: 4
    owner: phstudy
    logo: https://avatars.githubusercontent.com/u/2286805?v=4
    license: MIT
    repoEtag: '"f9c1aeb43a7e5948dd55d663f772d152749f3e5ce5f7310d49b70b89244dd110"'
    repoLastModified: Mon, 23 Aug 2021 02:36:45 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/dernasherbrezon/vue-openapi-bootstrap
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgU2NyZWVuc2hvdHMKCiFbc2NyZWVuMV0oL2RvYy8xLnBuZz9yYXc9dHJ1ZSkKIVtzY3JlZW4yXSgvZG9jLzIucG5nP3Jhdz10cnVlKQoKIyMgVXNhZ2UKCmBgYGphdmFzY3JpcHQKPHRlbXBsYXRlPgogIDx2dWUtb3BlbmFwaS1ib290c3RyYXAgOm9wZW5hcGk9Im9wZW5hcGkiPjwvdnVlLW9wZW5hcGktYm9vdHN0cmFwPgo8L3RlbXBsYXRlPgoKPHNjcmlwdD4KaW1wb3J0IHZ1ZU9wZW5hcGlCb290c3RyYXAgZnJvbSAndnVlLW9wZW5hcGktYm9vdHN0cmFwL3NyYy92dWUtb3BlbmFwaS1ib290c3RyYXAnCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7dnVlT3BlbmFwaUJvb3RzdHJhcH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBvcGVuYXBpOiB7fQogICAgfQogIH0KfQo8L3NjcmlwdD4KYGBgCgojIyBCdWlsZCBTZXR1cAoKYGBgIGJhc2gKIyBpbnN0YWxsIGRlcGVuZGVuY2llcwpucG0gaW5zdGFsbAoKIyBidWlsZCBmb3IgcHJvZHVjdGlvbiB3aXRoIG1pbmlmaWNhdGlvbgpucG0gcnVuIGJ1aWxkCgpgYGAKCkZvciBhIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGhvdyB0aGluZ3Mgd29yaywgY2hlY2sgb3V0IHRoZSBbZ3VpZGVdKGh0dHA6Ly92dWVqcy10ZW1wbGF0ZXMuZ2l0aHViLmlvL3dlYnBhY2svKSBhbmQgW2RvY3MgZm9yIHZ1ZS1sb2FkZXJdKGh0dHA6Ly92dWVqcy5naXRodWIuaW8vdnVlLWxvYWRlcikuIAo=
    description: OpenAPI viewer component for VueJS
    created: "2019-11-17T19:00:16Z"
    updated: "2021-06-11T07:21:11Z"
    language: Vue
    archived: false
    stars: 2
    watchers: 2
    forks: 0
    owner: dernasherbrezon
    logo: https://avatars.githubusercontent.com/u/1614424?v=4
    license: Apache-2.0
    repoEtag: '"b7676064ce64a21d162cd855f4d7f3d61d63af437d55c8d0631f033ebabd1090"'
    repoLastModified: Fri, 11 Jun 2021 07:21:11 GMT
    readmeEtag: '"320bd101bba42cbac117e05359f4f5ef9b52dcd38fa2c84e60460cd622da0c43"'
    readmeLastModified: Fri, 11 Jun 2021 07:21:08 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/bayamsell/keycloak-phone-number
  v3: true
  repositoryMetadata:
    base64Readme: IyBMb2dpbiBCeSBQaG9uZU51bWJlcgo=
    description: Keycloak plugin for logins using phone number
    created: "2020-08-25T14:13:59Z"
    updated: "2021-10-26T05:59:23Z"
    language: Java
    archived: false
    stars: 2
    watchers: 2
    forks: 1
    owner: bayamsell
    logo: https://avatars.githubusercontent.com/u/70213654?v=4
    repoEtag: '"267cca179c813a5f28f85ea4eb90c2d5dd10d0e6e028b0daed7683236993212e"'
    repoLastModified: Tue, 26 Oct 2021 05:59:23 GMT
    readmeEtag: '"f6c134b11caa1c1c382e5ded7c3daa1e5c627eef3423deb1f960855fa1e3facd"'
    readmeLastModified: Wed, 20 Jan 2021 12:40:13 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/joaoduarte19/openapi4d
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQXBpNEQKKipPcGVuQXBpNEQqKiBpcyBhbiBbT3BlbkFQSSAzLjBdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFpbi92ZXJzaW9ucy8zLjAuMy5tZCkgZ2VuZXJhdG9yIGZvciBEZWxwaGkuCg==
    description: OpenAPI generator for Delphi
    created: "2021-07-08T18:24:09Z"
    updated: "2021-12-25T06:40:12Z"
    language: Pascal
    archived: false
    stars: 2
    watchers: 2
    forks: 1
    owner: joaoduarte19
    logo: https://avatars.githubusercontent.com/u/13373632?v=4
    license: Apache-2.0
    repoEtag: '"543d49cea116b42494d9e1aea4f85eb6f6f71a4f9765150509d90c738230c6b0"'
    repoLastModified: Sat, 25 Dec 2021 06:40:12 GMT
    readmeEtag: '"8477c399ffa09dda4fdb8f78178285340a1893b79eda4b8d76a8239ce2ede4ed"'
    readmeLastModified: Thu, 15 Jul 2021 22:31:21 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/louisaugustine/openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBVc2VyIFNlcnZpY2UNCkEgc2VydmljZSBmb3IgZmluZGluZyBhbGwgdXNlcnMsIGNyZWF0aW5nLCByZXRyaWV2aW5nLCB1cGRhdGluZywgYW5kIGRlbGV0aW5nIHVzZXJzLg0KDQpzd2FnZ2VyLXVpIHVybCA6IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kb2MuaHRtbA0KDQpVc2Ugb2YgdGVjaG5vbG9neTogU3ByaW5nYm9vdDIuMyArIFNwcmluZ2RvYy1vcGVuYXBpIDMgKyBKUEEgKyBIMiArIEp1bml0NA0KDQoiIyBvcGVuYXBpIiANCg0KIVtdKHNyYy9tYWluL3Jlc291cmNlcy9vcGVuYXBpLmdpZik=
    description: >-
      A service for finding all users, creating, retrieving, updating, and
      deleting users.
    created: "2021-09-26T00:21:46Z"
    updated: "2021-10-21T22:40:53Z"
    language: Java
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: LouisAugustine
    logo: https://avatars.githubusercontent.com/u/72653348?v=4
    repoEtag: '"9bd1e8637ea8835b8bfcea02bf1aaa7f93158dfae584216850877546b7ba95e1"'
    repoLastModified: Thu, 21 Oct 2021 22:40:53 GMT
    readmeEtag: '"dc89effc30a6f12f815ccf603c70d8f45dfaa7491a29e5ad002eb0385e4c18c6"'
    readmeLastModified: Tue, 28 Sep 2021 01:02:17 GMT
  foundInMaster: true
  category:
    - Testing
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/bhagyas/alfresco-swagger-gen
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBhbGZyZXNjby1zd2FnZ2VyLWdlbgpPcGVuQVBJIChTd2FnZ2VyKSBkZWZpbml0aW9uIGdlbmVyYXRvciBmb3IgQWxmcmVzY28gV2Vic2NyaXB0IEZpbGVzCgojIyBJbnN0YWxsYXRpb24KCiMjIyBWaWEgTlBNIApSdW4gYG5wbSBpbnN0YWxsIC1nIGFsZnJlc2NvLXN3YWdnZXItZ2VuYAoKT2ZmaWNpYWwgTlBNIFBhY2thZ2UgaXMgYXQgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWxmcmVzY28tc3dhZ2dlci1nZW4KCiMjIyBWaWEgQ2xvbmluZyAKQ2xvbmUgdGhlIHJlcG9zaXRvcnkgYW5kIHJ1biBgbnBtIGxpbmtgIGZyb20gdGhlIHByb2plY3Qgcm9vdC4KCiMjIFVzYWdlCgojIyMgR2VuZXJhdGluZyBPcGVuQVBJIChTd2FnZ2VyKSBEb2N1bWVudApSZWZlciB0byB0aGUgY29tbWFuZCBsaW5lIHN5bnRheCBiZWxvdy4KCmBgYAphbGZyZXNjby1zd2FnZ2VyLWdlbiAtLWhlYWRlciAuLi9teS1wcm9qZWN0L215LWhlYWRlci55YW1sIFwKICAgICAgICAgICAgICAgICAgICAgLS1kZXN0aW5hdGlvbiAuL215LXByb2plY3Qvc3dhZ2dlci1kZWZpbml0aW9ucy55YW1sIFwKICAgICAgICAgICAgICAgICAgICAgLS1zY2FuUGF0aCAuL215LXByb2plY3Qvc3JjICAKYGBgICAgICAgICAgICAgICAgICAgCgojIyMgUGFyYW1ldGVyIFJlZmVyZW5jZQp8IFBhcmFtZXRlciB8IERlc2NyaXB0aW9uIHwKfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS18CnwgaGVhZGVyICB8IFNwZWNpZnkgYSBjdXN0b20gaGVhZGVyIGZpbGUgdG8gYmUgdXNlZCBmb3IgT3BlbkFQSSAoU3dhZ2dlcikgZGVmaW5pdGlvbiBnZW5lcmF0aW9uIHwKfCBkZXN0aW5hdGlvbiB8IERlc3RpbmF0aW9uIHBhdGggKHRhcmdldCBmaWxlKSBmb3IgdGhlIGdlbmVyYXRlZCBBUEkgZGVmaW5pdGlvbiBmaWxlLiB8Cnwgc2NhblBhdGggfCBSb290IHBhdGggZm9yIHNjYW5uaW5nIGZvciBBbGZyZXNjbyB3ZWJzY3JpcHQgZGVzY3JpcHRvciBmaWxlcyB8CgoqIEFuIGV4YW1wbGUgaGVhZGVyIGZpbGUgaXMgZm91bmQgaW4gYC4vdGVtcGxhdGVzL2RlZmF1bHRfaGVhZGVyLnlhbWxgIHdpdGhpbiB0aGUgc291cmNlLgoKIyMjIFJ1bm5pbmcgU3dhZ2dlci1VSQoKYWxmcmVzY28tc3dhZ2dlci1nZW4gYWxsb3dzIHlvdSB0byBydW4gU3dhZ2dlci1VSSB3aXRoIHlvdXIgZ2VuZXJhdGVkIE9wZW5BUEkgZG9jdW1lbnQuIEl0IGNvcGllcyB0aGUgc3BlY2lmaWVkIE9wZW5BUEkgZG9jdW1lbnQgdG8gYSBjdXN0b20gZm9sZGVyIGFuZCBtb3VudHMgaXQgdG8gYSBkb2NrZXIgaW1hZ2UgcnVubmluZyBTd2FnZ2VyLVVJLgoKVGhlIGZvbGxvd2luZyBjb21tYW5kIHJ1bnMgdGhlIGJ1aWx0LWluIGBkb2NrZXItY29tcG9zZWAgZmlsZSBhbmQgb3BlbnMgdGhlIGJyb3dzZXIgc2hvd2luZyB0aGUgU3dhZ2dlci1VSS4KCmBgYAphbGZyZXNjby1zd2FnZ2VyLWdlbiB1aSAtLWRlc3RpbmF0aW9uIC4vbXktcHJvamVjdC9zd2FnZ2VyLWRlZmluaXRpb25zLnlhbWwgXAomJiBvcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6ODAKYGBgCgoKCiMjIE1hcHBpbmcKIyMjIEhvdyB0byBtYXAgIFJlc3BvbnNlIFNjaGVtYXMKQWRkIGA8eC1yZXNwb25zZS1zY2hlbWE+TXlSZXNwb25zZVNjaGVtYTwveC1yZXNwb25zZS1zY2hlbWE+YCB0byB5b3VyIHdlYnNjcmlwdCBkZXNjcmlwdG9yIGZpbGUuCgpgTXlSZXNwb25zZVNjaGVtYWAgY2FuIGJlIGRlZmluZWQgaW4geW91ciBoZWFkZXIgZmlsZS4KCiMjIEF1dGhvcgotIEJoYWd5YSBTaWx2YSAtIFtAYmhhZ3lhc10oaHR0cHM6Ly9saW5rZWRpbi5jb20vaW4vYmhhZ3lhcyk=
    description: OpenAPI (Swagger) definition generator for Alfresco Webscript Files
    created: "2019-08-19T13:30:53Z"
    updated: "2021-08-04T15:46:06Z"
    language: JavaScript
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: bhagyas
    logo: https://avatars.githubusercontent.com/u/750003?v=4
    repoEtag: '"128d50438c237b2c5d6189e560f35bbc4ef6455123a3bf495858ef1f5263eba9"'
    repoLastModified: Wed, 04 Aug 2021 15:46:06 GMT
    readmeEtag: '"324f7e25566217bb905d710322b252c92b9485daacb83772005326e14506048d"'
    readmeLastModified: Wed, 04 Aug 2021 15:46:03 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/essentialprogramming/spring-boot-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgU2FtcGxlIFNwcmluZyBCb290IFJFU1RmdWwgc2VydmljZSB1c2luZyBPcGVuQVBJIDMKCiMjIyBTdGVwIDEgLSBBZGRpbmcgT3BlbkFQSSB0byBvdXIgcHJvamVjdAoKRmlyc3QsIHdlIG5lZWQgdG8gYWRkIHRoZSBkZXBlbmRlbmN5IHRvIG91ciBwb20ueG1sOgpgYGAKPGRlcGVuZGVuY3k+CiAgICA8Z3JvdXBJZD5vcmcuc3ByaW5nZG9jPC9ncm91cElkPgogICAgPGFydGlmYWN0SWQ+c3ByaW5nZG9jLW9wZW5hcGktdWk8L2FydGlmYWN0SWQ+CiAgICA8dmVyc2lvbj4xLjUuMTA8L3ZlcnNpb24+CjwvZGVwZW5kZW5jeT4KYGBgCgpUaGVuIHdlIG5lZWQgdG8gYWRkIHRoZSBjb25maWd1cmF0aW9uIGNsYXNzIHRvIG91ciBwcm9qZWN0OgpgYGAKQENvbmZpZ3VyYXRpb24KcHVibGljIGNsYXNzIFN3YWdnZXJDb25maWcgewoKICAgIC8qCiAgICBVc2VyIEFQSQogICAgICovCiAgICBAQmVhbgogICAgcHVibGljIEdyb3VwZWRPcGVuQXBpIHVzZXJBcGkoKSB7CiAgICAgICAgZmluYWwgU3RyaW5nW10gcGFja2FnZXNUb1NjYW4gPSB7ImNvbS5jb250cm9sbGVyIn07CiAgICAgICAgcmV0dXJuIEdyb3VwZWRPcGVuQXBpCiAgICAgICAgICAgICAgICAuYnVpbGRlcigpCiAgICAgICAgICAgICAgICAuZ3JvdXAoIlVzZXIgQVBJIikKICAgICAgICAgICAgICAgIC5wYWNrYWdlc1RvU2NhbihwYWNrYWdlc1RvU2NhbikKICAgICAgICAgICAgICAgIC5wYXRoc1RvTWF0Y2goIi91c2Vycy8qKiIpCiAgICAgICAgICAgICAgICAuYWRkT3BlbkFwaUN1c3RvbWlzZXIoc3RhdHVzQXBpQ29zdHVtaXplcigpKQogICAgICAgICAgICAgICAgLmJ1aWxkKCk7CiAgICB9CgogICAgcHJpdmF0ZSBPcGVuQXBpQ3VzdG9taXNlciBzdGF0dXNBcGlDb3N0dW1pemVyKCkgewogICAgICAgIHJldHVybiBvcGVuQVBJIC0+IG9wZW5BUEkKICAgICAgICAgICAgICAgIC5pbmZvKG5ldyBJbmZvKCkKICAgICAgICAgICAgICAgICAgICAgICAgLnRpdGxlKCJTcHJpbmdib290ICYgT3BlbkFQSSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5kZXNjcmlwdGlvbigiVGhpcyBpcyBhIHNhbXBsZSBTcHJpbmcgQm9vdCBSRVNUZnVsIHNlcnZpY2UgdXNpbmcgT3BlbkFQSSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC52ZXJzaW9uKCIzLjAuMCIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5jb250YWN0KG5ldyBDb250YWN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmFtZSgiQXZhbmdhcmRlIFNvZnR3YXJlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXJsKCJodHRwczovL2F2YW5nYXJkZS1zb2Z0d2FyZS5jb20vIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW1haWwoIm1hcmtvcy5rb3NhQGF2YW5nYXJkZS1zb2Z0d2FyZS5jb20iKSkpOwogICAgfQoKICAgIEBCZWFuCiAgICBwdWJsaWMgT3BlbkFQSSBjdXN0b21PcGVuQVBJKCkgewogICAgICAgIHJldHVybiBuZXcgT3BlbkFQSSgpCiAgICAgICAgICAgICAgICAuY29tcG9uZW50cyhuZXcgQ29tcG9uZW50cygpKQogICAgICAgICAgICAgICAgLmluZm8obmV3IEluZm8oKS50aXRsZSgiQ29udGFjdCBBcHBsaWNhdGlvbiBBUEkiKS5kZXNjcmlwdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgIlRoaXMgaXMgYSBzYW1wbGUgU3ByaW5nIEJvb3QgUkVTVGZ1bCBzZXJ2aWNlIHVzaW5nIHNwcmluZ2RvYy1vcGVuYXBpIGFuZCBPcGVuQVBJIDMuIikpOwogICAgfQoKfQpgYGAKCiMjIyBTdGVwIDIgLSBMb29raW5nIGF0IFN3YWdnZXIKCldoZW4gd2Ugc3RhcnQgb3VyIGFwcGxpY2F0aW9uLCB3ZSB3aWxsIGhhdmUgdHdvIG5ldyBlbmRwb2ludHMuCgpUaGUgZmlyc3QgcmVwcmVzZW50cyB0aGUgT3BlbkFQSSBzcGVjaWZpY2F0aW9uIG9mIG91ciBhcHBsaWNhdGlvbi4KCltodHRwOi8vbG9jYWxob3N0OjgwODAvdjMvYXBpLWRvY3NdKGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92My9hcGktZG9jcykKCiFbQVBJIERvY3NdKHNyYy9tYWluL3Jlc291cmNlcy9pbWcvYXBpLWRvY3MucG5nKQoKVGhlIHNlY29uZCBlbmRwb2ludCByZXByZXNlbnRzIHRoZSBTd2FnZ2VyIFVJLCB3aGljaCB3ZSBjYW4gbm93IHVzZSB0byBpbnZva2UgYW5kIGV4cGxvcmUgb3VyIEFQSS4KCltTd2FnZ2VyIFVJXShodHRwOi8vbG9jYWxob3N0OjgwODAvc3dhZ2dlci11aS5odG1sKQoKIVtTd2FnZ2VyIFVJXShzcmMvbWFpbi9yZXNvdXJjZXMvaW1nL3N3YWdnZXItdWkucG5nKQoKRm9yIGFuIGVhc2llciBhY2Nlc3MsIHdlIGNhbiBjaGFuZ2UgdGhlIFN3YWdnZXIgVUkgVVJMIHRvIGFueXRoaW5nIHRoYXQgd2Ugd2FudC4KCkZvciB0aGF0LCB3ZSBuZWVkIHRvIGFjY2VzcyBgYXBwbGljYXRpb24ucHJvcGVydGllc2AgYW5kIGFkZCB0aGUgZm9sbG93aW5nIHByb3BlcnR5OgoKYHNwcmluZ2RvYy5zd2FnZ2VyLXVpLnBhdGg9L2FwaWRvY2AKClRoaXMgd2lsbCBzZXQgb3VyIFN3YWdnZXIgVUkgVVJMIHRvOiBbaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaWRvY10oaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaWRvYykKCiMjIyBTdGVwIDMgLSBBZGQgYW5ub3RhdGlvbnMgdG8gZW5kcG9pbnRzCgpJbiBvcmRlciBmb3Igb3VyIGVuZHBvaW50cyB0byBiZSB2aXNpYmxlIGluIFN3YWdnZXIsIHdlIG5lZWQgdG8gbWFyayBlYWNoIG9mIHRoZW0gd2l0aCBgQE9wZXJhdGlvbmAgdGFnLgoKSGVyZSBpcyBhbiBleGFtcGxlOgoKYGBgCiAgICBAUG9zdE1hcHBpbmcoIi91c2VycyIpCiAgICBAT3BlcmF0aW9uKHN1bW1hcnkgPSAiUmVnaXN0ZXIgYSBuZXcgdXNlciIsIHRhZ3MgPSB7IlVzZXIiLH0sCiAgICAgICAgICAgIHJlc3BvbnNlcyA9IHsKICAgICAgICAgICAgICAgICAgICBAQXBpUmVzcG9uc2UocmVzcG9uc2VDb2RlID0gIjIwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9ICJSZXR1cm5zIHRoZSByZWdpc3RlcmVkIHVzZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IEBDb250ZW50KG1lZGlhVHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hID0gQFNjaGVtYShpbXBsZW1lbnRhdGlvbiA9IFVzZXIuY2xhc3MpKSkKICAgICAgICAgICAgfSkKICAgIEBSZXNwb25zZUJvZHkKICAgIHB1YmxpYyBVc2VyIHJlZ2lzdGVyKEBSZXF1ZXN0UGFyYW0obmFtZSA9ICJuYW1lIiwgcmVxdWlyZWQgPSBmYWxzZSwgZGVmYXVsdFZhbHVlID0gIlN0cmFuZ2VyIikgU3RyaW5nIG5hbWUpIHsKICAgICAgICBVc2VyIG5ld1VzZXIgPSBuZXcgVXNlcihjb3VudGVyLmluY3JlbWVudEFuZEdldCgpLCBuYW1lKTsKICAgICAgICByZXR1cm4gdXNlclJlcG9zaXRvcnkuYWRkVXNlcihuZXdVc2VyKTsKICAgIH0KYGBgCgojIyMgU3RlcCA0IC0gR2VuZXJhdGUgYSBjbGllbnQKClRoZSBhZHZhbnRhZ2Ugb2YgaGF2aW5nIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYXZhaWxhYmxlIGlzIHRoYXQKZ2VuZXJhdGluZyBhIGNsaWVudCBjb2RlIHRvIGNhbGwgb3VyIEFQSSBpcyBub3cgcXVpdGUgZWFzeS4KCkZvciB0aGlzLCB3ZSBjYW4gdXNlIHZhcmlvdXMgdG9vbHMgc3VjaCBhczogW09wZW5BUEkgR2VuZXJhdG9yXShodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gvKQo=
    description: Documenting a Spring REST API Using OpenAPI 3.0
    created: "2021-09-20T22:38:37Z"
    updated: "2021-12-23T00:11:58Z"
    language: Java
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: essentialprogramming
    logo: https://avatars.githubusercontent.com/u/46305342?v=4
    license: GPL-3.0
    repoEtag: '"aeb855a06dc8a186f4973c6d4beb56a2ca207661fb61cfc6a2a6690102933246"'
    repoLastModified: Sat, 08 Jan 2022 17:10:57 GMT
    readmeEtag: '"fb1bbb5660af827848139a0d718f7e83c97fe1c746b1367e34d137bc9679e521"'
    readmeLastModified: Sat, 08 Jan 2022 17:10:54 GMT
  foundInMaster: true
  category:
    - Sdk
    - Parsers
- source: openapi3 tags
  repository: https://github.com/c-classen/oak-dsl
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: Create OpenAPI Specifications using Kotlin
    created: "2021-08-19T19:10:39Z"
    updated: "2021-12-02T14:50:27Z"
    language: Kotlin
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: c-classen
    logo: https://avatars.githubusercontent.com/u/58041050?v=4
    license: MIT
    repoEtag: '"811306bd7b2480a8ea7376d857f5a7eccacedceca1326dcff9d3f24144d80cb5"'
    repoLastModified: Thu, 02 Dec 2021 14:50:27 GMT
    readmeEtag: '"b30ecc6555b9cad8e670a43e1116ff20c512bb7fd7d0bdb5dc2315dceaded37b"'
    readmeLastModified: Thu, 02 Dec 2021 14:29:56 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/approveapi/openapi-spec
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBBcHByb3ZlQVBJIGNvbmZvcm1zIHRvIE9wZW5BUEkKCltBcHByb3ZlQVBJXShodHRwczovL2FwcHJvdmVhcGkuY29tKSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24uIAoKVXNpbmcgW29wZW5hcGktc3BlYy0zLjAueWFtbF0ob3BlbmFwaS1zcGVjLTMuMC55YW1sKSBpbiB0aGlzIHJlcG9zaXRvcnksIHlvdSBjYW4gZ2VuZXJhdGUgY2xpZW50IGxpYnJhcnkgYmluZGluZ3MgdG8gQXBwcm92ZUFQSSBmb3IgeW91ciBmYXZvcml0ZSBsYW5ndWFnZS4K
    description: "OpenAPI Spec 3.0 for ApproveAPI "
    created: "2019-03-11T22:02:12Z"
    updated: "2019-03-18T03:28:14Z"
    language: null
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: approveapi
    logo: https://avatars.githubusercontent.com/u/46987102?v=4
    repoEtag: '"eec96ea262a144d1636f45aa834f7bcb7520770aa574dbd7f77ce27137a6fd1f"'
    repoLastModified: Mon, 18 Mar 2019 03:28:14 GMT
    readmeEtag: '"1449fdbbf79cb959751a65fb15735b67a967dc9f8bbccbb2f9bc2f358b403dae"'
    readmeLastModified: Mon, 11 Mar 2019 22:09:40 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/manchenkoff/swagger-routes-validator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTd2FnZ2VyIHJvdXRlcyB2YWxpZGF0b3IKCkEgc3BlY2lmaWMgaGVscGVyIHRvIGNoZWNrIEFQSSByb3V0ZXMgY292ZXJhZ2Ugd2l0aCBTd2FnZ2VyLgoKIyMgSG93IHRvIHVzZQoKVGhpcyBhcHBsaWNhdGlvbiBpcyBwcm92aWRlZCBvbmx5IGJ5IERvY2tlciBpbWFnZSBhbmQgY2FuIGJlIHVzZWQgYXMgZm9sbG93aW5nIGV4YW1wbGUKCmBgYGJhc2gKJCBkb2NrZXIgcnVuIC1pIFwKICAgIC12ICQoUFdEKS9kYXRhOi92YXIvZGF0YSBcCiAgICAtZSBDT05GSUc9L3Zhci9kYXRhL2NvbmZpZy55bWwgXAogICAgLS1uYW1lIHN3YWdnZXItcm91dGVzLXZhbGlkYXRvciAtLXJtIFwKICAgIG1hbmNoZW5rb2ZmL3N3YWdnZXItcm91dGVzLXZhbGlkYXRvcjpsYXRlc3QKYGBgCgpDb25maWcgZXhhbXBsZQoKYGBgeWFtbApzd2FnZ2VyOiAvdmFyL2RhdGEvZXhhbXBsZS9zd2FnZ2VyLWRvYy9zd2FnZ2VyLnltbAoKcm91dGVzOgogIGRlZmF1bHQ6CiAgICBwYXRoOiAvdmFyL2RhdGEvZXhhbXBsZS9yb3V0aW5nL3YxLnltbAogIHdpdGhfcHJlZml4OgogICAgcGF0aDogL3Zhci9kYXRhL2V4YW1wbGUvcm91dGluZy92Mi55bWwKICAgIHByZWZpeDogL3YyCmBgYAoKIyMjIEVudmlyb25tZW50cyB2YXJpYWJsZXMKCi0gKipDT05GSUcqKjogcGF0aCB0byBjb25maWcgZmlsZQo=
    description: A specific helper to check API routes coverage with Swagger
    created: "2021-01-09T19:51:51Z"
    updated: "2021-04-10T16:44:22Z"
    language: Python
    archived: true
    stars: 1
    watchers: 1
    forks: 0
    owner: manchenkoff
    logo: https://avatars.githubusercontent.com/u/6690063?v=4
    license: MIT
    repoEtag: '"ca6842387604d920c2200d65f87f208f52c237a119cd96982fabd35ae80d382f"'
    repoLastModified: Sat, 10 Apr 2021 16:44:22 GMT
    readmeEtag: '"44e8c72719fdef3826c39f2699ee68d5c9397e525b253e98326e1bd4ff7e60ab"'
    readmeLastModified: Wed, 27 Jan 2021 23:03:55 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/karthikeyan-ng/e-learnings-certificate_udemy
  v3: true
  repositoryMetadata:
    description: Course Completion Certificates + Technology Certificates
    created: "2020-02-25T16:07:38Z"
    updated: "2020-07-05T13:26:31Z"
    language: null
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: karthikeyan-ng
    logo: https://avatars.githubusercontent.com/u/39563373?v=4
    repoEtag: '"5368bee46571697fb549e26f7cdaec1b252838b0e3e905155574eb32e6fdb9ec"'
    repoLastModified: Sun, 05 Jul 2020 13:26:31 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/rrjanbiah/legacy2openapi-spec
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBsZWdhY3kyb3BlbmFwaS1zcGVjIC0gTGVnYWN5IHRvIE9wZW5BUEkgc3BlYyBjb252ZXJzaW9ucyBvZiBBUElzIGZvciBlYXN5IFNESyBjb2RlIGdlbmVyYXRpb25zCgpPcGVuQVBJIHNwZWMtY29tcGxpYW50IEFQSXMgaGF2ZSB0aGUgYmVsb3cgYWR2YW50YWdlczoKMS4gQ2FuIGdlbmVyYXRlIFNESyBjb2RlcyBhdXRvbWF0aWNhbGx5IHVzaW5nIHRoZSBbT3BlbkFQSSBHZW5lcmF0b3JdKGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQVBJVG9vbHMvb3BlbmFwaS1nZW5lcmF0b3IpCjIuIENhbiBnZW5lcmF0ZSBBUEkgcGxheWdyb3VuZCAmIGRvY3VtZW50YXRpb24gdXNpbmcgW29wZW5hcGktdWldKGh0dHBzOi8vZ2l0aHViLmNvbS9kaGNvZGUvb3BlbmFwaS11aSkgYW5kIFtTd2FnZ2VyIFVJXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aSkKMy4gQ2FuIGdlbmVyYXRlIG5pY2UtbG9va2luZyBkb2N1bWVudGF0aW9uIHVzaW5nIFtSZWRvY10oaHR0cHM6Ly9naXRodWIuY29tL1JlZG9jbHkvcmVkb2MpCgpCdXQsIGZldyBTYWFTIGNvbXBhbmllcyBkb24ndCBvZmZlciBPcGVuQVBJIHNwZWMgZm9yIHRoZWlyIG93biByZWFzb25zLiBUaGlzIHByb2plY3QgaXMgYW4gYXR0ZW1wdCB0byBpZGVudGlmeSB0aG9zZSBsZWdhY3kgQVBJIGRvY3VtZW50YXRpb24gYW5kIGNvbnZlcnQgdGhlbSBpbnRvIE9wZW5BUEkgc3BlYy4K
    readmeEtag: '"15ab59c11bb9366458874fe795a01b74bd7e816e78678f4d7e395009fccee8f7"'
    readmeLastModified: Sat, 23 Apr 2022 15:25:45 GMT
    description: Legacy to OpenAPI spec conversions of APIs for easy SDK code generations
    created: "2022-04-23T14:47:43Z"
    updated: "2022-04-23T15:23:26Z"
    language: Rust
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: rrjanbiah
    logo: https://avatars.githubusercontent.com/u/4907427?v=4
    license: MIT
    repoEtag: '"bd326389d7bbd6dd8d0dd40c45e076358e358bea2b77742a713dc99192176c30"'
    repoLastModified: Sat, 23 Apr 2022 15:23:26 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/namsor/namsor-ruby-sdk2
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: >-
      NamSor API v2 Ruby SDK - classify personal names accurately by gender,
      country of origin, or ethnicity.
    created: "2019-02-25T09:24:00Z"
    updated: "2019-04-17T09:12:39Z"
    language: Ruby
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: namsor
    logo: https://avatars.githubusercontent.com/u/6951565?v=4
    license: AGPL-3.0
    repoEtag: '"fef0817c482cb35cbd664554a8d2fdfdcb26dd96a0400692d3af5a9daf2edff3"'
    repoLastModified: Wed, 17 Apr 2019 09:12:39 GMT
    readmeEtag: '"1703c40a48bbcc3b0e5e029624d3ef3936d3ed9d06c100ba0bc5d328d81512c9"'
    readmeLastModified: Thu, 14 Mar 2019 09:45:25 GMT
  foundInMaster: true
  category:
    - Documentation
    - Description Validators
- source: openapi3 tags
  repository: https://github.com/chrisdostert/listener-from-oas3-js
  v3: true
  repositoryMetadata:
    base64Readme: >-
      WyFbQnVpbGQgU3RhdHVzXShodHRwczovL3RyYXZpcy1jaS5vcmcvY2hyaXNkb3N0ZXJ0L2xpc3RlbmVyLWZyb20tb2FzMy1qcy5zdmc/YnJhbmNoPW1hc3RlcildKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9jaHJpc2Rvc3RlcnQvbGlzdGVuZXItZnJvbS1vYXMzLWpzKQpbIVtDb3ZlcmFnZV0oaHR0cHM6Ly9jb2RlY292LmlvL2doL2NocmlzZG9zdGVydC9saXN0ZW5lci1mcm9tLW9hczMtanMvYnJhbmNoL21hc3Rlci9ncmFwaC9iYWRnZS5zdmcpXShodHRwczovL2NvZGVjb3YuaW8vZ2gvY2hyaXNkb3N0ZXJ0L2xpc3RlbmVyLWZyb20tb2FzMy1qcykKCj4gKkJlIGFkdmlzZWQ6IHRoaXMgcHJvamVjdCBpcyBjdXJyZW50bHkgYXQgTWFqb3IgdmVyc2lvbiB6ZXJvLiBQZXIgdGhlCj4gc2VtYW50aWMgdmVyc2lvbmluZyBzcGVjOiAiTWFqb3IgdmVyc2lvbiB6ZXJvICgwLnkueikgaXMgZm9yIGluaXRpYWwKPiBkZXZlbG9wbWVudC4gQW55dGhpbmcgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS4gVGhlIHB1YmxpYyBBUEkgc2hvdWxkCj4gbm90IGJlIGNvbnNpZGVyZWQgc3RhYmxlLiIqCgpKYXZhc2NyaXB0IGxpYnJhcnkgd2hpY2ggZ2VuZXJhdGVzIGEgbmF0aXZlIGh0dHAgc2VydmVyIGxpc3RlbmVyIGZyb20gYSB2MyBvcGVuIGFwaSBzcGVjCgojIEluc3RhbGxhdGlvbgoKIyMgTlBNCmBgYHNoZWxsCm5wbSBpbnN0YWxsIC0tc2F2ZSBsaXN0ZW5lci1mcm9tLW9hczMKYGBgCgojIyBZYXJuCmBgYHNoZWxsCnlhcm4gYWRkIGxpc3RlbmVyLWZyb20tb2FzMwpgYGAKCiMgSGFuZGxlcnMKClRoZSBzaWduYXR1cmUgZm9yIGhhbmRsZXJzIGlzCmBhc3luYyBteUhhbmRsZXIoY3R4KWAKClRoZSBjdHggb2JqZWN0IGlzIHRoZSBzYW1lIGFzIHRoZSBrb2EgY3R4IG9iamVjdCBidXQgYWxzbyBpbmNsdWRlczoKCiMjIyBjdHgucGFyYW1ldGVycy5wYXRoCk9iamVjdCB3aGVyZSBlYWNoIHByb3BlcnR5IGlzIHRoZSBuYW1lIG9mIGEgcGF0aCBwYXJhbWV0ZXIgYXBwbGljYWJsZSB0byB0aGUgb3BlcmF0aW9uIGFuZCBpdCdzIHByb3ZpZGVkIHZhbHVlLgoKIyMjIGN0eC5wYXJhbWV0ZXJzLnF1ZXJ5Ck9iamVjdCB3aGVyZSBlYWNoIHByb3BlcnR5IGlzIHRoZSBuYW1lIG9mIGEgcXVlcnkgcGFyYW1ldGVyIGFwcGxpY2FibGUgdG8gdGhlIG9wZXJhdGlvbiBhbmQgaXQncyBwcm92aWRlZCB2YWx1ZS4KCnBhcmFtZXRlcnMgZGVjbGFyZWQgdy8gYXBwbGljYXRpb24vanNvbiBjb250ZW50IHdpbGwgYmUgZGVzZXJpYWxpemVkCgojIyBjdHguc2VjdXJpdHkKT2JqZWN0IHdoZXJlIGVhY2ggcHJvcGVydHkgaXMgdGhlIG5hbWUgb2YgYSBzZWN1cml0eSBkZWZpbml0aW9uIGFwcGxpY2FibGUgdG8gdGhlIG9wZXJhdGlvbiBhbmQgaXQncyBwcm92aWRlZCB2YWx1ZS4KCmZvciBvYXV0aDIsIHZhbHVlIHdpbGwgYmUgdGhlIGJlYXJlciB0b2tlbiBzdHJpbmcgIAoKZm9yIGh0dHAgYmVhcmVyLCB2YWx1ZSB3aWxsIGJlIHRoZSBiZWFyZXIgdG9rZW4gc3RyaW5nICAKCmZvciBodHRwIGJhc2ljLCB2YWx1ZSB3aWxsIGJlIGEgYHt1c2VySWQsIHBhc3N3b3JkfWAgb2JqZWN0CgojIEV4YW1wbGVzCgojIEJhc2ljIHVzYWdlCgpgYGBqYXZhc2NyaXB0CmNvbnN0IGdldFJlcXVlc3RMaXN0ZW5lciA9IHJlcXVpcmUoJ2xpc3RlbmVyLWZyb20tb2FzMycpCmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJykKCmFzeW5jIGZ1bmN0aW9uIGxpc3Rlbihwb3J0KSB7CiAgY29uc3QgcmVxdWVzdExpc3RlbmVyID0gYXdhaXQgZ2V0UmVxdWVzdExpc3RlbmVyKAogICAgYCR7X19kaXJuYW1lfS9vcGVuYXBpLnlhbWxgLAogICAgLy8gcmVzb2x2ZSBoYW5kbGVycyBmcm9tIGAke19fZGlybmFtZX0vJHtvcGVyYXRpb24tcGF0aH0vJHtvcGVyYXRpb24tbWV0aG9kfWAKICAgIF9fZGlybmFtZQogICkKCiAgaHR0cAogICAgLmNyZWF0ZVNlcnZlcihyZXF1ZXN0TGlzdGVuZXIpCiAgICAubGlzdGVuKHBvcnQpCn0KYGBgCgojIFN1cHBvcnQKCltvcGVuIGFuIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vY2hyaXNkb3N0ZXJ0L2xpc3RlbmVyLWZyb20tb2FzMy1qcy9pc3N1ZXMpCgojIFJlbGVhc2VzCgpyZWxlYXNlcyBhcmUgdmVyc2lvbmVkIGFjY29yZGluZyB0bwpbIVtzZW12ZXIgMi4wLjBdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2Uvc2VtdmVyLTIuMC4wLWJyaWdodGdyZWVuLnN2ZyldKGh0dHA6Ly9zZW12ZXIub3JnL3NwZWMvdjIuMC4wLmh0bWwpCmFuZCBbdGFnZ2VkXShodHRwczovL2dpdC1zY20uY29tL2Jvb2svZW4vdjIvR2l0LUJhc2ljcy1UYWdnaW5nKTsgc2VlCltDSEFOR0VMT0cubWRdKENIQU5HRUxPRy5tZCkgZm9yIHJlbGVhc2Ugbm90ZXMKCiMgQ29udHJpYnV0aW5nCgpzZWUgW0NPTlRSSUJVVElORy5tZF0oQ09OVFJJQlVUSU5HLm1kKQo=
    description: >-
      Javascript library which generates a native http server listener from a v3
      open api spec
    created: "2018-07-08T17:56:57Z"
    updated: "2021-04-15T22:04:07Z"
    language: JavaScript
    archived: true
    stars: 1
    watchers: 1
    forks: 0
    owner: chrisdostert
    logo: https://avatars.githubusercontent.com/u/2335774?v=4
    license: MIT
    repoEtag: '"1235a4fbf5859b756165c1eefedc31ad699ec811d06eed189a4bf5880bb00783"'
    repoLastModified: Thu, 15 Apr 2021 22:04:07 GMT
    readmeEtag: '"f9a2f1a86da1b9ff3c878b6d9f4ebb4383cbf2fbd53132a69b094ce5bdea58a2"'
    readmeLastModified: Mon, 15 Oct 2018 17:17:08 GMT
  foundInMaster: true
  category:
    - Converters
    - Parsers
- source: openapi3 tags
  repository: https://github.com/greyteam2020/gooutsafe_microservice
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBHb091dFNhZmUgd2l0aCBtaWNyb3NlcnZpY2VzCgohW0dpdEh1YiBXb3JrZmxvdyBTdGF0dXNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3dvcmtmbG93L3N0YXR1cy9HcmV5VGVhbTIwMjAvR29PdXRTYWZlX21pY3Jvc2VydmljZS9kb2NrZXItY29tcG9zZS1hY3Rpb25zLXdvcmtmbG93P3N0eWxlPWZvci10aGUtYmFkZ2UpCiFbQ29kZWNvdl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9jb2RlY292L2MvZ2l0aHViL0dyZXlUZWFtMjAyMC9Hb091dFNhZmVfbWljcm9zZXJ2aWNlP3N0eWxlPWZvci10aGUtYmFkZ2UpCgojIyBUYWJsZSBvZiBDb250ZW50CgotIFtBcHAgQXJjaGl0ZWN0dXJlXSgjKQotIFtIb3cgQnVpbGQgYW5kIHJ1biB3aXRoIERvY2tlcl0oaHR0cHM6Ly9ncmV5dGVhbTIwMjAuZ2l0aHViLmlvL0dvT3V0U2FmZV9taWNyb3NlcnZpY2UvcnVuLXRlc3Qtb24tdGhlLWhvc3QtbWFjaGluZSkKLSBbRGV2ZWxvcGluZ10oaHR0cHM6Ly9ncmV5dGVhbTIwMjAuZ2l0aHViLmlvL0dvT3V0U2FmZV9taWNyb3NlcnZpY2UvR29PdXRTYWZlX21pY3Jvc2VydmljZSNkZXZlbG9waW5nKQotIFtBZGRpdGlvbmFsIGluZm9ybWF0aW9uXShodHRwczovL2dyZXl0ZWFtMjAyMC5naXRodWIuaW8vR29PdXRTYWZlX21pY3Jvc2VydmljZS9hZGRpdGlvbmFsLWluZm9ybWF0aW9uKQoKIyMgQXBwIEFyY2hpdGVjdHVyZQoKIVtdKGh0dHBzOi8vaS5pYmIuY28vaGMzVjFtay9waG90by0yMDIwLTExLTI2LTEwLTA5LTU4LmpwZykKCiFbXShodHRwczovL2kuaWJiLmNvL0NIUlIxMVcvU2VsZWN0aW9uLTA0Ni5wbmcpCgojIyBIb3cgY2xvbmUgaXQKCkVhY2ggbWljcm9zZXJ2aWNlcyBpcyBhIHNlcGFyYXRlIHJlcG9zaXRvcnkgdGhhdCB5b3UgY2FuIGNsb25lIHdpdGggdGhlIGZvbGxvd2luZyBjb21tYW5kcwoKYGBgYmFzaApnaXQgY2xvbmUgLS1yZWN1cnNlLXN1Ym1vZHVsZXMgaHR0cHM6Ly9naXRodWIuY29tL0dyZXlUZWFtMjAyMC9Hb091dFNhZmVfbWljcm9zZXJ2aWNlLmdpdApgYGAKCltTb3VyY2VdKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzk3MDYxLzcyOTA1NjIpCgpUaGUgc3VibW9kdWxlcyBhcmUgdGhlIG1pY3Jvc2VydmljZXMgd2l0aCB0aGUgZm9sbG93aW5nIHByb3ByaWV0aWVzOgoKLSBbRW1haWwgTWljcm9zZXJ2aWNlc10oaHR0cHM6Ly9naXRodWIuY29tL0dyZXlUZWFtMjAyMC9lbWFpbF9taWNyb3NlcnZpY2UpOiBSdW5uaW5nIG9uIHBvcnQgNTAwMSBhbmQgaW5jbHVkZSBzb21lIFtjZWxlcnldKGh0dHBzOi8vZG9jcy5jZWxlcnlwcm9qZWN0Lm9yZy9lbi9zdGFibGUvZ2V0dGluZy1zdGFydGVkL2ludHJvZHVjdGlvbi5odG1sKSB0YXNrcy4KLSBbVXNlciBNaWNyb3NlcnZpY2VzXShodHRwczovL2dpdGh1Yi5jb20vR3JleVRlYW0yMDIwL3VzZXJzX21pY3Jvc2VydmljZSk6IFJ1bm5pbmcgb24gcG9ydCA1MDAyOwotIFtSZXN0YXVyYW50cyBNaWNyb3NlcnZpY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9HcmV5VGVhbTIwMjAvcmVzdGF1cmFudHNfbWljcm9zZXJ2aWNlKTogUnVubmluZyBvbiBwb3J0IDUwMDMgYW5kIGluY2x1ZGUgc29tZSBbY2VsZXJ5XShodHRwczovL2RvY3MuY2VsZXJ5cHJvamVjdC5vcmcvZW4vc3RhYmxlL2dldHRpbmctc3RhcnRlZC9pbnRyb2R1Y3Rpb24uaHRtbCkgYmFja2dyb3VuZCB0YXNrcy47Ci0gW0Jvb2tpbmcgTWljcm9zZXJ2aWNlXShodHRwczovL2dpdGh1Yi5jb20vR3JleVRlYW0yMDIwL2Jvb2tpbmdfbWljcm9zZXJ2aWNlKTogUnVubmluZyBvbiBwb3J0IDUwMDQKCiMjIEhvdyBCdWlsZCBhbmQgcnVuIHdpdGggRG9ja2VyCgpDbG9uZSB0aGUgcmVwb3NpdG9yeSB3aXRoIHRoZSBjb21tYW5kIGFib3ZlIGFuZCBydW4gaW4gdGhlIHJvb3QgZm9sZGVyIHRoZSBjb21tYW5kCmBkb2NrZXItY29tcG9zZSB1cGAKVGhpcyB3aWxsIG1ha2UgZG9ja2VyIGRvd25sb2FkcyBhbGwgdGhlIGZpbGUgbmVlZGVkIGFuZCBzdGFydCBidWlsZGluZyB0aGUgY29udGFpbmVycy4gCkFmdGVyIHRoYXQsIHlvdSBjYW4gYnJvd3NlIHRvIGh0dHA6Ly9sb2NhbGhvc3QvIHRvIHVzZSB0aGUgYXBwLgoKIyMgUnVuIHRlc3Qgb24gdGhlIGhvc3QgbWFjaGluZQoKWW91IGNhbid0IHdpdGhvdXQgZG9ja2VyIHRoaXMgdGltZSwgdG8gcnVuIGl0IG9uIHRoZSBob3N0IG1hY2hpbmUgd2l0aG91dCBkb2NrZXIgeW91IGNhbiBydW4gdGhlIG1vbm9saXRoIHZlcnNpb24KYXZhaWxhYmxlIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vR3JleVRlYW0yMDIwL0dvT3V0U2FmZV9QcmltZXIyMDIwKQoKIyMgRGV2ZWxvcGluZwoKRWFjaCBwcm9ncmFtbWVyIGhhcyBhIHBlcnNvbmFsIHN0eWxlIG9uIHdyaXRlIGNvZGUgYW5kIHdlIGFjY2VwdCB0aGlzLCBidXQgdG8gbWFrZSByZWFkYWJpbGl0eSB0aGUKY29kZSBmcm9tIGFsbCBjb21wb25lbnQgb2YgdGhlIHRlYW0sIHdlIHVzZWQgYSBnb29kIHRvb2wgdG8gZm9ybWF0IHRoZSBjb2RlIGluIGF1dG9tYXRpY2FsbHkuCgpJdCBpcyBbYmxhY2tdKGh0dHBzOi8vZ2l0aHViLmNvbS9wc2YvYmxhY2spLCBhbmQgaXQgaXMgaW5zdGFsbGVkIHdpdGggdGhlIHJlcXVpcmVtZW50cy50eHQKClRvIGZvcm1hdCB0aGUgY29kZSB5b3UgY2FuIHJ1biB0aGUgY29tbWFuZCBiZWxvdyBhZnRlciBgcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQgLS11c2VyYAoKYGJsYWNrIG1vbm9saXRoYAoKV2hlbiB5b3Ugc2VlIHRoZSBmb2xsb3dpbmcgbGluZSwgeW91IGFyZSBkb25lIHRvIHB1c2ggeW91ciBQUgoKQWxsIGRvbmUhIOKcqCDwn42wIOKcqAoKCiMjIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24KCi0gRGVhZGxpbmUgLSBXZWRuZXNkYXksIDI1IE5vdmVtYmVyIDIwMjAsIDIzOjU5Cg==
    readmeEtag: '"a69f268842155aeac50ba2574c46c5a64085066806514e5c0632356d52bb9cf9"'
    readmeLastModified: Tue, 01 Mar 2022 10:29:30 GMT
    description: >-
      :octocat: GoOutSafe a web app (with microservices architecture) that
      implements some cool features to survive during this covid19 Pandemic.
      This web app is developed during the Advanced Software Engineering course 
      by the Univerisity of Pisa :computer:
    created: "2020-11-11T16:56:03Z"
    updated: "2022-03-01T10:29:34Z"
    language: Python
    archived: false
    stars: 1
    watchers: 1
    forks: 2
    owner: GreyTeam2020
    logo: https://avatars.githubusercontent.com/u/73334241?v=4
    repoEtag: '"fad4bbfdd45a956a23554daffa9952826c4f60122c51de545c312b2c5ad52b7d"'
    repoLastModified: Tue, 01 Mar 2022 10:29:34 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/gertd/scp-cmd
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzY3AtY21kCgpTcGx1bmsgQ2xvdWQgUGxhdGZvcm0gQ29tbWFuZCBFeGVjdXRpb24gVG9vbAo=
    description: Splunk Cloud Platform Command Line
    created: "2019-09-13T20:10:08Z"
    updated: "2020-03-23T22:47:01Z"
    language: Go
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: gertd
    logo: https://avatars.githubusercontent.com/u/1533850?v=4
    license: Apache-2.0
    repoEtag: '"1954b0fbc785549a70ad4923493b70c8ef7d30b220b44873cf1c51f61f34c987"'
    repoLastModified: Mon, 23 Mar 2020 22:47:01 GMT
    readmeEtag: '"d19ce2f345f8ee871d4be8e74747c47bbccf869ff51fe88feb7b78e7ec1056ad"'
    readmeLastModified: Mon, 23 Mar 2020 22:46:51 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Server
- source: openapi3 tags
  repository: https://github.com/freight-trust/open-edi
  v3: true
  repositoryMetadata:
    description: >-
      OAS3 EDI API for Translation and Validation Transactional Service w/
      Attestation & Non-Repudiation
    created: "2020-09-22T05:30:20Z"
    updated: "2020-11-04T15:00:24Z"
    language: HTML
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: freight-trust
    logo: https://avatars.githubusercontent.com/u/57275623?v=4
    repoEtag: '"88c661099934c892c4f11999d51ea2d76fbc86469745e00b057a35e2bbd31157"'
    repoLastModified: Wed, 04 Nov 2020 15:00:24 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/microenv/node-typescript-api-boilerplate
  v3: true
  repositoryMetadata:
    base64Readme: IyBub2RlLXR5cGVzY3JpcHQtYm9pbGVycGxhdGU=
    description: >-
      🚀 Boilerplate for typescript REST APIs ⭐Create production ready APIs
      using es7 and jest unit testing.
    created: "2020-04-15T18:51:33Z"
    updated: "2020-04-17T04:30:38Z"
    language: TypeScript
    archived: false
    stars: 1
    watchers: 1
    forks: 1
    owner: microenv
    logo: https://avatars.githubusercontent.com/u/39780224?v=4
    license: MIT
    repoEtag: '"cd3d04fd78bbb76a84edd57b24874127a0c0ca3be6863f0bc99ce365331de660"'
    repoLastModified: Fri, 17 Apr 2020 04:30:38 GMT
    readmeEtag: '"a46b80de65b42e8a3e52d2880ab11403a65434e044af3bafae784dd7926acf3f"'
    readmeLastModified: Fri, 17 Apr 2020 01:57:13 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/alexpdr/masonite-openapi-generator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBtYXNvbml0ZS1vcGVuYXBpLWdlbmVyYXRvcgpDb21pbmcgc29vbiEKClRvZG86Ci0gQWRkIHN1cHBvcnQgZm9yIEF1dGggJiBSZWRpcmVjdHMKLSBBZGQgc3VwcG9ydCBmb3IgY3JlYXRlIG1vZGVscyB8IHVzZSBidWlsdC1pbnMgZm9yIGR5bmFtaWMgcmVzcG9uc2UKLSBBZGQgc3VwcG9ydCBmb3IgaGFuZGxlIG9uZS9tYW55Ci0gQWRkIHN1cHBvcnQgZm9yIG11bHRpcGxlLWFyZ3MtdHlwZXMgKG9ubHkgcXVlcnktcGFyYW1zIGF0bSkKCi0gTW92ZSBjb21tYW5kcyArIHNlcnZpY2UgcHJvdmlkZXIgdG8gcGFja2FnZQotIENyZWF0ZSBpbnN0YWxsY29tbWFuZA==
    description: >-
      Third-party package for Masonite that utilizes the built-in routing engine
      and database models to generate valid OpenAPI 3 schema's.
    created: "2020-11-20T07:58:33Z"
    updated: "2021-01-08T19:26:12Z"
    language: Python
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: alexpdr
    logo: https://avatars.githubusercontent.com/u/49159860?v=4
    license: MIT
    repoEtag: '"44b30a8de682e7aff6bd5dba37d3814de34cb6918e4d48f617bb2b7cc9839d55"'
    repoLastModified: Fri, 08 Jan 2021 19:26:12 GMT
    readmeEtag: '"f6390fe3517df1949412180049106ee80ce057e1bbd63415c22e8ef4fcba1cf3"'
    readmeLastModified: Sun, 22 Nov 2020 19:05:52 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/rezsolt/symfony-api-platform-maker-bundle
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBBcGlQbGF0Zm9ybU1ha2VyQnVuZGxlIGZvciBTeW1mb255IDQKUHJvdmlkZSBtYWtlIGNvbW1hbmQgZm9yIFN5bWZvbnkgQVBJIFBsYXRmb3JtIHdoYXQgc3VwcG9ydHMgT3BlbkFQSSAzLjAgc2NoZW1hIHNvdXJjZQo=
    description: >-
      Provide make command for Symfony API Platform what supports OpenAPI 3.0
      schema source
    created: "2019-01-30T22:42:51Z"
    updated: "2019-08-11T16:26:55Z"
    language: PHP
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: rezsolt
    logo: https://avatars.githubusercontent.com/u/17837327?v=4
    license: MIT
    repoEtag: '"d3fdb2ba454200ac36088efab93030bebd873bdd82d068366cf5475072646a52"'
    repoLastModified: Sun, 11 Aug 2019 16:26:55 GMT
    readmeEtag: '"f43c1798be3be60693a207db05b64adf18ee3ce70e39450892b8896820ac6e3c"'
    readmeLastModified: Sun, 11 Aug 2019 13:45:25 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/grigorye/blinkopenapi
  v3: true
  repositoryMetadata:
    description: (Unofficial) OpenAPI spec for Blink camera system.
    created: "2020-09-25T17:36:03Z"
    updated: "2021-12-21T11:34:13Z"
    language: null
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: grigorye
    logo: https://avatars.githubusercontent.com/u/803905?v=4
    repoEtag: '"6c7224cbe1bc019ab2e45b1665ed2ac62c15b843145245ed35839e4638ddbbc7"'
    repoLastModified: Tue, 21 Dec 2021 11:34:13 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/vivek-26/koa-openapi3-router
  v3: true
  repositoryMetadata:
    base64Readme: IyMjIFRoaXMgbGlicmFyeSBpcyBpbiBhbHBoYSBzdGFnZQ==
    description: Koa (v2) Router, based on OpenAPI 3 Doc.
    created: "2018-03-05T16:22:45Z"
    updated: "2018-04-09T12:18:40Z"
    language: JavaScript
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: vivek-26
    logo: https://avatars.githubusercontent.com/u/16881423?v=4
    license: MIT
    repoEtag: '"f67767b17f5f75d8aae8816d5a9debbcee6a7979e7214f5c3c509c2284b150f0"'
    repoLastModified: Mon, 09 Apr 2018 12:18:40 GMT
    readmeEtag: '"f9eb7d5c63b9aac556dd51d2e9cee45c9fe54bacee99950825e69918edee151f"'
    readmeLastModified: Sat, 17 Mar 2018 05:57:23 GMT
  foundInMaster: true
  category:
    - Documentation
    - Testing
    - Parsers
- source: openapi3 tags
  repository: https://github.com/javasks/open-api
  v3: true
  repositoryMetadata:
    description: >-
      This repo is related to the open API generator. You need to come with the
      first API contract and then Models and endpoint will be exposed based on
      the open API generator plugin.
    created: "2021-05-10T18:43:46Z"
    updated: "2021-05-11T07:51:15Z"
    language: Java
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: javasks
    logo: https://avatars.githubusercontent.com/u/35063886?v=4
    repoEtag: '"232c407c3be41690d40e0837802e671cc04a1810af6fa0a70d03158a48298259"'
    repoLastModified: Tue, 11 May 2021 07:51:15 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/stephan-mueller/api-documentation-showcase
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBBUEkgRG9jdW1lbnRhdGlvbiBTaG93Y2FzZQoKWyFbR2l0SHViIFdvcmtmbG93XShodHRwczovL2dpdGh1Yi5jb20vc3RlcGhhbi1tdWVsbGVyL2FwaS1kb2N1bWVudGF0aW9uLXNob3djYXNlL2FjdGlvbnMvd29ya2Zsb3dzL21hdmVuLnltbC9iYWRnZS5zdmcpXShodHRwczovL2dpdGh1Yi5jb20vc3RlcGhhbi1tdWVsbGVyL2FwaS1kb2N1bWVudGF0aW9uLXNob3djYXNlL2FjdGlvbnMpClshW0dpdEh1YiBsYXN0IGNvbW1pdF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGFzdC1jb21taXQvc3RlcGhhbi1tdWVsbGVyL2FwaS1kb2N1bWVudGF0aW9uLXNob3djYXNlKV0oaHR0cHM6Ly9naXRodWIuY29tL3N0ZXBoYW4tbXVlbGxlci9hcGktZG9jdW1lbnRhdGlvbi1zaG93Y2FzZS9jb21taXRzKQpbIVtHaXRIdWJdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL2xpY2Vuc2Uvc3RlcGhhbi1tdWVsbGVyL2FwaS1kb2N1bWVudGF0aW9uLXNob3djYXNlKV0oaHR0cHM6Ly9naXRodWIuY29tL3N0ZXBoYW4tbXVlbGxlci9hcGktZG9jdW1lbnRhdGlvbi1zaG93Y2FzZS9ibG9iL21hc3Rlci9MSUNFTlNFKQoKVGhpcyBpcyBhIHNob3djYXNlIGZvciBhcGkgZG9jdW1lbnRhdGlvbi4gSXQgY29udGFpbnMgaGVsbG8gd29ybGQgYXBwbGljYXRpb25zLCB3aGljaCBkZW1vbnN0cmF0ZXMgZmVhdHVyZXMgb2YgdGhlCltPcGVuQVBJIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vb3BlbmFwaXMub3JnKSBhbmQgb3RoZXJzLiBTb2Z0d2FyZSByZXF1aXJlbWVudHMgdG8gcnVuIHRoZSBzYW1wbGVzIGFyZSBgbWF2ZW5gLCBgb3Blbmpkay04YCAob3IgYW55IG90aGVyIApKREsgOCkgYW5kIGBkb2NrZXJgLgoKIyMgT3BlbkFQSSBTcGVjaWZpY2F0aW9uIChPQVMpCgpUaGUgW09wZW5BUEkgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9zcGVjLm9wZW5hcGlzLm9yZy9vYXMvdjMuMC4zKSAoT0FTKSBkZWZpbmVzIGEgc3RhbmRhcmQsIHByb2dyYW1taW5nIGxhbmd1YWdlLWFnbm9zdGljIGludGVyZmFjZSBkZXNjcmlwdGlvbiBmb3IgUkVTVCBBUElzLCB3aGljaCBhbGxvd3MgYm90aCAKaHVtYW5zIGFuZCBjb21wdXRlcnMgdG8gZGlzY292ZXIgYW5kIHVuZGVyc3RhbmQgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHNlcnZpY2Ugd2l0aG91dCByZXF1aXJpbmcgYWNjZXNzIHRvIHNvdXJjZSBjb2RlLCBhZGRpdGlvbmFsIApkb2N1bWVudGF0aW9uLCBvciBpbnNwZWN0aW9uIG9mIG5ldHdvcmsgdHJhZmZpYy4gV2hlbiBwcm9wZXJseSBkZWZpbmVkIHZpYSBPcGVuQVBJLCBhIGNvbnN1bWVyIGNhbiB1bmRlcnN0YW5kIGFuZCBpbnRlcmFjdCB3aXRoIHRoZSByZW1vdGUKc2VydmljZSB3aXRoIGEgbWluaW1hbCBhbW91bnQgb2YgaW1wbGVtZW50YXRpb24gbG9naWMuIFNpbWlsYXIgdG8gd2hhdCBpbnRlcmZhY2UgZGVzY3JpcHRpb25zIGhhdmUgZG9uZSBmb3IgbG93ZXItbGV2ZWwgcHJvZ3JhbW1pbmcsIHRoZSAKT3BlbkFQSSBTcGVjaWZpY2F0aW9uIHJlbW92ZXMgZ3Vlc3N3b3JrIGluIGNhbGxpbmcgYSBzZXJ2aWNlLgoKIyMjIE9BUyB2MiAoZmthIFN3YWdnZXIgUkVTVGZ1bCBBUEkgRG9jdW1lbnRhdGlvbiBTcGVjaWZpY2F0aW9uKQoKW1N3YWdnZXJdKGh0dHBzOi8vc3dhZ2dlci5pby9zcGVjaWZpY2F0aW9uL3YyLykgaXMgYW4gSW50ZXJmYWNlIERlc2NyaXB0aW9uIExhbmd1YWdlIGZvciBkZXNjcmliaW5nIFJFU1RmdWwgQVBJcyBleHByZXNzZWQgdXNpbmcgSlNPTi4gU3dhZ2dlciBpcyB1c2VkIHRvZ2V0aGVyIHdpdGggYSBzZXQgb2YgCm9wZW4tc291cmNlIHNvZnR3YXJlIHRvb2xzIHRvIGRlc2lnbiwgYnVpbGQsIGRvY3VtZW50LCBhbmQgdXNlIFJFU1RmdWwgd2ViIHNlcnZpY2VzLiBTd2FnZ2VyIGluY2x1ZGVzIGF1dG9tYXRlZCBkb2N1bWVudGF0aW9uLCBjb2RlIApnZW5lcmF0aW9uIChpbnRvIG1hbnkgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzKSwgYW5kIHRlc3QtY2FzZSBnZW5lcmF0aW9uLgoKIyMjIFNob3djYXNlcwoKKiBUaGUgW0VjbGlwc2UgTWljcm9Qcm9maWxlIE9wZW5BUEkgU2hvd2Nhc2VdKG1wLW9wZW5hcGktc2hvd2Nhc2UvUkVBRE1FLm1kKSBzaG93cyBmZWF0dXJlcyBvZiB0aGUgTVAgT3BlbkFQSSBTcGVjaWZpY2F0aW9uLgoqIFRoZSBbU3dhZ2dlciBTaG93Y2FzZV0oc3dhZ2dlci1zaG93Y2FzZS9SRUFETUUubWQpIHNob3dzIGZlYXR1cmVzIG9mIHRoZSBTd2FnZ2VyIFNwZWNpZmljYXRpb24gYW5kIHRoZSBTd2FnZ2VyIENvcmUgZnJhbWV3b3JrLg==
    description: null
    created: "2021-05-18T20:30:38Z"
    updated: "2021-06-16T14:42:18Z"
    language: Java
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: stephan-mueller
    logo: https://avatars.githubusercontent.com/u/13217222?v=4
    license: Apache-2.0
    repoEtag: '"274809de2d3226d4d5348363edcd4f43edd383a2e209fb3594430ff8cc071406"'
    repoLastModified: Wed, 16 Jun 2021 14:42:18 GMT
    readmeEtag: '"5a6c522dd30ece6af12cd9c56b5ebda4ef0be742990b727f960cd754e35b3b88"'
    readmeLastModified: Wed, 16 Jun 2021 14:42:06 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/tranvannhat/fastapi-starter
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgUmVxdWlyZW1lbnRzCi0gUHl0aG9uIDMuOAotIFBvc3RncmVzU1FMIDEzCi0gUmVkaXMgCgoKIyMgSW5zdGFsbApJbnN0YWxsIFBvZXRyeSAtIFRvb2wgZm9yIGRlcGVuZGVuY3kgbWFuYWdlbWVudCBhbmQgcGFja2FnaW5nIGluIFB5dGhvbgoKYGBgCnBvZXRyeSBpbnN0YWxsCnBvZXRyeSBzaGVsbApgYGAKCmBgYAphbGVtYmljIHJldmlzaW9uIC0tYXV0b2dlbmVyYXRlIC1tICJ1cGRhdGUgZGIiIApgYGAKCg==
    description: >-
      FastAPI Starter for init project with FastAPI, Postgresql, Redis. Base on
      https://github.com/tiangolo/full-stack-fastapi-postgresql
    created: "2021-07-02T18:29:11Z"
    updated: "2021-07-10T04:21:04Z"
    language: Python
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: tranvannhat
    logo: https://avatars.githubusercontent.com/u/28804941?v=4
    repoEtag: '"8c12a8dd23b08170cf300222b52cc7cc435c7dedbc85d04a663d7b2717865dcb"'
    repoLastModified: Sat, 10 Jul 2021 04:21:04 GMT
    readmeEtag: '"e4a4f4dd1eaac667b5393b0ed5157aa1be12c02cf4f979fb7452f874d10dd75d"'
    readmeLastModified: Sat, 10 Jul 2021 04:20:55 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/seandavi/cmgd_web
  v3: true
  repositoryMetadata:
    description: Web portal and API for the Curated Metagenomics Data project
    created: "2020-09-17T14:16:44Z"
    updated: "2021-04-14T20:27:45Z"
    language: Python
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: seandavi
    logo: https://avatars.githubusercontent.com/u/92435?v=4
    repoEtag: '"e4ed9e0b707a8c66092c2087dbcd39092cd75770004dc2e6648be98b68d6b72e"'
    repoLastModified: Wed, 14 Apr 2021 20:27:45 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/ahelord/boilerplate-express-sequelize
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBib2lsZXJwbGF0ZS1leHByZXNzLXNlcXVlbGl6ZQoKIyBSdW4gRG9ja2VyCi4vcnVuLWRvY2tlci5zaAoKIyBSdW4gTG9jYWwgb25seSBub2RlIDEyCi0gY2Qgc2VydmVyCi0gY2Qgc3JjCi0gbnZtIHVzZSAxMgotIG5wbSBpCi0gbnBtIHJ1biBub2RlbW9uCg==
    readmeEtag: '"e26b6da6d0b57137c116cbbad01c6d30ce8d2137a8f9a06bda4ccdbab1f7bee7"'
    readmeLastModified: Thu, 24 Feb 2022 03:47:30 GMT
    description: "boilerplate express sequelize swagger docker eslint husky precommit "
    created: "2020-07-16T01:08:26Z"
    updated: "2022-02-24T03:47:14Z"
    language: JavaScript
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: ahelord
    logo: https://avatars.githubusercontent.com/u/21299810?v=4
    repoEtag: '"a58d908121b734f0e8f60e08a6588b8a762f26306028cc6c2fe118234772aeb7"'
    repoLastModified: Thu, 24 Feb 2022 03:47:14 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/akh11k/flask-template
  v3: true
  repositoryMetadata:
    base64Readme: IyBmbGFzay10ZW1wbGF0ZQpBIGZsYXNrIHRlbXBsYXRlIHdpdGggcnEsIGNvbm5leGlvbgo=
    description: A flask template with rq, connexion
    created: "2019-05-03T19:05:28Z"
    updated: "2019-05-06T06:48:28Z"
    language: Python
    archived: false
    stars: 1
    watchers: 1
    forks: 1
    owner: akh11k
    logo: https://avatars.githubusercontent.com/u/44919026?v=4
    repoEtag: '"fed421958918b8369bf56da39549da590872a57495fedf6ef997989d76f249e4"'
    repoLastModified: Mon, 06 May 2019 06:48:28 GMT
    readmeEtag: '"6ead2389037fa48a60a2bb48ee6a06c056d1012558001a45a4815875d48a5364"'
    readmeLastModified: Mon, 06 May 2019 06:47:43 GMT
  foundInMaster: true
  category:
    - Mock
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/albankora/decho
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBERUNITwoKIyMgR29hbApUaGUgZ29hbCBpcyB0byBhY2NlbGVyYXRlIHRoZSBwcm9jZXNzIG9mIGJvb3RzdHJhcHBpbmcgYW4gUmVzdGZ1bGwgQVBJIGJhc2UgZ29sYW5nIGFwcGxpY2F0aW9uCgojIyBIb3cKRG9ja2VyIGlzIHVzZWQgdG8gYWNjZWxlcmF0ZSBsb2NhbCBzZXR1cCBmb3IgW0VjaG8gZnJhbWV3b3JrXShodHRwczovL2dpdGh1Yi5jb20vbGFic3RhY2svZWNobykgYW5kIGFsc28geW91IGNhbiBnZW5lcmF0ZSBhIGBzY3JhdGNoYCBpbWFnZSB3aXRoIGEgbWluaW11bSBmb290cHJpbnQgdGhhdCBjYW4gYmUgdXNlZCBpbiBwcm9kdWN0aW9uLgoKIyMgU2V0dXAgbG9jYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzCmBgYGJhc2gKY3AgLmVudi5leGFtcGxlIC5lbnYKYGBgCgojIyBUaGUgY29tbWFuZCBzY3JpcHQKYGBgYmFzaAouL2FwcCB7Y21kfQpgYGAKCiMjIEJ1aWxkIGxvY2FsIGRldgpgYGBiYXNoCiMgYnVpbGQgbG9jYWwgZG9ja2VyIGNvbnRhaW5lciBhbmQgZG93bmxvYWQgcmVxdWlyZWQgbGlicwouL2FwcCBidWlsZApgYGAKCiMjIFJ1biBsb2NhbCBkZXYKYGBgYmFzaAojIHJ1biBsb2NhbCBkb2NrZXIgY29udGFpbmVyCi4vYXBwIHJ1bgpgYGAKCiMjIERldiBzZXJ2ZXIgVVJMCmBodHRwOi8vMTI3LjAuMC4xOjMwMDBgCgojIyBQcm9kdWN0aW9uIGRvY2tlciBpbWFnZQpgYGBiYXNoCiMgY3JlYXRlcyBhIGRvY2tlciBwcm9kdWN0aW9uIGltYWdlCi4vYXBwIHByZApgYGAKCiMjIEZ1bGwgbGlzdCBvZiBjb21tYW5kczoKYGBgYmFzaApDb21tYW5kczoKCiBidWlsZCAgICAgICAgIEJ1aWxkIGxvY2FsIGRvY2tlciBjb250YWluZXIgYW5kIGRvd25sb2FkIHJlcXVpcmVkIGxpYnMKIHJ1biAgICAgICAgICAgUnVuIGxvY2FsIGRvY2tlciBjb250YWluZXIKIHN0b3AgICAgICAgICAgU3RvcCB5b3VyIGxvY2FsIGRvY2tlciBjb250YWluZXIKIHJlbW92ZSAgICAgICAgUmVtb3ZlIGxvY2FsIGNvbnRhaW5lcnMgYW5kIGV2ZXJ5dGhpbmcgcmVsYXRlZCB0byB0aGVtCiB0ZXN0ICAgICAgICAgIFJ1biB1bml0IHRlc3RzCiBjb3ZlciAgICAgICAgIFJ1biB1bml0IHRlc3RzIGFuZCBnZW5lcmF0ZSBjb3ZlcmFnZSBmaWxlCiBmbXQgICAgICAgICAgIEZvcm1hdCB0aGUgY29kZSB3aXRoIGdvIHN0YW5kYXJkcwogdmV0ICAgICAgICAgICBDaGVjayBhbmQgcmVwb3J0IGxpa2VseSBtaXN0YWtlcyBpbiBwYWNrYWdlcwogbW9kIFtDT01NQU5EXSBDb21tYW5kcyBmb3IgZ28gbW9kdWxlIG1haW50ZW5hbmNlCiBiYXNoICAgICAgICAgIEVudGVyIGRvY2tlcnMgYmFzaCBpbnRlcmZhY2UKIHByZCAgICAgICAgICAgQnVpbGQgc2NyYXRjaCBwcm9kdWN0aW9uIGltYWdlCiBycHJkICAgICAgICAgIFJ1biBwcm9kdWN0aW9uIGltYWdlCiBjb2RlZ2VuICAgICAgIEdlbmVyYXRlIGNvZGUgZnJvbSB0aGUgb3BlbiBhcGkgZG9jdW1lbnRhdGlvbgpgYGAKCiMjIFJlLXJ1biBvbiB0aGUgZmx5ClRoZSBhcHAgdXNlcyBbUmVmbGV4XShodHRwczovL2dpdGh1Yi5jb20vY2VzcGFyZS9yZWZsZXgpIGZvciByZS1ydW5uaW5nIHlvdXIgYXBwIHdoZW4geW91IGNoYW5nZSB5b3VyIGNvZGUKCiMjIFByb2plY3QgTGF5b3V0ClRoZSBhcHAgZm9sbG93cyB0aGUgW1N0YW5kYXJkIEdvIFByb2plY3QgTGF5b3V0XShodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nLXN0YW5kYXJkcy9wcm9qZWN0LWxheW91dCkgc28gdGhlIGRpcmVjdG9yeSBzdHJ1Y3R1cmUgaW5jbHVkZXMgZm9sZGVycyBsaWtlIGBjbWRgLCBgaW50ZXJuYWxgLCBgcGtnYCBhbmQgYGJ1aWxkYC4gU3RhbmRhcmQgR28gUHJvamVjdCBMYXlvdXQgaXMgYW4gZW1lcmdpbmcgcHJvamVjdCBsYXlvdXQgYmFzZSBvbiB0aGUgR28gZWNvc3lzdGVtLgoKIyMgQVBJLUZpcnN0IGFwcHJvYWNoCkVkaXQgZmlsZSBgYXBpZG9jLnlhbWxgIGFuZCBnZW5lcmF0ZSBjb2RlIHVzaW5nIFtPQVBJLUNvZGVnZW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9kZWVwbWFwL29hcGktY29kZWdlbikKYGBgYmFzaAojIGdlbmVyYXRlIGNvZGUgZnJvbSBvcGVuIGFwaSB5YW1sIGZpbGUKLi9hcHAgY29kZWdlbgpgYGAKVGhlIGBjb2RlZ2VuYCBjb21tYW5kIHJlYWRzIGBhcGlkb2MueWFtbGAgYW5kIGdlbmVyYXRlcyB0d28gZmlsZXMgYHNlcnZlci5nb2AgYW5kIGB0eXBlcy5nb2AgdW5kZXIgYGludGVybmFsL2NvZGVnZW5gLiBgdHlwZXMuZ29gIGhhcyB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGRlZmZpbmVkIG9uIGBhcGlkb2MueWFtbGAgYW5kIHRoZSBgc2VydmVyLmdvYCBmaWxlIGhhcyB0aGUgc2VydmVyIHNpZGUgc2V0dXAgZm9yIHRoZSBBUEku
    description: "DECHO - Docker setup for Echo framework "
    created: "2020-03-07T20:22:05Z"
    updated: "2020-03-28T22:33:48Z"
    language: Go
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: albankora
    logo: https://avatars.githubusercontent.com/u/771020?v=4
    license: MIT
    repoEtag: '"648a4b6aa75744fff45239ffd201461ab29f6eaac9400ac5985e82b670d0e5ca"'
    repoLastModified: Sat, 28 Mar 2020 22:33:48 GMT
    readmeEtag: '"3c47d7d6c1a1d4caeb20928cb80e0d36f9547bb98a939971921c3b5b0ebc2bc0"'
    readmeLastModified: Sat, 28 Mar 2020 22:32:43 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/embraser01/typoas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBUeXBvYXMKClR5cG9hcyBpcyBhbiBPcGVuQVBJIDMuWCBnZW5lcmF0b3IgZm9yIFR5cGVzY3JpcHQuIEl0J3MgaW5zcGlyZWQgYnkgW29wZW5hcGktZ2VuZXJhdG9yXShodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gvKQpidXQgaXMgd3JpdHRlbiBpbiBUeXBlc2NyaXB0IGZvciBUeXBlc2NyaXB0LiBUaGUgZ2VuZXJhdG9yIHVzZXMgdGhlIFR5cGVzY3JpcHQgQVNUIHRvIGdlbmVyYXRlIGNvZGUgaW5zdGVhZCBvbiByZWxheWluZwpvbiB0ZW1wbGF0ZXMgd2hpY2ggYWxsb3dzIGJldHRlciBzY2hlbWFzIGRlZmluaXRpb25zIGFuZCBvdGhlciBjb29sIHN0dWZmLgoKTWFpbiBmZWF0dXJlcyBhcmU6CgotIEZ1bGx5IHR5cGVkCi0gU3VwcG9ydCBmb3IgYGFsbE9mYCwgYG9uZU9mYCBhbmQgYGFueU9mYCBzY2hlbWFzLgotIFJlZmVyZW5jZXMgYCRyZWZgIGhhbmRsaW5nICh3aXRoIGN5Y2xpYyByZWZzKQotIFVzZXMgYGZldGNoYCBhcGkgKGNhbiBiZSBjdXN0b21pemVkKQotIEF1dG9tYXRpY2FsbHkgY29udmVydCBgZm9ybWF0OiAnZGF0ZS10aW1lJ2AgdG8gSlMgYERhdGVgCi0gSGFuZGxlICoqQVBJIEtleSoqLCAqKkhUVFAgQ29uZmlnKiogYW5kICoqT0F1dGgyKio8c3VwPjE8L3N1cD4gYXV0aCBzZWN1cml0eSBzY2hlbWVzCi0gSlNEb2MgZm9yIHNjaGVtYXMgYW5kIG9wZXJhdGlvbnMKLSBBbmQgbW9yZS4uLgoKPiA8c3VwPjE8L3N1cD46IE9BdXRoMiBzY2hlbWUgZG9lcyBub3QgaGFuZGxlIGZsb3dzIHRvIHJldHJpZXZlIGFuIGBhY2Nlc3NUb2tlbmAuCj4gWW91IG5lZWQgdG8gcHJvdmlkZSB5b3VyIG93biBgYWNjZXNzVG9rZW5gIHRocm91Z2ggdGhlIGBwcm92aWRlci5nZXRDb25maWcoKWAgZnVuY3Rpb24uCgpUaGUgcHJvamVjdCBpcyBzcGxpdCBpbnRvIDMgcGFydHM6CgotIFtgQHR5cG9hcy9nZW5lcmF0b3JgXSguL3BhY2thZ2VzL3R5cG9hcy1nZW5lcmF0b3IpIGlzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIEFQSSBzcGVjaWZpYyBjb2RlLgotIFtgQHR5cG9hcy9jbGlgXSguL3BhY2thZ2VzL3R5cG9hcy1jbGkpIGlzIGEgQ0xJIGVudHJ5IHBvaW50IGJ1aWx0IG9uIHRvcCBvZiBgQHR5cG9hcy9nZW5lcmF0b3JgLgotIFtgQHR5cG9hcy9ydW50aW1lYF0oLi9wYWNrYWdlcy90eXBvYXMtcnVudGltZSkgaXMgdGhlIHBhY2thZ2UgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIGdlbmVyYXRlZCBjb2RlLgoKIyMgSW5zdGFsbGF0aW9uCgpJdCB3aWxsIGdlbmVyYXRlIGEgc2luZ2xlIFRTIGZpbGUgY29udGFpbmluZyBhbGwgdGhlIGNvZGUgc3BlY2lmaWMgdG8gdGhlIHVuZGVybHlpbmcgQVBJLgpUaGlzIGZpbGUgb25seSBoYXMgYSBzaW5nbGUgZGVwZW5kZW5jeSBvbiBgQHR5cG9hcy9ydW50aW1lYC4KKipZb3UgbmVlZCB0byBtYW51YWxseSoqIGFkZCBgQHR5cG9hcy9ydW50aW1lYCB0byB5b3VyIGBkZXBlbmRlbmNpZXNgLgpJdCBoYW5kbGVzIGNvbW1vbiB0aGluZ3MgbGlrZSBzZXJpYWxpemF0aW9uL2F1dGhlbnRpZmljYXRpb24KCiMjIFVzYWdlCgojIyMgVWVzIHRoZSBnZW5lcmF0b3IgZnJvbSB0aGUgQ0xJCgpZb3UgY2FuIGdlbmVyYXRlIHRoZSBUUyBjbGllbnQgZnJvbSB0aGUgc3BlYyBmcm9tIHRoZSBjb21tYW5kIGxpbmU6CgpgYGBiYXNoCnlhcm4gZGx4IEB0eXBvYXMvY2xpIGdlbmVyYXRlIC1pIG15LXNwZWMuanNvbiAtbiBNeUNsaWVudCAtbyBzcmMvY2xpZW50LnRzCm5weCBAdHlwb2FzL2NsaSBnZW5lcmF0ZSAtaSBteS1zcGVjLmpzb24gLW4gTXlDbGllbnQgLW8gc3JjL2NsaWVudC50cwpgYGAKCkhlcmUgaXMgYSBzaG9ydCBsaXN0IG9mIHN1cHBvcnRlZCBjb21tYW5kIGxpbmUgb3B0aW9uczoKCmBgYAogICAgLWksIC0taW5wdXQgW3BhdGgvdXJsXSAgICAgICAgIFBhdGggb3IgVVJMIHRvIHRoZSBPcGVuQVBJIEpTT04gc3BlY2lmaWNhdGlvbiAoeWFtbC9qc29uIGZvcm1hdCkKICAgIC1vLCAtLW91dHB1dCBbcGF0aF0gICAgICAgICAgICBQYXRoIHdoZXJlIHRvIHdyaXRlIHRoZSBnZW5lcmF0ZWQgVFMgZmlsZQogICAgLW4sIC0tbmFtZSAgICAgICAgICAgICAgICAgICAgIENsYXNzIG5hbWUgb2YgdGhlIGdlbmVyYXRlZCBjbGllbnQKICAgIC1lLC0tZ2VuZXJhdGUtZW51bXMgICAgICAgICAgICBHZW5lcmF0ZSBlbnVtcyBpbnN0ZWFkIG9mIGxpdGVyYWwgc3RyaW5nIHR5cGVzIHdoZXJlIHBvc3NpYmxlCiAgICAtLWpzLWRvYywgLS1uby1qcy1kb2MgICAgICAgICAgV2hldGhlciB0byBhZGQgSlMgRG9jIHRvIHRoZSBnZW5lcmF0ZWQgY29kZSAoZGVmYXVsdDogdHJ1ZSkKICAgIC0tb25seS10eXBlcyAgICAgICAgICAgICAgICAgICBVc2UgaXQgdG8gb25seSBnZW5lcmF0ZSB0eXBlcyBpbiAjY29tcG9uZW50cy9zY2hlbWFzLwogICAgLS12ZXJzaW9uICAgICAgICAgICAgICAgICAgICAgIE91dHB1dCB0aGUgdmVyc2lvbiBudW1iZXIKICAgIC1oLCAtLWhlbHAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5IGhlbHAgZm9yIGNvbW1hbmQKYGBgCgpvciB5b3UgY2FuIHVzZSBpdCBpbiBjb2RlOgoKYGBgdHMKaW1wb3J0IGNsaSBmcm9tICdAdHlwb2FzL2NsaSc7Cgphd2FpdCBjbGkucnVuKAogIFsKICAgICdnZW5lcmF0ZScsCiAgICAnLWknLAogICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9naXRodWIvcmVzdC1hcGktZGVzY3JpcHRpb24vbWFpbi9kZXNjcmlwdGlvbnMvYXBpLmdpdGh1Yi5jb20vYXBpLmdpdGh1Yi5jb20ueWFtbCcsCiAgICAnLW8nLAogICAgYC4vc3JjL2dpdGh1Yi50c2AsCiAgICAnLW4nLAogICAgYEdpdGh1YkNsaWVudGAsCiAgXSwKICB7CiAgICBzdGRpbjogcHJvY2Vzcy5zdGRpbiwKICAgIHN0ZG91dDogcHJvY2Vzcy5zdGRvdXQsCiAgICBzdGRlcnI6IHByb2Nlc3Muc3RkZXJyLAogIH0sCik7CmBgYAoKIyMjIFVzZSB0aGUgZ2VuZXJhdG9yIGZyb20gdGhlIEFQSQoKPiBUaGUgQVBJIGlzIHN0aWxsIGF0IGFuICoqYWxwaGEqKiBzdGFnZSwgc28gaXQgbWF5IGJyZWFrIGJldHdlZW4gbWlub3JzLgoKSXQgdXNlcyBgdHlwZXNjcmlwdGAgQVBJIHRvIGdlbmVyYXRlIHVzYWJsZSBjb2RlOgoKYGBgdHlwZXNjcmlwdAppbXBvcnQgeyByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IGNyZWF0ZVByaW50ZXIsIE5ld0xpbmVLaW5kLCBTb3VyY2VGaWxlIH0gZnJvbSAndHlwZXNjcmlwdCc7CmltcG9ydCB7IGdlbmVyYXRlQ2xpZW50LCBnZXRTdHJpbmdGcm9tU291cmNlRmlsZSB9IGZyb20gJ0B0eXBvYXMvZ2VuZXJhdG9yJzsKCmNvbnN0IHNwZWNzID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoJ3BhdGgvdG8vZ2l0aHViLW9wZW5hcGkuanNvbicsICd1dGY4JykpOwpjb25zdCBzcmMgPSBnZW5lcmF0ZUNsaWVudChzcGVjcywgJ0dpdGh1YkNsaWVudCcpOwpjb25zdCBkYXRhID0gZ2V0U3RyaW5nRnJvbVNvdXJjZUZpbGUoc3JjKTsKCndyaXRlRmlsZVN5bmMoJy4vc3JjL2NsaWVudC50cycsIGRhdGEsICd1dGY4Jyk7CmBgYAoKIyMjIFVzZSB0aGUgZ2VuZXJhdGVkIGNvZGUKCk9uY2UgdGhlIGZpbGUgaXMgZ2VuZXJhdGVkIHlvdSdsbCBiZSBhYmxlIHRvIHVzZSBpdCBsaWtlIHRoaXM6CgpgYGB0eXBlc2NyaXB0CmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJzsKaW1wb3J0IHsgU2VydmVyQ29uZmlndXJhdGlvbiB9IGZyb20gJ0B0eXBvYXMvcnVudGltZSc7CmltcG9ydCB7IEdpdGh1YkNsaWVudCB9IGZyb20gJy4vY2xpZW50JzsKCi8vIEluamVjdCBmZXRjaCBwb2x5ZmlsbCBpbnRvIE5vZGVKUyBlbnYuCmlmICghZ2xvYmFsVGhpcy5mZXRjaCkgewogIC8vIEB0cy1pZ25vcmUKICBnbG9iYWxUaGlzLmZldGNoID0gZmV0Y2g7Cn0KCmNvbnN0IGNsaWVudCA9IG5ldyBHaXRodWJDbGllbnQoCiAgbmV3IFNlcnZlckNvbmZpZ3VyYXRpb24oJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20nLCB7fSksCik7CgpjbGllbnQKICAucHVsbHNMaXN0KHsKICAgIHJlcG86ICd0eXBvYXMnLAogICAgb3duZXI6ICdlbWJyYXNlcjAxJywKICB9KQogIC50aGVuKChsaXN0KSA9PiBjb25zb2xlLmxvZygnTGlzdCBvZiBQUnMnLCBsaXN0KSkKICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcignRXJyb3Igd2hpbGUgZ2V0dGluZyBQUnMnLCBlcnIpKTsKYGBgCgojIyBFeGFtcGxlcwoKWW91IGNhbiBmaW5kIGV4YW1wbGVzIGluIHRoZSBbYGV4YW1wbGVzYF0oLi9leGFtcGxlcykgZm9sZGVyLgoKIyMgTm90ZXMKCkhlcmUgaXMgc29tZSBub3RlcyBvbiBzb21lIGtub3duIGlzc3Vlcy4KCiMjIyBQYXJhbWV0ZXJzIHNlcmlhbGl6YXRpb24KCl9UeXBvYXNfIGhhcyBwYXJ0aWFsIHN1cHBvcnQgZm9yIHNlcmlhbGl6YXRpb24gc3BlY2lmaWVkIGhlcmU6IGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzL3NwZWNpZmljYXRpb24vc2VyaWFsaXphdGlvbi8KCi0gSXQgKipkb2VzKiogc3VwcG9ydCBhcnJheSBzZXJpYWxpemF0aW9uIGZvciAqKnF1ZXJ5KiouCi0gSXQgKipkb2VzIE5PVCoqIHN1cHBvcnQgc2VyaWFsaXphdGlvbiBmb3IgKipwYXRoKiogcGFyYW1ldGVycyB3aXRoIGBzdHlsZWAgYGxhYmVsYCBvciBgbWF0cml4YC4KLSBJdCAqKmRvZXMgTk9UKiogc3VwcG9ydCBzZXJpYWxpemF0aW9uIGZvciAqKnF1ZXJ5KiogcGFyYW1ldGVycyB3aXRoIG5lc3RlZCBvYmplY3RzLiBJdCB3aWxsIGJlIEpTT04uc3RyaW5naWZ5Ci0gSXQgKipkb2VzIE5PVCoqIHN1cHBvcnQgc2VyaWFsaXphdGlvbiBmb3IgKipoZWFkZXJzKiogb3IgKipjb29raWUqKiBwYXJhbWV0ZXJzLgoKT24gcXVlcnkgc2VyaWFsaXphdGlvbiwgdGhlcmUgY2FuIG9ubHkgYmUgb25lIHN0eWxlIGZvciBhIGZ1bGwgb3BlcmF0aW9uLiBUaGUgZmlyc3QgcXVlcnkgcGFyYW0gd2lsbCBzZXQgdGhlIHN0eWxlIGZvcgp0aGUgd2hvbGUgb3BlcmF0aW9uLgoKIyMgQ29udHJpYnV0aW5nCgpQdWxsIHJlcXVlc3RzIGFyZSB3ZWxjb21lLiBGb3IgbWFqb3IgY2hhbmdlcywgcGxlYXNlIG9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyB3aGF0IHlvdSB3b3VsZCBsaWtlIHRvIGNoYW5nZS4KCiMjIExpY2Vuc2UKCltNSVRdKGh0dHBzOi8vY2hvb3NlYWxpY2Vuc2UuY29tL2xpY2Vuc2VzL21pdC8pCg==
    readmeEtag: '"feb8677887b5bbadd9012e4403b1e3c6038a0a629b95a16ec320e42f4e230b3d"'
    readmeLastModified: Fri, 11 Feb 2022 11:04:44 GMT
    description: Open API (OAS 3.0) Typescript generator
    created: "2021-03-22T22:01:11Z"
    updated: "2022-04-15T23:10:56Z"
    language: TypeScript
    archived: false
    stars: 2
    watchers: 2
    forks: 3
    owner: Embraser01
    logo: https://avatars.githubusercontent.com/u/8802277?v=4
    license: MIT
    repoEtag: '"c0f097a6d6c2cd9361f9ace936ff8a081f471673fa2e0d895de2690d3bcb59b2"'
    repoLastModified: Fri, 15 Apr 2022 23:10:56 GMT
  foundInMaster: true
  category:
    - Sdk
    - Parsers
- source: openapi3 tags
  repository: https://github.com/sensiblewood/swaggerui-webpack-boilerplate
  v3: true
  repositoryMetadata:
    base64Readme: >-
      T3ZlcnZpZXcKPT09CgpUaGlzIGlzIGJvaWxlcnBsYXRlIHByb2plY3QgZm9yIHJ1bm5pbmcgU3dhZ2dlciBVSSB3aXRoIFdlYnBhY2suIEl0IGV4aXN0cyBiZWNhdXNlOgoKKiBJIHdhbnRlZCBhbiBlYXN5IHdheSBvZiBzbGFtbWluZyBtdWx0aXBsZSBBUEkgc3BlY2lmaWNhdGlvbnMgaW50byBhIFN3YWdnZXIgVUktYmFzZWQgcHJvamVjdCBhbmQgcnVubmluZyBpdCBsb2NhbGx5LgoqIEkgZGlkbid0IHdhbnRlZCB0byBtYW51YWxseSBjaGFuZ2UgdGhlIEphdmFzY3JpcHQgZXZlcnkgdGltZSBJIGFkZGVkIGFuIEFQSSBzcGVjaWZpY2F0aW9uLgoqIFVzaW5nIE5QTS9XZWJwYWNrIG1lYW5zIG15IGRlcGVuZGVuY2llcyBjYW4gYmUga2VwdCB1cC10by1kYXRlIGVhc2lseS4KClN1cmUgdGhlcmUncyBvdGhlciB3YXlzIG9mIGRvaW5nIHRoaXMsIGJ1dCBzdGlsbC4uLgoKflRoZXJlJ3MgYWxzbyBhIFJlZG9jIHBhZ2UgLSBhbHRob3VnaCB0aGlzIGlzIENETi1iYXNlZCBhcyBJIGFtIGxhenkufiBJIHJlbW92ZWQgdGhlIFJlZG9jIHZlcnNpb24gZm9yIHRoZSB0aW1lIGJlaW5nLgoKVXNhZ2UKPT09CgpUbyB1c2UgdGhpcyBwcm9qZWN0IGNsb25lIGFuZCBjZCBpbnRvIGl0IHRoZW46CgpgYGBiYXNoCm5wbSBpCmNwIFt5b3VyIFN3YWdnZXIvT3BlbkFQSSBzcGVjaWZpY2F0aW9ucyBhcyBZQU1MXSBzcmMvc3BlY3MKbnBtIHJ1biBkZXYKYGBgCgo6dGh1bWJzdXA6CgpJbXByb3ZlbWVudHMKPT09CgoqIFsgXSBQYXJhbWV0ZXJpc2UgQVBJIHNwZWNpZmljYXRpb24gZG9jdW1lbnQgbmFtZS4KKiBbIF0gUmVmYWN0b3IgYHNjcmlwdHMvcmV3cml0ZS11cmxzLmpzYCBhcyBhIFdlYnBhY2sgcGx1Z2luLgoK
    description: >-
      Boilerplate for spinning up local Swagger UI server, orchestrated through
      Webpack
    created: "2018-10-02T09:41:56Z"
    updated: "2021-02-15T13:50:01Z"
    language: JavaScript
    archived: false
    stars: 1
    watchers: 1
    forks: 1
    owner: SensibleWood
    logo: https://avatars.githubusercontent.com/u/2420069?v=4
    repoEtag: '"a8c217fa18802ca5a51cb9dc47df9a80513638043095d296bbca5ec939080bfe"'
    repoLastModified: Mon, 15 Feb 2021 13:50:01 GMT
    readmeEtag: '"7dec131912ea8cb4269b8a40a77019310a7b529e86245156634f15ba471fceb1"'
    readmeLastModified: Tue, 16 Oct 2018 11:51:37 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/fabidick22/voting-sys-rest-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBWb3RpbmcgU3lzdGVtIFJFU1QgQVBJCiFbQ0ktdm90aW5nLXN5c10oaHR0cHM6Ly9naXRodWIuY29tL2ZhYmlkaWNrMjIvdm90aW5nLXN5cy1yZXN0LWFwaS93b3JrZmxvd3MvQ0ktdm90aW5nLXN5cy9iYWRnZS5zdmcpCgpBIFJFU1QgQVBJIGZvciB2b3Rpbmcgc3lzdGVtCgoqKkNoYXJhY3RlcmlzdGljOioqCi0gTVZDIGFzIGEgZGVzaWduIHBhdHRlcm4KLSBCYXNpYyB0b2tlbi1iYXNlZCBhdXRoZW50aWNhdGlvbiAoZG8gbm90IHVzZSB0aGlzIG1ldGhvZCwgaXQgaXMganVzdCBhbiBleGFtcGxlKQoKIyMjIE1haW4gdG9vbHMgdXNlZAotIFtFeHByZXNzXShodHRwczovL2V4cHJlc3Nqcy5jb20vKQotIFtNb25nb2RiXShodHRwczovL3d3dy5tb25nb2RiLmNvbSkKLSBbTW9uZ29vc2VdKCkKLSBbU3dhZ2dlclVJXShodHRwczovL2dpdGh1Yi5jb20vc2NvdHRpZTE5ODQvc3dhZ2dlci11aS1leHByZXNzKQotIFtNb3JnYW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9leHByZXNzanMvbW9yZ2FuKQotIFtEb2NrZXJdKGh0dHBzOi8vd3d3LmRvY2tlci5jb20vKQoKIyMgR2V0dGluZyBTdGFydGVkCkNsb25lIHRoaXMgcmVwb3NpdG9yeSBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXMKYGBgCj4gZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmZhYmlkaWNrMjIvdm90aW5nLXN5cy1yZXN0LWFwaS5naXQKPiBjZCB2b3Rpbmctc3lzLXJlc3QtYXBpCgo+IG5wbSBpbnN0YWxsCmBgYAojIyMjIFJ1biBkZXZlbG9wbWVudCB3aXRoIG5vZGVtb24KYGBgCj4gbnBtIHJ1biAgc3RhcnQKYGBgCgojIyMjIEJ1aWxkIGFuZCBydW4gZm9yIHByb2R1Y3Rpb24gCmBgYAo+IG5wbSBydW4gc2VydmVyCmBgYAoKIyMjIyBUZXN0cyAoTm90IGltcGxlbWVudGVkIHlldCkKVW5pdCB0ZXN0czoKYGBgCj4gbnBtIHJ1biB0ZXN0OnNwZWNzCmBgYAoKQmxhY2stYm94IGVuZC10by1lbmQgdGVzdHM6CmBgYApucG0gcnVuIHRlc3Q6ZTJlCmBgYAoKCiMjIyBEZXBsb3kgQXBwCk1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgYC5lbnZgIGZpbGUgeW91IGNhbiBzZWUgdGhlIHRlbXBsYXRlIGluIHRoZSBgLmVudi50ZW1wbGF0ZWAgZmlsZQpfRXhhbXBsZTpfCmBgYApOT0RFX0VOVj1kZXZlbG9wbWVudApEQl9IT1NUPWRiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRvIGNvbm5lY3QgaW4gZG9ja2VyLWNvbXBvc2UpCkRCX1VTRVI9cm9vdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0YWJhc2UgdXNlciBmb3IgdGhlIGFwcCkKREJfUEFTUz1zdXBlclBhc3N3ZCAgICAgICAgICAgICAgICAgICAgIChkYXRhYmFzZSBwYXNzd29yZCBmb3IgdGhlIGFwcCkKU0VDUkVUX1RPS0VOPSIiICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRpb25hbCBmb3IgdGhlIGRldiBlbnZpcm9ubWVudCkKTU9OR09fSU5JVERCX1JPT1RfVVNFUk5BTUU9cm9vdCAgICAgICAgIChmb3IgbW9uZ29EQikKTU9OR09fSU5JVERCX1JPT1RfUEFTU1dPUkQ9c3VwZXJQYXNzd2QgIChmb3IgbW9uZ29EQikKYGBgCkZyb20gdGhlIHJvb3QgZGlyZWN0b3J5OgpgYGAKIyBCdWlsZCB5b3VyIGRvY2tlcgo+IGRvY2tlci1jb21wb3NlIHVwCmBgYAoKKipTdGFydCBsb2NhbCAoZGV2KSBhcHAgYW5kIGRlcGxveSBtb25nbyBpbiBEb2NrZXIqKgpgYGAKIyBCdWlsZCB5b3VyIGRvY2tlcgo+IGRvY2tlci1jb21wb3NlIHVwIGRiCj4gbnBtIHN0YXJ0ICMgZGV2IGVudmlyb25tZW50CmBgYAoKIyMjIEZ1bmN0aW9uYWxpdHkgdGVzdApBZnRlciBoYXZpbmcgdGhlIGRhdGFiYXNlIGFuZCB5b3VyIEFQSSBydW5uaW5nLCB5b3UgY2FuIHRlc3QgdGhlIGZ1bmN0aW9uYWxpdGllcyBmcm9tIHRoZSBVSSBwcm92aWRlZCBieSBzd2FnZ2VyLVVJLgpZb3UgbXVzdCBiZWFyIGluIG1pbmQgdGhhdCBmaXJzdCB5b3UgaGF2ZSB0byBjcmVhdGUgYSB1c2VyIGZyb20gdGhpcyBlbmRwb2ludCAoYC91c2Vycy9zaWduVXBgKSB0aGVuIHlvdSB3aWxsIGhhdmUgYSB0b2tlbiB0aGF0IHlvdSBtdXN0IHNldCBpbiB0aGUgc3dhZ2dlciBhdXRob3JpemVyIHRvIGJlIGFibGUgdG8gdXNlIHRoZSBvdGhlciBlbmRwb2l0cwoKIyMgQVBJIGRvY3VtZW50YXRpb24KQ2hlY2tvdXQgYGxvY2FsaG9zdDozMDAwL2RvY3NgLgpCYXNlIHBhdGg6IGBsb2NhbGhvc3Q6MzAwMC9hcGkvdjFgCgojIyBNb2R1bGUgc3RydWN0dXJlCmBgYAouCuKUnOKUgOKUgCBhcHAuanMK4pSc4pSA4pSAIGNvbmZpZwrilJzilIDilIAgY29uZmlnLmpzCuKUnOKUgOKUgCBjb250cm9sbGVycwrilJzilIDilIAgZG9ja2VyLWNvbXBvc2UueW1sCuKUnOKUgOKUgCBEb2NrZXJmaWxlCuKUnOKUgOKUgCBtaWRkbGV3YXJlcwrilJzilIDilIAgbW9kZWxzCuKUnOKUgOKUgCBub2RlX21vZHVsZXMK4pSc4pSA4pSAIHBhY2thZ2UuanNvbgrilJzilIDilIAgcGFja2FnZS1sb2NrLmpzb24K4pSc4pSA4pSAIFJFQURNRS5tZArilJzilIDilIAgcm91dGVzCuKUnOKUgOKUgCB0ZXN0CuKUnOKUgOKUgCB1dGlscwrilJTilIDilIAgdm90aW5nT0FTLnlhbWwKCjggZGlyZWN0b3JpZXMsIDggZmlsZXMKYGBgCiMjIyBSZWZlcmVuY2VzOgotIGh0dHBzOi8vbWVkaXVtLmNvbS93b2xveC9kb2N1bWVudGluZy1hLW5vZGVqcy1yZXN0LWFwaS13aXRoLW9wZW5hcGktMy1zd2FnZ2VyLTVkZWVlOWY1MDQyMAotIGh0dHBzOi8vdHdtLm1lL2NvcnJlY3Qtd2F5LXRvLXVzZS1tb25nb29zZS8K
    description: Base template to create a REST-API
    created: "2020-03-30T14:06:01Z"
    updated: "2020-08-31T16:00:04Z"
    language: JavaScript
    archived: false
    stars: 1
    watchers: 1
    forks: 1
    owner: fabidick22
    logo: https://avatars.githubusercontent.com/u/8176821?v=4
    license: MIT
    repoEtag: '"6753459947885a515e4357eb04179ef6b8610ff1fe5af07454defca1a135a50f"'
    repoLastModified: Mon, 31 Aug 2020 16:00:04 GMT
    readmeEtag: '"fa9216017b052dab655c5d5493fc8481306a668a9e1cdbce97627678c95e869a"'
    readmeLastModified: Mon, 31 Aug 2020 15:59:59 GMT
  foundInMaster: true
  category:
    - Testing
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/aasaam/openapi-preview
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGRpdiBhbGlnbj0iY2VudGVyIj4KICA8aDE+CiAgICBPcGVuQVBJIFByZXZpZXcKICA8L2gxPgogIDxwPgogICAgUHJldmlldyBPcGVuQVBJIFNwZWMgdXNpbmcgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWkiPlN3YWdnZXIgVUk8L2E+CiAgPC9wPgogIDxwPgogICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Fhc2FhbS9vcGVuYXBpLXByZXZpZXciPgogICAgICA8aW1nIGFsdD0iR2l0SHViIHJlcG8gc2l6ZSIgc3JjPSJodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi9yZXBvLXNpemUvYWFzYWFtL29wZW5hcGktcHJldmlldyI+CiAgICA8L2E+CiAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYWFzYWFtL29wZW5hcGktcHJldmlldy9ibG9iL21hc3Rlci9MSUNFTlNFIj4KICAgICAgPGltZyBhbHQ9IkxpY2Vuc2UiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGljZW5zZS9hYXNhYW0vb3BlbmFwaS1wcmV2aWV3Ij4KICAgIDwvYT4KICA8L3A+CjwvZGl2PgoKPGRpdj4KICA8cCBhbGlnbj0iY2VudGVyIj4KICAgIDxpbWcgYWx0PSJhYXNhYW0gc29mdHdhcmUgZGV2ZWxvcG1lbnQgZ3JvdXAiIHdpZHRoPSI2NCIgc3JjPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYWFzYWFtL2luZm9ybWF0aW9uL21hc3Rlci9sb2dvL2Fhc2FhbS5zdmciPgogICAgPGJyIC8+CiAgICBhYXNhYW0gc29mdHdhcmUgZGV2ZWxvcG1lbnQgZ3JvdXAKICA8L3A+CjwvZGl2Pgo=
    description: Preview OpenAPI Spec using Swagger UI
    created: "2019-10-13T20:10:24Z"
    updated: "2021-03-03T23:48:04Z"
    language: HTML
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: aasaam
    logo: https://avatars.githubusercontent.com/u/10144065?v=4
    license: MIT
    repoEtag: '"46235973c993a8f1ff7ad838f217aa2bf41289ce00cbab7f10b7d5176e78d038"'
    repoLastModified: Wed, 03 Mar 2021 23:48:04 GMT
    readmeEtag: '"45f391e224f27ea6d8324fd304e94fbe719d60e6a8bccfe701a0f0d5e248819b"'
    readmeLastModified: Wed, 03 Mar 2021 23:47:43 GMT
  foundInMaster: true
  category:
    - Documentation
    - Testing
- source: openapi3 tags
  repository: https://github.com/b1a9id/open-api-sample
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTYW1wbGUgZm9yIHNwcmluZ2RvYy1vcGVuYXBpCjxhIGhyZWY9Imh0dHBzOi8vdHJhY2tnaXQuY29tIj4KPGltZyBzcmM9Imh0dHBzOi8vc2Z5LmN4L3UveGRmIiBhbHQ9InRyYWNrZ2l0LXZpZXdzIiAvPgo8L2E+CgojIyBUcnkgaXQKUnVuIEFwcApgYGAKJCAuL2dyYWRsZXcgY2xlYW4gYm9vdFJ1bgpgYGAKClBhdGhzCmBgYApHRVQgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS92My9hcGktZG9jcy8KICBPcGVuQVBJIGRvY3VtZW50YXRpb24gaW4gSlNPTiBmb3JtYXQKICAKR0VUIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjMvYXBpLWRvY3MueWFtbAogIE9wZW5BUEkgZG9jdW1lbnRhdGlvbiBpbiBZQU1MIGZvcm1hdAogIApHRVQgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9zd2FnZ2VyLXVpLmh0bWwKICBTd2FnZ2VyIFVJIEhUTUwgZG9jdW1lbnRhdGlvbgpgYGAK
    description: Sample for springdoc-openapi
    created: "2020-09-13T11:45:33Z"
    updated: "2020-10-25T07:58:30Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: b1a9id
    logo: https://avatars.githubusercontent.com/u/19252181?v=4
    repoEtag: '"b13f61456b2995d0232c7f86920dec05e383d955dd60cfc0115bfd35ef17145e"'
    repoLastModified: Sun, 25 Oct 2020 07:58:30 GMT
    readmeEtag: '"bd61980a6934a75b08a79fd332db4297024f2f83e32dd4851539855ed38f7640"'
    readmeLastModified: Sun, 25 Oct 2020 07:58:27 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/zemanlx/openapi-spec-validator
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBEb2NrZXIgaW1hZ2UgZm9yIG9wZWFuYXBpLXNwZWMtdmFsaWRhdG9yCgpJbWFnZXMgYXJlIGJhc2VkIG9uIFB5dGhvbiBvbiBBbHBpbmUgYW5kIGNvbnRhaW5zIG9ubHkgYWRkZWQgW29wZW5hcGktc3BlYy12YWxpZGF0b3JdKGh0dHBzOi8vZ2l0aHViLmNvbS9wMWMydS9vcGVuYXBpLXNwZWMtdmFsaWRhdG9yKS4KClRhZ3MgYXJlIGNvcHlpbmcgdmFsaWRhdG9yIHZlcnNpb24uCgojIyBVc2FnZQoKTGV0cyBzYXkgdGhhdCB5b3VyIE9wZW5BUEkgc3BlY2lmaWNhdGlvbiBpcyBpbiB5b3VyIGN1cnJlbnQgZm9sZGVyIGluIGZvbGRlciBgc3BlY2AgaW4gZmlsZSBgb3BlbmFwaS55YW1sYC4gVG8gdmFsaWRhdGUgaXQgcnVuCgpgYGBiYXNoCmRvY2tlciBydW4gXAogIC0tcm0gXAogIC0tdm9sdW1lICR7UFdEfS9zcGVjOi9zcGVjIFwKICB6ZW1hbmx4L29wZW5hcGktc3BlYy12YWxpZGF0b3I6MC4yLjAgXAogIC9zcGVjL29wZW5hcGkueWFtbApgYGAK
    description: Docker image for opeanapi-spec-validator
    created: "2018-05-18T12:48:32Z"
    updated: "2018-05-18T14:14:49Z"
    language: Shell
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: zemanlx
    logo: https://avatars.githubusercontent.com/u/18702153?v=4
    license: MIT
    repoEtag: '"676a009e103dd497976b341fa9fb208f24f3e9e4900fb8ef9ae2b4d0bfd10af4"'
    repoLastModified: Fri, 18 May 2018 14:14:49 GMT
    readmeEtag: '"c117aa1e67d701914153d91ddf3527e7feb7fc207291e30218a8823548981406"'
    readmeLastModified: Fri, 18 May 2018 12:55:41 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/senor-artemisio/tendershins
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyB0ZW5kZXJzaGlucwoKV3JhcHBlciBmb3Igc2hpbnMgZ2VuZXJhdG9yczoKCiogW1dpZGRlcnNoaW5zXShodHRwczovL2dpdGh1Yi5jb20vTWVybWFkZS93aWRkZXJzaGlucykKKiBbU2hpbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL3NoaW5zKQoKR2VuZXJhdGVzIEhUTUwgZG9jdW1lbnRhdGlvbiBmcm9tIE9wZW5BUEkgLyBTd2FnZ2VyIC8gQXN5bmNBUEkgLyBTZW1vYXNhIGRlZmluaXRpb24uCgojIyBUbyBpbnN0YWxsCgpDbG9uZSB0aGUgZ2l0IHJlcG9zaXRvcnksIG9yIHVzZSBucG0gaW5zdGFsbApgYGAKbnBtIGluc3RhbGwgdGVuZGVyc2hpbnMgLS1zYXZlCmBgYAoKIyMgVXNhZ2UKClRvIGdlbmVyYXRlIGRvY3VtZW50YXRpb24gY3JlYXRlIGEgc3BlY2lmaWNhdGlvbiBmaWxlIGluIHRoZSBzdXBwb3J0ZWQgZm9ybWF0IGFuZCBydW4gdGVuZGVyc2hpbnM6CgpgYGAKbnB4IHRlbmRlcnNoaW5zIDxzcGVjX2ZpbGU+IDx0YXJnZV9wYXRoPiBbbG9nb19wYXRoXQpgYGAKCkV4YW1wbGVzIG9mIHNwZWNpZmljYXRpb24gZmlsZXMgc2VlIGluIFtPcGVuQVBJIHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL3RyZWUvbWFzdGVyL2V4YW1wbGVzL3YzLjApLiAKCg==
    description: Wrapper for shins documentation generators
    created: "2019-05-23T21:24:25Z"
    updated: "2019-07-25T08:52:07Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: senor-artemisio
    logo: https://avatars.githubusercontent.com/u/1178789?v=4
    license: MIT
    repoEtag: '"559a0f381674aabb541025c9945e0b6e0c90378e4b7f3e7aef40e631f820048f"'
    repoLastModified: Thu, 25 Jul 2019 08:52:07 GMT
    readmeEtag: '"67143ebe390bed87cc34bcf1a23431c12efa8e4016277bb22a94adfb795281ca"'
    readmeLastModified: Thu, 25 Jul 2019 08:52:04 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/zweidenker/dockerengine
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBEb2NrZXJFbmdpbmUKClRoaXMgaXMgaW1wbGVtZW50ZWQgdXNpbmcgRG9ja2VyIEVuZ2luZSBBUEkgeWFtbCBmaWxlIGZyb20KCmh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2VuZ2luZS9hcGkvdjEuMzcvIwoKY29udmVydGVkIHRoZSBmaWxlIHRvIGpzb24gd2l0aAoKJCBhbGlhcyB5YW1sLXRvLWpzb249J2RvY2tlciBydW4gLWkgaW5neS95YW1sLXRvLWpzb24nCiQgY2F0IHN3YWdnZXIueWFtbCB8IHlhbWwtdG8tanNvbiB8IGpxIC4gPiBzd2FnZ2VyLmpzb24KCmFuZCBjb252ZXJ0ZWQgaXQgZnJvbSBzd2FnZ2VyIDIuMCB0byBvcGVuYXBpIDMuMC4wIHdpdGgKCmh0dHBzOi8vb3BlbmFwaS1jb252ZXJ0ZXIuaGVyb2t1YXBwLmNvbS8KCgoK
    description: Implementation of DockerEngine API
    created: "2018-07-07T13:04:59Z"
    updated: "2018-10-09T20:32:57Z"
    language: Smalltalk
    archived: false
    stars: 0
    watchers: 0
    forks: 1
    owner: zweidenker
    logo: https://avatars.githubusercontent.com/u/20300491?v=4
    repoEtag: '"a2ab866c7f157cb8fa5d9b8f9dcaf6d55a9610cf69e64aa7da953aa8a53a27b3"'
    repoLastModified: Tue, 09 Oct 2018 20:32:57 GMT
    readmeEtag: '"8a972b448b1e69f4b7e521c7718106003b5246726156e0c0a11099037b7a23e8"'
    readmeLastModified: Thu, 13 Sep 2018 12:39:27 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/lams-epfl/gen-rest
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzZWFtLXRvLW9wZW5hcGkKClRoaXMgcmVwbyBob3N0cyBhIHRvb2wgdGhhdCB0YWtlcyBzZXJ2aWNlIG1vZGVscyBjcmVhdGVkIHdpdGggW1NlYW1DQURdKGh0dHA6Ly9sYW1zLmVwZmwuY2gvc2VhbWNhZC8pIGFuZCBnZW5lcmF0ZXMgYW4gT3BlbkFQSSBzcGVjaWZpY2F0aW9uIGZyb20gdGhlIHdlYiBzZXJ2aWNlcyBhbm5vdGF0aW9ucyBvZiB0aGUgc2VydmljZSBtb2RlbHMuCgoK
    description: >-
      A tool to generate automatically OpenAPI specification from a service
      model
    created: "2018-02-20T14:29:24Z"
    updated: "2019-02-27T15:15:18Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 2
    owner: lams-epfl
    logo: https://avatars.githubusercontent.com/u/34246217?v=4
    repoEtag: '"b6e7798e2521cb266866d7a8f956c58a517424d76e264901cb449e42a82ec7d8"'
    repoLastModified: Wed, 27 Feb 2019 15:15:18 GMT
    readmeEtag: '"4be2c8bfa0b685e20b46b83081f2cdf66d34233a3e4cc1831700d82d3f6c35d1"'
    readmeLastModified: Thu, 10 Jan 2019 17:06:05 GMT
  foundInMaster: true
  category:
    - Testing
    - Parsers
- source: openapi3 tags
  repository: https://github.com/emm035/openapi-tooling
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLXRvb2xpbmcgIVtCdWlsZF0oaHR0cHM6Ly9naXRodWIuY29tL2VtbTAzNS9vcGVuYXBpLXRvb2xpbmcvd29ya2Zsb3dzL0J1aWxkL2JhZGdlLnN2ZykK
    description: Java tooling for OpenAPI
    created: "2020-07-10T04:02:43Z"
    updated: "2021-10-07T00:06:15Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: emm035
    logo: https://avatars.githubusercontent.com/u/13439972?v=4
    license: MIT
    repoEtag: '"db3e359f7ddf7c1002ad20968f22f25fac9a9670098960979bfe7b6988a687cb"'
    repoLastModified: Thu, 07 Oct 2021 00:06:15 GMT
    readmeEtag: '"6fc8614139ee8b1a98f327752b08334b9f332f823a283eccd70563566977aa7a"'
    readmeLastModified: Wed, 19 Jan 2022 14:35:03 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Sdk
- source: openapi3 tags
  repository: https://github.com/lagp0310/openapi-students
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTdHVkZW50cyBPcGVuQVBJLgoKIyMgV2h5IGEgU3RhbmRhcmQ/CgpEZXNpZ24gYW5kIGRldmVsb3AgYSBSRVNUZnVsIEFQSSBpcyBub3QgaGFyZCwgYnV0IG1hbnRhaW5pbmcgaXQsIGNyZWF0aW5nIGRvY3VtZW50YXRpb24gZm9yIG90aGVyIHBlb3BsZSBvbiB5b3VyIHRlYW0gdG8gdW5kZXJzdGFuZCB3aGF0IGl0IGRvZXMsIGl0IGlzLiBCeSB1c2luZyBhIFN0YW5kYXJkLCBzdWNoIGFzIFtPcGVuQVBJIChhLmsuYSBTd2FnZ2VyKV0oaHR0cHM6Ly9zd2FnZ2VyLmlvLyksIHlvdSBhcmUgZm9sbG93aW5nIHNvbWUgY29udmVudGlvbnMgYW5kIGNvbW11bml0eSBiZXN0IHByYWN0aWNlcyB3aGVuIGRlc2lnbmluZyBSRVNUZnVsIEFQSXMuIAoKIyMgV2h5IHVzaW5nIE9wZW5BUEkgU3RhbmRhcmQ/CgpVc2luZyBbT3BlbkFQSSBTdGFuZGFyZF0oaHR0cHM6Ly9zd2FnZ2VyLmlvLyksIHlvdSBjYW4gZGV2ZWxvcCBhIFJFU1RmdWwgQVBJIGJ5IGRlZmluaW5nIGFuIE9wZW5BUEkgZG9jdW1lbnQgKEpTT04gb3IgWUFNTCBzeW50YXgpIGFuZCB5b3UgY2FuIGdlbmVyYXRlIGRvY3VtZW50YXRpb24gYmFzZWQgb24gaXQsIHNvIHlvdSdyZSB3cml0aW5nIGRvY3VtZW50YXRpb24gZm9yIHlvdXIgQVBJIGF0IHRoZSBzYW1lIHRpbWUgeW91J3JlIGRldmVsb3BpbmcgaXQuIFRoaXMgd2F5LCBBUEkgZGV2ZWxvcG1lbnQgaXMgbWFkZSBlYXNpZXIsIGNyZWF0aW5nIHRoZSBkb2N1bWVudGF0aW9uIGF1dG9tYXRpY2FsbHkgc28geW91ciB0ZWFtIGNhbiByZWFkIGl0IGFuZCB1bmRlcnN0YW5kIGhvdyB0byBjb25zdW1lIGl0LgpBbm90aGVyIGFkdmFudGFnZSBvZiBbT3BlbkFQSV0oaHR0cHM6Ly9zd2FnZ2VyLmlvLykgaXMgdGhhdCB0aGV5IHByb3ZpZGUgc29tZSB1c2VmdWwgdG9vbHMgZm9yIFJFU1RmdWwgQVBJIGRldmVsb3BtZW50IHN1Y2ggYXM6IAotIFtBUEkgRGVzaWduIHdpdGggQXV0b21hdGljIERvY3VtZW50YXRpb24gQ3JlYXRpb24gYW5kIFZpc3VhbGl6YXRpb24uXShodHRwczovL3N3YWdnZXIuaW8vdG9vbHMvc3dhZ2dlci1lZGl0b3IvKS4KLSBbU2VydmVyLVNpZGUgQ29kZSBHZW5lcmF0aW9uLl0oaHR0cHM6Ly9zd2FnZ2VyLmlvL3Rvb2xzL3N3YWdnZXItY29kZWdlbi8pIAotIFtDbGllbnQtU2lkZSBDb2RlIEdlbmVyYXRpb24uXShodHRwczovL3N3YWdnZXIuaW8vdG9vbHMvc3dhZ2dlci1jb2RlZ2VuLykKCiMjIEdldHRpbmcgU3RhcnRlZC4KClRoZSBBUEkgd2FzIGRldmVsb3BlZCB1c2luZyBbU3dhZ2dlckh1Yl0oaHR0cHM6Ly9hcHAuc3dhZ2dlcmh1Yi5jb20vKS4gSXQncyBwdWJsaWMgYW5kIGF2YWlsYWJsZSBhdCBbU3R1ZGVudHMgQVBJLl0oaHR0cHM6Ly9hcHAuc3dhZ2dlcmh1Yi5jb20vYXBpcy9sYWdwMDMxMC9zdHVkZW50cy1hcGkvMS4wLjApCgojIyMgRXhhbXBsZS4KCkknbGwgc2hvdyBob3cgdG8gZ2V0IGEgU3R1ZGVudCB1c2luZyBbU3dhZ2dlckh1Yi5dKGh0dHBzOi8vYXBwLnN3YWdnZXJodWIuY29tLykKCldoZW4geW91IGdvIHRvIFtTdHVkZW50cyBBUEkuXShodHRwczovL2FwcC5zd2FnZ2VyaHViLmNvbS9hcGlzL2xhZ3AwMzEwL3N0dWRlbnRzLWFwaS8xLjAuMCksIHlvdSdsbCBnZXQgdG8gYSBzaXRlIHRoYXQgbG9va3MgbGlrZSB0aGUgZm9sbG93aW5nOgoKIVtTd2FnZ2VySHViIEFQSSBNYWluIFBhZ2VdKC9zY3JlZW5zaG90cy8wLnBuZyAiU3dhZ2dlckh1YiBBUEkgTWFpbiBQYWdlIikKClRoZXJlIHlvdSBoYXZlIHRocmVlIHNlY3Rpb25zOgoKLSBPcHRpb25zIGFuZCBBUEkgU3BlY2lmaWNhdGlvbiBvbiB0aGUgKipsZWZ0KiosCi0gRWRpdG9yIGluIHRoZSAqKm1pZGRsZSoqIGFuZCwKLSBBdXRvbWF0aWNhbGx5IEdlbmVyYXRlZCBEb2N1bWVudGF0aW9uIGZvciB0aGUgQVBJIGRlZmluaXRpb24gb24gdGhlICoqcmlnaHQqKi4KCkluIHRoZSBBUEkgRG9jdW1lbnRhdGlvbiwgc2Nyb2xsIGRvd24gdG8gYGBgUmVndWxhciBVc2VycyAtIEdFVCAvc3R1ZGVudHMve3N0dWRlbnRJRH1gYGAuIFlvdSdsbCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczoKCiFbR0VUIFN0dWRlbnQgYnkgaXQncyBJRCAtIE1haW5dKC9zY3JlZW5zaG90cy8xLnBuZyAiR2V0IFN0dWRlbnQgYnkgaXQncyBJRCAtIE1haW4iKQoKVGhpcyBpcyB0aGUgZGVmaW5pdGlvbiBmb3IgdGhlIFtIVFRQIFZlcmJdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VzL2RvY3MvV2ViL0hUVFAvTWV0aG9kcykgYGBgR0VUYGBgIGZvciB0aGUgc3BlY2lmaWVkIGBgYFVSSWBgYCBhdCB0aGUgdG9wIChgYGAvc3R1ZGVudHMve3N0dWRlbnRJRH1gYGApLiBIZXJlIHlvdSBjYW4gc2VlIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXJzIHRvIG1ha2UgdGhpcyByZXF1ZXN0IGFuZCB0aGUgZGVmaW5lZCByZXNwb25zZXMgd2l0aCB0aGUgcHJvcGVyIFtIVFRQIENvZGVdKGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2h0dHAtc3RhdHVzLWNvZGVzL2h0dHAtc3RhdHVzLWNvZGVzLnhodG1sKSBhbmQgYW4gZXhhbXBsZSBmb3IgZWFjaCBvZiB0aGVtLiAgCgpBbHNvLCBpbiBjYXNlIHlvdXIgQVBJIGFjY2VwdHMgbW9yZSB0aGFuIG9uZSBbTWVkaWEgVHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZXMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVzKSwgeW91IGNhbiB1c2UgdGhlIGRyb3Bkb3duIGZvciBzZWxlY3RpbmcgdGhlIHByb3BlciBtZWRpYSB0eXBlLiBIZXJlIHdlIGp1c3QgZGVmaW5lZCBgYGBhcHBsaWNhdGlvbi9qc29uYGBgIG1lZGlhIHR5cGUuICAKClRvIG1ha2UgdGhpcyByZXF1ZXN0LCB5b3Ugd2lsbCBuZWVkIHRvIHBhc3MgdGhlIGBgYHN0dWRlbnRJRGBgYCBwYXJhbWV0ZXIgdG8gdGhlIGBgYFVSSWBgYC4gWW91IGNhbiBqdXN0IHVzZSB0aGUgcGFyYW1ldGVyIGRlZmluZWQgb3IsIGlmIHlvdSBwcmVmZXIsIHlvdSBjYW4gY2hhbmdlIGl0LgpXaGVuIHlvdSdyZSByZWFkeSB0byBtYWtlIHRoZSByZXF1ZXN0LCBqdXN0IGhpdCB0aGUgKioqRXhlY3V0ZSoqKiBidXR0b24uCgohW0dFVCBTdHVkZW50IGJ5IGl0J3MgSUQgLSBUcnkgaXQgb3V0XSgvc2NyZWVuc2hvdHMvMi5wbmcgIkdFVCBTdHVkZW50IGJ5IGl0J3MgSUQgLSBUcnkgaXQgb3V0IikKCllvdSdsbCBzZWUgdGhlIGBgYGN1cmxgYGAgY29tbWFuZCB0byBtYWtlIHRoZSByZXF1ZXN0IGFsb25nIHdpdGggdGhlIHJlcXVlc3QgVVJMLgoKIVtHRVQgU3R1ZGVudCBieSBpdCdzIElEIC0gRXhlY3V0ZWRdKC9zY3JlZW5zaG90cy8zLnBuZyAiR0VUIFN0dWRlbnQgYnkgaXQncyBJRCAtIEV4ZWN1dGVkIikKCklmIHlvdSBzY3JvbGwgZG93biwgeW91J2xsIGFsc28gc2VlIHRoZSByZXNwb25zZSwgd2hpY2ggY29udGFpbnM6CgotIEhUVFAgUmVzcG9uc2UgQ29kZS4KLSBSZXNwb25zZSBCb2R5LgotIFJlc3BvbnNlIEhlYWRlcnMuCi0gUmVxdWVzdCBEdXJhdGlvbi4KCiFbR0VUIFN0dWRlbnQgYnkgaXQncyBJRCAtIFJlc3BvbnNlXSgvc2NyZWVuc2hvdHMvNC5wbmcgIkdFVCBTdHVkZW50IGJ5IGl0J3MgSUQgLSBSZXNwb25zZSIpCgojIyBQcm9qZWN0IFN0cnVjdHVyZS4KCi0gW2R5bmFtaWMtaHRtbF0oL2R5bmFtaWMtaHRtbCk6IEFQSSBEeW5hbWljIERvY3VtZW50YXRpb24gd2hpY2ggcnVucyBvbiBhIE5vZGUgU2VydmVyLgotIFtodG1sXSgvaHRtbCk6IFNpbXBsZSBIVE1MIERvY3VtZW50YXRpb24gZm9yIHRoZSBBUEkuCi0gW2h0bWwyXSgvaHRtbDIpOiBCZXR0ZXIgSFRNTCBEb2N1bWVudGF0aW9uIGZvciB0aGUgQVBJLgotIFtvcGVuYXBpXSgvb3BlbmFwaSk6IEFQSSBEZWZpbml0aW9uIChPcGVuQVBJIERvY3VtZW50OyBKU09OIGFuZCBZQU1MIGZvcm1hdCkuCgojIyBEb2N1bWVudGF0aW9uLgoKQmFzaWNhbGx5LCB5b3UndmUgZXZlcnl0aGluZyBvbiB0aGUgW09wZW5BUEkgd2Vic2l0ZV0oaHR0cHM6Ly9zd2FnZ2VyLmlvLykuCgpBbHNvLCB0aGUgZm9sbG93aW5nIGFyZSByZXNvdXJjZXMgSSB1c2VkIHdoZW4gd3JpdGluZyB0aGlzIEFQSToKCi0gW09wZW5BUEkgRG9jcy5dKGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzLykKLSBbT3BlbkFQSSBTcGVjaWZpY2F0aW9uIFZlcnNpb24gMy4wLjIuXShodHRwczovL3N3YWdnZXIuaW8vc3BlY2lmaWNhdGlvbi8pCi0gW1N3YWdnZXIgT3BlblNvdXJjZSBUb29scy5dKGh0dHBzOi8vc3dhZ2dlci5pby90b29scy9vcGVuLXNvdXJjZS8pCi0gW1N3YWdnZXJIdWIgLSBBd2Vzb21lIFBsYXRmb3JtIGZvciBBUEkgRGV2ZWxvcG1lbnQgYW5kIFRlc3RpbmcuXShodHRwczovL3N3YWdnZXIuaW8vdG9vbHMvc3dhZ2dlcmh1Yi8pCi0gW1N3YWdnZXIncyBHaXRIdWIgUmVwb3NpdG9yeS5dKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaSkKCiMjIEF1dGhvcnMuCi0gTHVpcyBBbGJlcnRvLgoKIyMgTGljZW5zZS4KVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAtIHNlZSB0aGUgW0xpY2Vuc2UubWRdKExJQ0VOU0UubWQpIGZpbGUgZm9yIGRldGFpbHMu
    description: Students OpenAPI implementation.
    created: "2020-01-28T20:44:31Z"
    updated: "2020-02-02T16:39:42Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: lagp0310
    logo: https://avatars.githubusercontent.com/u/46946599?v=4
    license: MIT
    repoEtag: '"4c0945cb582609468a085c87ab5ffe4b8e0470381e4f90e5c74d1e8b3297a3c5"'
    repoLastModified: Sun, 02 Feb 2020 16:39:42 GMT
    readmeEtag: '"2602f92184503882f81a50b7be204878d1b72cc6a25936d98e70dadae3f77db4"'
    readmeLastModified: Sun, 02 Feb 2020 16:39:39 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/domapic/domapic-base
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    description: Base for Domapic Node.js packages
    created: "2018-02-13T17:31:30Z"
    updated: "2019-05-26T09:26:31Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: domapic
    logo: https://avatars.githubusercontent.com/u/36418970?v=4
    license: MIT
    repoEtag: '"6b4efb662120263e4fd88a5b31ccce022eff9cee46a5a31acef09d72d93180e4"'
    repoLastModified: Sun, 26 May 2019 09:26:31 GMT
    readmeEtag: '"42b47193bd5499aa207ff3978ff4d818dc8b432c8b60badd4e1e4c372592bd3f"'
    readmeLastModified: Sat, 02 Mar 2019 11:30:57 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/bepopov/intelligent_agent
  v3: true
  repositoryMetadata:
    description: An intelligent agent for course creating
    created: "2019-05-07T13:00:33Z"
    updated: "2019-05-07T13:04:19Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: bepopov
    logo: https://avatars.githubusercontent.com/u/20209992?v=4
    repoEtag: '"3d1003b1667081945f6f2bbf19e98b2eb5db4f41cf35f244898b70101afcbff4"'
    repoLastModified: Tue, 07 May 2019 13:04:19 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/abhishekb91/petstore-openapi3
  v3: true
  repositoryMetadata:
    base64Readme: >-
      PGgxIGFsaWduPSJjZW50ZXIiPgogICAgUGV0c3RvcmUtT3BlbmFwaTMKPC9oMT4KCjxwIGFsaWduPSJjZW50ZXIiPgogIDxzdHJvbmc+Q3JlYXRpbmcgSFRUUCBBUEkgdXNpbmcgZ29sYW5nIGluIG9wZW5hcGkzIHN0YW5kYXJkPC9zdHJvbmc+PGJyPgo8L3A+CgojIyBDb250ZW50cwotIFtHZXR0aW5nIHN0YXJ0ZWRdKCNnZXR0aW5nLXN0YXJ0ZWQpCi0gW0RldmVsb3BtZW50XSgjZGV2ZWxvcG1lbnQpCgojIyBHZXR0aW5nIHN0YXJ0ZWQKVGhlIGludGVudCBvZiB0aGlzIHNhbXBsZSBwcm9qZWN0IGlzIHRvIGRlbW9uc3RyYXRlIHRoZSB1c2FnZSBvZiB2YXJpb3VzIHRvb2xzIHRvIGNyZWF0ZSB3ZWJhcGlzIHVzaW5nIG9wZW5hcGkgMyBzdGFuZGFyZC4gVGhpcyBwcm9qZWN0IHVzZXM6Ci0gW29hcGktY29kZWdlbl0oaHR0cHM6Ly9naXRodWIuY29tL2RlZXBtYXAvb2FwaS1jb2RlZ2VuKSB0byBnZW5lcmF0ZSBzZXJ2ZXIgc3R1YnMKLSBbc3dhZ2dlci11aV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWkpIHRvIGRpc3BsYXkgdGhlIGFwaSBkb2N1bWVudAotIFtlY2hvXShodHRwczovL2dpdGh1Yi5jb20vbGFic3RhY2svZWNobykgYXMgSFRUUCByb3V0aW5nIGVuZ2luZQotIFtzdGF0aWtdKGh0dHBzOi8vZ2l0aHViLmNvbS9yYWt5bGwvc3RhdGlrKSB0byBjb21waWxlIHN0YXRpYyBmaWxlcyBpbnRvIGEgR28gYmluYXJ5Ci0gW21vY2tlcnldKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWt0cmEvbW9ja2VyeSkgdG8gZ2VuZXJhdGUgbW9ja3MgZnJvbSBpbnRlcmZhY2VzCgojIyMgUHJlcmVxdWlzaXRlCi0gbG9jYWwgZ29sYW5nIGluc3RhbGxhdGlvbgotIE15U1FMIERhdGFiYXNlLiBVc2UgTWFrZWZpbGUgdG8gZ2VuZXJhdGUgTXlTUUwgY29udGFpbmVyIGxvY2FsbHkuCgojIyBEZXZlbG9wbWVudAoKLSBTdGFydGluZyBBcHBsaWNhdGlvbgoKICBUaGUgc2VydmljZSBleHBlY3RzIGRhdGFiYXNlIGNvbm5lY3Rpb24gdG8gYmUgcGFzc2VkIGFzIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLiBJbiBvcmRlciB0byBtYWtlIGxvY2FsIGRldiBlYXN5LCB0aGVyZSBhcmUgdHdvIG9wdGlvbnMgZnJvbSB3aGljaCBvbmUgY2FuIHJ1biB0aGUgc2VydmljZToKCiAgLSBGcm9tIFZpc3VhbCBTdHVkaW8gQ29kZToKICAgIEluIG9yZGVyIHRvIGRlYnVnIHRoZSBzZXJ2aWNlLCBvbmUgY2FuIHJ1biB0aGUgc2VydmljZSBkaXJlY3RseSBmcm9tIHRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgYERlYnVnIGFuZCBSdW5gID4gYExhdW5jaGAgYW5kIGFkZCBicmVha3BvaW50cwoKICAtIFVzaW5nIE1ha2VmaWxlOgogICAgRnJvbSB0aGUgcHJvamVjdCBSb290OgoKICAgIGBgYGJhc2gKICAgIG1ha2Ugc3RhcnRfc2VydmljZQogICAgYGBgCgotIEFQSSBFbmQtcG9pbnRzCgogIGBgYAogIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kb2NzLwogIGBgYAoKLSBSdW5uaW5nIFVuaXQgVGVzdHMKICBgYGBiYXNoCiAgZ28gdGVzdCAuLy4uLgogIGBgYA==
    description: Creating HTTP API using golang in openapi3 standard
    created: "2021-04-04T14:43:43Z"
    updated: "2021-05-23T03:55:45Z"
    language: Go
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: abhishekb91
    logo: https://avatars.githubusercontent.com/u/11881672?v=4
    license: MIT
    repoEtag: '"ed9b6863efaf3bc080605059a5d5cd1e8b71b34195462ca60966bf7ed3b19702"'
    repoLastModified: Sun, 23 May 2021 03:55:45 GMT
    readmeEtag: '"7b05ef651290ae9f33a0cbda28ab8acf62e8b3b764adcad47cdd0b57f16aae17"'
    readmeLastModified: Sun, 23 May 2021 03:55:43 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/jonasnicoletti/spring-boot-demo-app
  v3: true
  repositoryMetadata:
    description: Springboot demo app with some enterprise standards
    created: "2021-03-14T18:03:51Z"
    updated: "2021-03-23T08:08:56Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: JonasNicoletti
    logo: https://avatars.githubusercontent.com/u/53706359?v=4
    repoEtag: '"75f05fcfc57c8caa51453af434f0d8d47cc064caf426c15b3824d5beabd9049c"'
    repoLastModified: Tue, 23 Mar 2021 08:08:56 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/lordent/openapi-doc
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLWRvYwpPcGVuQVBJIHYzIGRvYyBkZWNvcmF0b3JzIGZvciBhc3luYyBzYW5pYyB3ZWJmcmFtZWZvcmsK
    description: OpenAPI v3 doc decorators
    created: "2018-01-23T15:44:55Z"
    updated: "2018-03-29T14:50:45Z"
    language: Python
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: lordent
    logo: https://avatars.githubusercontent.com/u/2070895?v=4
    license: MIT
    repoEtag: '"e0d147fb70348589445ecefaadbebb4fee2418ad01d417a3a70dc1dffff25e58"'
    repoLastModified: Thu, 29 Mar 2018 14:50:45 GMT
    readmeEtag: '"c1a5d0f2f40f6ce20a1ad08f71f77e89b1549c772fe3ad46471645b2fe5e4e0f"'
    readmeLastModified: Thu, 29 Mar 2018 14:50:33 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/britishgas-engineering/openapi3-joiner
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuIEFQSSAzIGpvaW5lcgpOb2RlIHNjcmlwdCB0byBtZXJnZSBtdWx0aXBsZSBPcGVuIEFQSSAzIHNwZWNpZmljYXRpb25zIGludG8gc2luZ2xlIHNwZWNpZmljYXRpb24KCkluIGEgbWljcm9zZXJ2aWNlIGFyY2hpdGVjdHVyZSwgZWFjaCBtaWNyb3NlcnZpY2UgaGFzIGl0cyBvd24gQVBJIGRvY3VtZW50YXRpb24uCk9mdGVuIHRoZSBhcGlzIGFyZSBleHBvc2VkIGJlaGluZCBhbiBBUEkgZ2F0ZXdheSB0byBnaXZlIHNpbmdsZSBpbnRlcmZhY2UgdG8gdGhlIGNsaWVudHMuClRoYXQgY3JlYXRlcyBhIG5lZWQgdG8gaGF2ZSBhIHNpZ2xlIEFQSSBzcGVjaWZpY2F0aW9uLgoKVGhpcyBzY3JpcHQgaXMgYSB0b29sIHRvIG1lcmdlIG11bHRpcGxlIE9wZW4gQVBJIDMgc3BlY2lmaWNhdGlvbnMgKGpzb24gb3IgeWFtbCkgCmludG8gYSBzaW5nbGUgc3BlY2lmaWNhdGlvbgoKIyBIb3cgdG8gcnVuPwpgbnBtIGluc3RhbGxgCgpgbm9kZSBpbnZva2UuanNgCihQbGVhc2UgcmVmZXIgW2ludm9rZS5qc10oLi9pbnZva2UuanMpIGZvciBtb3JlIGRldGFpbHMpCgo=
    description: >-
      Node script to merge multiple Open API 3 specifications into single
      specification
    created: "2019-02-15T15:03:48Z"
    updated: "2019-11-08T11:17:52Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: britishgas-engineering
    logo: https://avatars.githubusercontent.com/u/23475527?v=4
    license: MIT
    repoEtag: '"b5ec6ccb19b41a109eb69c86299e8bc38ab3203fc46a44464db7a17fa38d1a2b"'
    repoLastModified: Fri, 08 Nov 2019 11:17:52 GMT
    readmeEtag: '"2b4bdb10de1fb3ee7df293c9035163a7da1135117677b6f4f4f2a4a01993c11f"'
    readmeLastModified: Fri, 15 Feb 2019 15:19:00 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/shaswatsaxena/task-management
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgRGVzY3JpcHRpb24KClRhc2sgTWFuYWdlbWVudCBBUEkuCgojIyBJbnN0YWxsYXRpb24KCmBgYGJhc2gKJCBucG0gaW5zdGFsbApgYGAKCi0gUmVxdWlyZXMgUG9zdGdyZVNRTCBpbnN0YW5jZSBydW5uaW5nCi0gUHJvdmlkZSB2YWx1ZXMgdG8gYWxsIHNhbXBsZS5lbnYgdmFyaWFibGVzCi0gUmVuYW1lIHNhbXBsZS5lbnYgdG8gLmVudgoKIyMgUnVubmluZyB0aGUgYXBwCgpgYGBiYXNoCiMgZGV2ZWxvcG1lbnQKJCBucG0gcnVuIHN0YXJ0CgojIHdhdGNoIG1vZGUKJCBucG0gcnVuIHN0YXJ0OmRldgoKIyBwcm9kdWN0aW9uIG1vZGUKJCBucG0gcnVuIHN0YXJ0OnByb2QKYGBgCgojIyBUZXN0CgpDcmVhdGUgYSBkYXRhYmFzZSBuYW1lZCAiZTJlX3Rlc3QiIHRvIGJlIHVzZWQgZm9yIHRlc3RpbmcuCgpgYGBiYXNoCiMgZW5kIHRvIGVuZCB0ZXN0cwokIG5wbSBydW4gdGVzdApgYGAKCi0gQXV0aG9yIC0gU2hhc3dhdCBTYXhlbmEK
    description: "Task Management API "
    created: "2020-05-26T05:32:20Z"
    updated: "2021-04-10T14:14:21Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: shaswatsaxena
    logo: https://avatars.githubusercontent.com/u/12628996?v=4
    repoEtag: '"4762468a73ca1c9a09a1df0ee6a8ccf2a47bb122b718706199d4dedaf428d84c"'
    repoLastModified: Sat, 10 Apr 2021 14:14:21 GMT
    readmeEtag: '"5e0faad0052c7a1239793dee48eaed5b87f347a5f4a8dbb65615cd6292c66686"'
    readmeLastModified: Thu, 04 Feb 2021 16:25:01 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/hcloward/casc-bundle-management
  v3: true
  repositoryMetadata:
    description: >-
      This repository includes an OpenAPI file I created using Stoplight, while
      completing Tom Johson's API documentation course.
    created: "2020-10-11T16:19:18Z"
    updated: "2020-10-23T16:27:40Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: HCloward
    logo: https://avatars.githubusercontent.com/u/17242298?v=4
    repoEtag: '"a1f4801a9320d68e123930985f5075092872e55720e301bcdde2472bc29f38b6"'
    repoLastModified: Fri, 23 Oct 2020 16:27:40 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/hoangnx30/sample-express-with-swagger
  v3: true
  repositoryMetadata:
    base64Readme: >-
      KipBIGV4YW1wbGUgYWJvdXQgdXNpbmcgc3dhZ2dlci11aSBpbiBub2RlanMgdG8gdGVzdCBhcGkqKgo=
    readmeEtag: '"8187016d2eccc7e0c24dda434e1fa0dc382a7eb5d59c15f91663371b5dda3745"'
    readmeLastModified: Sun, 08 Nov 2020 10:50:14 GMT
    description: Example about express mongodb swagger
    created: "2020-11-08T10:41:16Z"
    updated: "2020-11-08T10:50:24Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hoangnx30
    logo: https://avatars.githubusercontent.com/u/43129138?v=4
    repoEtag: '"6853c84bb69171d3638af75c74bef62cc88c6a9c46d3457767963c52e156556f"'
    repoLastModified: Sun, 08 Nov 2020 10:50:24 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/abhinaba-ghosh/postman-coverage
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBQb3N0bWFuLUNvdmVyYWdlCgpHZW5lcmF0ZSBQb3N0bWFuIGNvbGxlY3Rpb24gY292ZXJhZ2UgcmVwb3J0LgoKV29yayBpbiBwcm9ncmVzcyEgS2VlcCB3YXRjaGluZy4K
    readmeEtag: '"1433c4617907db177c3198f2e8cc41fe28b104e994057273fad814551a74c2f9"'
    readmeLastModified: Sun, 27 Jun 2021 21:21:43 GMT
    description: derive postman collection coverage against openapi schema
    created: "2021-06-23T11:45:36Z"
    updated: "2021-06-27T21:23:02Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: abhinaba-ghosh
    logo: https://avatars.githubusercontent.com/u/23141842?v=4
    license: MIT
    repoEtag: '"120b67e4148942274ffa6005a40894610959d208bacc4ebeaa8332058b27b675"'
    repoLastModified: Sun, 27 Jun 2021 21:23:02 GMT
  foundInMaster: true
  category:
    - Converters
    - Testing
- source: openapi3 tags
  repository: https://github.com/open-banking/offers
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvZmZlcnMKT3BlbiBCYW5raW5nIE9mZmVycyBBUEkgYnVpbHQgb24gdG9wIG9mIGxpZ2h0LTRqCg==
    readmeEtag: '"0adfb1df598c4edcff3e8137893b7ee0133c26124aaa22d2cf0b968717b350a7"'
    readmeLastModified: Mon, 28 Feb 2022 02:11:28 GMT
    description: Open Banking Offers API built on top of light-4j
    created: "2020-01-23T19:06:03Z"
    updated: "2021-12-13T15:22:45Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: open-banking
    logo: https://avatars.githubusercontent.com/u/38990562?v=4
    license: Apache-2.0
    repoEtag: '"030fc4d3f497fe8ae5bbc0c9d281ec5bacb13bdf3023ba96d387e8649024a819"'
    repoLastModified: Mon, 13 Dec 2021 15:22:45 GMT
  foundInMaster: true
  category:
    - Documentation
    - Server
- source: openapi3 tags
  repository: https://github.com/ankitech/spring-swagger-setup
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzcHJpbmctc3dhZ2dlci1zZXR1cApUaGlzIGlzIGFuIHJlcG9zaXRvcnkgdGhhdCBzaG93cyBob3cgdG8gc2V0IHVwIHN3YWdnZXIgZG9jdW1lbnRhdGlvbiBpbiBhIHNwcmluZyBwcm9qZWN0Cg==
    description: >-
      This is an repository that shows how to set up swagger documentation in a
      spring project
    created: "2020-04-20T18:07:03Z"
    updated: "2020-04-21T19:03:50Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: ankitech
    logo: https://avatars.githubusercontent.com/u/9432041?v=4
    license: Apache-2.0
    repoEtag: '"fd7ea0a77dc244155252ca264351baf38846f028f8988e8187694c1537a3a2e3"'
    repoLastModified: Tue, 21 Apr 2020 19:03:50 GMT
    readmeEtag: '"55d01e8c3a418c57381a8085289365f8cbc90ddb986c180fcb7882113e340cd5"'
    readmeLastModified: Tue, 21 Apr 2020 05:59:58 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/abhishekastoorkar/nodejs-training
  v3: true
  repositoryMetadata:
    description: >-
      This is a training manager app build using nodejs, express and sequelize
      ORM. for authentication of user AWS cognito service is used. coverage
      report and openApi 3 documention are also available
    created: "2020-10-12T06:16:22Z"
    updated: "2020-12-02T05:47:34Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: abhishekastoorkar
    logo: https://avatars.githubusercontent.com/u/51363257?v=4
    repoEtag: '"448243d7ad12037e82f73343e0c6e4dc5327e85f1278ed853a6f5bccb50a1a5b"'
    repoLastModified: Wed, 02 Dec 2020 05:47:34 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/funkeyfreak/msgraph-openapi
  v3: true
  repositoryMetadata:
    description: A buildable OpenAPI v3 description for Microsoft Graph
    created: "2020-11-07T03:01:48Z"
    updated: "2020-12-30T06:32:05Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: funkeyfreak
    logo: https://avatars.githubusercontent.com/u/5327214?v=4
    license: Apache-2.0
    repoEtag: '"9b8b63e91a78e3207da9eb565c6fc18dfdde11a906d77b6528d3a3d907a1532e"'
    repoLastModified: Wed, 30 Dec 2020 06:32:05 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/vincenzo-racca/spring-boot-openapi
  v3: true
  repositoryMetadata:
    description: >-
      Java project with Spring Boot 2, Swagger 3 with the OpenAPI specification
      and a self-generated client.
    created: "2020-08-31T17:48:07Z"
    updated: "2021-04-10T15:59:33Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 1
    owner: vincenzo-racca
    logo: https://avatars.githubusercontent.com/u/69170382?v=4
    repoEtag: '"32a76a9c00bc13698278a6a61ee814795529de18484a22cc96f29640f19c6513"'
    repoLastModified: Sat, 10 Apr 2021 15:59:33 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/phuntime/aws-lambda-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBhd3MtbGFtYmRhLW9wZW5hcGkKQWxsIEFXUyBMYW1iZGEgT3BlbkFQSSBmaWxlcyBjb21iaW5lZC4gCgoKU3dhZ2dlciBVSTogaHR0cHM6Ly9lZGl0b3Iuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9waHVudGltZS9hd3MtbGFtYmRhLW9wZW5hcGkvbWFpbi9vcGVuYXBpLnlhbWwKCiMjIFNvdXJjZXM6Ci0gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2xhbWJkYS9sYXRlc3QvZGcvcnVudGltZXMtYXBpLmh0bWwKLSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vbGFtYmRhL2xhdGVzdC9kZy9ydW50aW1lcy1leHRlbnNpb25zLWFwaS5odG1sCi0gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2xhbWJkYS9sYXRlc3QvZGcvcnVudGltZXMtbG9ncy1hcGkuaHRtbAoKIyMgTGljZW5zZQoKaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC8K
    description: All AWS Lambda OpenAPI files combined
    created: "2021-08-09T22:06:34Z"
    updated: "2021-08-09T22:54:11Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: phuntime
    logo: https://avatars.githubusercontent.com/u/66830795?v=4
    repoEtag: '"a6a8fe346d6ccb853ecb0d1dbb8a4ba604fec3220930178f8a6ffe4df4b2b1ea"'
    repoLastModified: Mon, 09 Aug 2021 22:54:11 GMT
    readmeEtag: '"858e38adb2c5e03fc4e19b8811b0a4af684970bbd3029757074b78e2f634c548"'
    readmeLastModified: Mon, 09 Aug 2021 22:54:08 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/budget-service
  v3: true
  repositoryMetadata:
    base64Readme: IyBidWRnZXQtc2VydmljZQoK6aKE566X5omn6KGMCg==
    description: 财务管理系统-后端服务-预算执行
    created: "2021-03-20T13:18:25Z"
    updated: "2021-03-20T13:24:02Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"a7784adcf3513e00a888ff04ff69acabc2e4ba0552bdd4d290682fb777352ade"'
    repoLastModified: Sat, 20 Mar 2021 13:24:02 GMT
    readmeEtag: '"0b0e305b309e9f4dabb88f773c326108295f6df36fed3aa4d68e38deb6d94e23"'
    readmeLastModified: Sat, 20 Mar 2021 13:22:39 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/report-manage
  v3: true
  repositoryMetadata:
    base64Readme: IyByZXBvcnQtbWFuYWdlCgrmiqXooajnrqHnkIYK
    description: 财务管理系统-后端服务-报表管理
    created: "2021-03-20T12:00:18Z"
    updated: "2021-03-20T12:24:02Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"64ce2801bf67a455d071a9046f5951591464db358a1e3e21117c51b14547c84f"'
    repoLastModified: Sat, 20 Mar 2021 12:24:02 GMT
    readmeEtag: '"2ea07434f395257792f96ddca6ccf51da1b86e4d4cd3b73c88539c6584cbddbb"'
    readmeLastModified: Sat, 20 Mar 2021 12:05:42 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/flow-center
  v3: true
  repositoryMetadata:
    base64Readme: IyBmbG93LWNlbnRlcgoK5rWB56iL5Lit5b+DCg==
    description: 财务管理系统-后端服务-流程中心
    created: "2021-03-20T11:28:28Z"
    updated: "2021-03-20T12:23:46Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"8dd9ab38ef80638eba59506a153714f9973ae3a8baa70d3a772e9d5a247985b1"'
    repoLastModified: Sat, 20 Mar 2021 12:23:46 GMT
    readmeEtag: '"495c981329fd070516d0e5f20fd856cb707f3cae601b7411a1b9431856b982a8"'
    readmeLastModified: Sat, 20 Mar 2021 11:31:36 GMT
  foundInMaster: true
  category:
    - Documentation
    - Testing
- source: openapi3 tags
  repository: https://github.com/zenithlawyw/dockerised-spring-boot-mysql-phpmyadmin
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBEb2NrZXJpc2VkIFNwcmluZyBCb290ICsgTXlTUUwgKyBwaHBNeUFkbWluCgojIyBEZXNjcmlwdGlvbgoKVGhpcyByZXBvc2l0b3J5IHdhcyBidWlsdCBiYXNlZCBvbiBbZG9ja2VyaXNlZC1teXNxbC1waHBteWFkbWluXShodHRwczovL2dpdGh1Yi5jb20vemVuaXRobGF3eXcvZG9ja2VyaXNlZC1teXNxbC1waHBteWFkbWluKSBieSBhZGRpbmcgYW5kIGNvbmZpZ3VyaW5nIFtTcHJpbmcgQm9vdF0oaHR0cHM6Ly9zcHJpbmcuaW8pLgoKIyMgUHJlcmVxdWlzaXRlCgojIyMgRG9ja2VyIENvbXBvc2UKCllvdSBuZWVkIHRvIGluc3RhbGwgRG9ja2VyIENvbXBvc2UgaW4geW91ciBtYWNoaW5lLiBGb3IgZGV0YWlscywgcmVmZXIgdG8gW0luc3RhbGwgRG9ja2VyIENvbXBvc2VdKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvaW5zdGFsbC8pLgoKIyMgR2V0IGFuZCBHbwpgYGAKZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOnplbml0aGxhd3l3L2RvY2tlcmlzZWQtc3ByaW5nLWJvb3QtbXlzcWwtcGhwbXlhZG1pbi5naXQKY2QgZG9ja2VyaXNlZC1zcHJpbmctYm9vdC1teXNxbC1waHBteWFkbWluCmRvY2tlci1jb21wb3NlIHVwIC0tYnVpbGQKYGBgCgpPciwgaWYgeW91IHdhbnQgdG8gcnVuIHRoZSBjb250YWluZXJzIGluIHRoZSBiYWNrZ3JvdW5kLCBpLmUuIGRldGFjaGVkIG1vZGUgKHdpdGggdGhlIGAtZGAgZmxhZyksIGRvIHRoZSBmb2xsb3dpbmc6CmBgYApnaXQgY2xvbmUgZ2l0QGdpdGh1Yi5jb206emVuaXRobGF3eXcvZG9ja2VyaXNlZC1zcHJpbmctYm9vdC1teXNxbC1waHBteWFkbWluLmdpdApjZCBkb2NrZXJpc2VkLXNwcmluZy1ib290LW15c3FsLXBocG15YWRtaW4KZG9ja2VyLWNvbXBvc2UgdXAgLS1idWlsZCAtZApgYGAKCiMjIyBTYW1wbGUgQVBJcwoKW09wZW5BUEkgMyBTcGVjaWZpY2F0aW9uXShodHRwczovL3N3YWdnZXIuaW8vc3BlY2lmaWNhdGlvbi8pIGRvY3MgaGF2ZSBiZWVuIGNvbmZpZ3VyZWQgYW5kIG1hZGUgYWNjZXNzaWJsZSBhdCBbaHR0cDovL2xvY2FsaG9zdDo4MDgwL3N3YWdnZXItdWkuaHRtbF0oaHR0cDovL2xvY2FsaG9zdDo4MDgwL3N3YWdnZXItdWkuaHRtbCkgYWZ0ZXIgeW91IGhhdmUgc3VjY2Vzc2Z1bGx5IHJ1biB0aGUgZG9ja2VyaXNlZCBTcHJpbmcgQm9vdCBzZXJ2ZXIgaW4gdGhpcyByZXBvc2l0b3J5LgoKPGltZyBzcmM9Ii4vaW1nL29wZW5hcGkucG5nIiB3aWR0aD0iNTAwIiBhbHQ9Im9wZW5hcGkiIC8+CgoKIyMgU3ByaW5nIEJvb3QKCklmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBbU3ByaW5nIEJvb3RdKGh0dHBzOi8vc3ByaW5nLmlvKSBwcm9qZWN0IHRvIHRlc3QgdGhlIFtgZG9ja2VyLWNvbXBvc2UueW1sYF0oLi9kb2NrZXItY29tcG9zZS55bWwpIHNjcmlwdCwgeW91IG1heSB0cnkgbXkgW1NwcmluZyBCb290IFNjcmlwdHNdKGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5pdGhsYXd5dy9zcHJpbmctYm9vdC1zY3JpcHRzKS4gCg==
    description: null
    created: "2021-10-18T19:45:15Z"
    updated: "2021-10-24T17:48:21Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: zenithlawyw
    logo: https://avatars.githubusercontent.com/u/18685717?v=4
    license: MIT
    repoEtag: '"0f24aa881ec4842a2ff1ffc98df2386872fed385bd38e32dc3cfefe8c97f83ea"'
    repoLastModified: Sun, 24 Oct 2021 17:48:21 GMT
    readmeEtag: '"27c77f0bf567f91d650a6dccf5c6eded19056614e2f6cf227e6777dbbabd36b3"'
    readmeLastModified: Mon, 18 Oct 2021 19:45:25 GMT
  foundInMaster: true
  category:
    - Sdk
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/eropple/fastify-openapi3
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBgQGVyb3BwbGUvZmFzdGlmeS1vcGVuYXBpM2AgIwpfQmVjYXVzZSBJIGp1c3QgY2FuJ3Qgc3RvcCBtYWtpbmcgT3BlbkFQSSBsaWJyYXJpZXMsIEkgZ3Vlc3MuXwoKWyFbTlBNIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvQGVyb3BwbGUvZmFzdGlmeS1vcGVuYXBpMyldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Blcm9wcGxlL2Zhc3RpZnktb3BlbmFwaTMpIFshW0NJXShodHRwczovL2dpdGh1Yi5jb20vZXJvcHBsZS9mYXN0aWZ5LW9wZW5hcGkzL2FjdGlvbnMvd29ya2Zsb3dzL2NpLnlhbWwvYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL2Vyb3BwbGUvZmFzdGlmeS1vcGVuYXBpMy9hY3Rpb25zL3dvcmtmbG93cy9jaS55YW1sKQoKIyMgV2hhdCBpcyBpdD8gIyMKVGhpcyBpcyBhIGxpYnJhcnkgdG8gaGVscCB5b3UgZ2VuZXJhdGUgW09wZW5BUEkgMy4xXShodHRwczovL3NwZWMub3BlbmFwaXMub3JnL29hcy92My4xLjApLWNvbXBsaWFudCBzcGVjcyBmcm9tIHlvdXIgW0Zhc3RpZnldKGh0dHBzOi8vd3d3LmZhc3RpZnkuaW8vKSBhcHAuIE90aGVycyBleGlzdCwgYnV0IHRvIG15IG1pbmQgaGF2ZSBzb21lIHVzYWJpbGl0eSBpc3N1ZXM6IGxhY2sgb2YgZWZmZWN0aXZlIHR5cGUgaW5mZXJlbmNlLCBtZWggZGV2ZWxvcGVyIG1vdXRoZmVlbCwgYW5kIHNvIG9uLiBCZWNhdXNlIG9mIG15IFtvd25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2Rlcm4tcHJvamVjdC9tb2Rlcm4tcnVieSkgW2JhY2tncm91bmRdKGh0dHBzOi8vZ2l0aHViLmNvbS9lcm9wcGxlL25lc3Rqcy1vcGVuYXBpMykgaW4gYnVpbGRpbmcgT3BlbkFQSSBsaWJyYXJpZXMsIGFuZCBteSBncm93aW5nIGFwcHJlY2lhdGlvbiBmb3IgRmFzdGlmeSwgSSBkZWNpZGVkIHRvIHRha2UgYSBjcmFjayBhdCBpdC4KClRoaXMgbGlicmFyeSBwcmVzdXBwb3NlcyB0aGF0IHlvdSB1c2UgW2BAc2luY2xhaXIvdHlwZWJveGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5jbGFpcnp4ODEvdHlwZWJveCkgdG8gZGVmaW5lIHRoZSBKU09OIHNjaGVtYSB1c2VkIGluIHlvdXIgcmVxdWVzdHMsIGFuZCBmcm9tIHRoYXQgSlNPTiBTY2hlbWEgZGVyaXZlcyB0eXBlcy4gKEVyZ29ub21pY3MgZm9yIG5vbi1UeXBlU2NyaXB0IHVzZXJzIGlzIHNwZWNpZmljYWxseSBvdXQtb2Ytc2NvcGUuKSBJdCB3aWxsIHdhbGsgYWxsIHlvdXIgcm91dGVzLCBkZXRlcm1pbmUgeW91ciBzY2hlbWEsIGFuZCBleHRyYWN0IGFuZCBkZWR1cGxpY2F0ZSB0aG9zZSBzY2hlbWFzIHRvIHByZXNlbnQgYSByZWxhdGl2ZWx5IGNsZWFuIGFuZCBlYXN5LXRvLXVzZSBPcGVuQVBJIGRvY3VtZW50LiBJdCdsbCB0aGVuIGFsc28gc2VydmUgSlNPTiBhbmQgWUFNTCB2ZXJzaW9ucyBvZiB5b3VyIHNwZWNpZmljYXRpb24sIGFzIHdlbGwgYXMgaG9zdCBhbiBpbnRlcmFjdGl2ZSBBUEkgZXhwbG9yZXIgd2l0aCB0cnktaXQtb3V0IGZlYXR1cmVzIGNvdXJ0ZXN5IG9mIFtSYXBpZG9jXShodHRwczovL21yaW45LmdpdGh1Yi5pby9SYXBpRG9jLykuCgoqKkZhaXIgd2FybmluZzoqKiBUaGlzIGxpYnJhcnkgaXMgaW4gRXh0cmVtZWx5IEVhcmx5IEFjY2Vzcyh0bSkgYW5kIHdoaWxlIHRoZSBmdW5jdGlvbmFsaXR5IHRoYXQncyBoZXJlIGRvZXMgd29yaywgdGhlcmUncyBzb21lIGZ1bmN0aW9uYWxpdHkgdGhhdCBfZG9lc24ndF8gZXhpc3QuIFRoZSBzdHVmZiB0aGF0IHN0YW5kcyBvdXQgdG8gbWUgcGVyc29uYWxseSBjYW4gYmUgZm91bmQgaW4gW1RPRE8ubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9lcm9wcGxlL2Zhc3RpZnktb3BlbmFwaTMvYmxvYi9tYWluL1RPRE8ubWQpLCBpbmNsdWRpbmcgYSBzaG9ydCBsaXN0IG9mIHRoaW5ncyB0aGlzIHBsdWdpbiBfd29uJ3RfIGRvLgoKIyMgVXNhZ2UgIyMKCkZpcnN0LCBpbnN0YWxsIGl0LCBldGMuIGV0Yy46CgpgYGBiYXNoCnlhcm4gYWRkIEBlcm9wcGxlL2Zhc3RpZnktb3BlbmFwaTMKYGBgCgpPbmNlIHlvdSd2ZSBpbnN0YWxsZWQgaXQtLXdlbGwsIHlvdSdkIGJlc3QgZ28gZG8gc29tZSB0aGluZ3MgdG8gc2V0IGl0IHVwLCBodWg/IFRoZXJlJ3MgYSBtYW51YWwgdGVzdCAob3JpZ2luYWxseSBhZGRlZCB0byBzbW9rZSBvdXQgaXNzdWVzIHdpdGggUmFwaWRvYyBzZXJ2aW5nKSBpbiBbYGV4YW1wbGVzL3N0YXJ0LXNlcnZlci50c2BdLCB3aGljaCBjYW4gYWxzbyBiZSBkaXJlY3RseSBpbnZva2VkIGZyb20gdGhlIHJlcG9zaXRvcnkgd2l0aCBgeWFybiBkZW1vYC4gQmVsb3cgYXJlIHRoZSBpbXBvcnRhbnQgYml0cyBmcm9tIHRoYXQgZGVtbzoKCmBgYHRzCmltcG9ydCBGYXN0aWZ5LCB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknOwppbXBvcnQgeyBTdGF0aWMsIFR5cGUgfSBmcm9tICdAc2luY2xhaXIvdHlwZWJveCc7CgppbXBvcnQgT0FTM1BsdWdpbiwgeyBPQVMzUGx1Z2luT3B0aW9ucywgc2NoZW1hVHlwZSB9IGZyb20gJy4uL3NyYy9pbmRleC5qcyc7CmBgYAoKWW91ciBpbXBvcnRzLiAoT2J2aW91c2x5LCBpbiB5b3VyIHByb2plY3QsIHRoZSBsYXN0IGltcG9ydCB3aWxsIGJlIGZyb20gYCJAZXJvcHBsZS9mYXN0aWZ5LW9wZW5hcGkzImAuKQoKYGBgdHMKY29uc3QgZmFzdGlmeSA9IEZhc3RpZnkoeyBsb2dnZXI6IHsgbGV2ZWw6ICdlcnJvcicgfSB9KTsKYXdhaXQgZmFzdGlmeS5yZWdpc3RlcihPQVMzUGx1Z2luLCB7IC4uLnBsdWdpbk9wdHMgfSk7CmBgYAoKUmVnaXN0ZXIgdGhlIE9BUzMgcGx1Z2luLiBUaGlzIHBsdWdpbiB1c2VzIHRoZSBGYXN0aWZ5IGxvZ2dlciBhbmQgY2FuIGJlIHByZXR0eSBjaGF0dHkgb24gYGRlYnVnYCwgc28gYmVhciB0aGF0IGluIG1pbmQuIGBwbHVnaW5PcHRzYCBpcyB2aXNpYmxlIGluIHRoYXQgZmlsZSBmb3IgYW4gZXhhbXBsZSwgYnV0IGl0J3MgYWxzbyBjb21tZW50ZWQgZXhoYXVzdGl2ZWx5IGZvciB5b3VyIEludGVsbFNlbnNpbmcgcGxlYXN1cmUgd2hpbGUgeW91J3JlIHdyaXRpbmcgaXQuCgpgYGB0cwpjb25zdCBQaW5nUmVzcG9uc2UgPSBzY2hlbWFUeXBlKCdQaW5nUmVzcG9uc2UnLCBUeXBlLk9iamVjdCh7IHBvbmc6IFR5cGUuQm9vbGVhbigpIH0pKTsKdHlwZSBQaW5nUmVzcG9uc2UgPSBTdGF0aWM8dHlwZW9mIFBpbmdSZXNwb25zZT47CmBgYAoKWW91ciBzY2hlbWEuIGBzY2hlbWFUeXBlYCB0YWtlcyBhIHN0cmluZyBhcyBhIG5hbWUsIHdoaWNoIF9tdXN0IGJlIHVuaXF1ZSBmb3IgeW91ciBlbnRpcmUgcHJvamVjdF8sIGFzIHdlbGwgYXMgYSBgQHNpbmNsYWlyL3R5cGVib3hgIGBUeXBlYCAod2hpY2ggeW91IGNhbiB0aGVuIHVzZSBhcyBhIFR5cGVTY3JpcHQgdHlwZSBieSBkb2luZyBgU3RhdGljPHR5cGVvZiBUPmAsIGl0J3MgYXdlc29tZSkuIFRoaXMgaXMgbm93IGEgYFRhZ2dlZFNjaGVtYWAsIHdoaWNoIGNhbiBiZSB1c2VkIGFueXdoZXJlIGEgbm9ybWFsIEpTT04gU2NoZW1hIG9iamVjdCBjYW4gYmUgdXNlZCB3aXRoaW4gRmFzdGlmeSBhbmQgd2lsbCBoYW5kbGUgdmFsaWRhdGlvbiBhcyB5b3Ugd291bGQgZXhwZWN0LgoKSWYgeW91IHVzZSBhIGBUYWdnZWRTY2hlbWFgIHdpdGhpbiBhbm90aGVyIHNjaGVtYSwgdGhlIE9BUzMgcGx1Z2luIGlzIHNtYXJ0IGVub3VnaCB0byBleHRyYWN0IGl0IGludG8gaXRzIG93biBPcGVuQVBJIGAjL2NvbXBvbmVudHMvc2NoZW1hcy9Zb3VyVHlwZUhlcmVgIGVudHJ5LCBzbyB5b3VyIGdlbmVyYXRlZCBjbGllbnRzIHdpbGwgYWxzbyBvbmx5IGhhdmUgdGhlIG1pbmltYWwgc2V0IG9mIG1vZGVsIGNsYXNzZXMsIGV0Yy4gdG8gd29ycnkgYWJvdXQuIERpdHRvIGhhdmluZyB0aGVtIGluIGFycmF5cyBhbmQgc28gb24uIEkndmUgdHJpZWQgdG8gbWFrZSB0aGlzIGFzIHNpbXBsZSB0byBkZWFsIHdpdGggYXMgcG9zc2libGU7IGlmIGl0IGFjdHMgaW4gd2F5cyB5b3UgZG9uJ3QgZXhwZWN0LCBfcGxlYXNlIGZpbGUgYW4gaXNzdWVfLgoKQW5kIG5vdyBsZXQncyBtYWtlIGEgcm91dGU6CgpgYGB0cwogIGF3YWl0IGZhc3RpZnkucmVnaXN0ZXIoYXN5bmMgKGZhc3RpZnk6IEZhc3RpZnlJbnN0YW5jZSkgPT4gewogICAgZmFzdGlmeS5yb3V0ZTx7IFJlcGx5OiBQaW5nUmVzcG9uc2UgfT4oewogICAgICB1cmw6ICcvcGluZycsCiAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgIHNjaGVtYTogewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICAyMDA6IFBpbmdSZXNwb25zZSwKICAgICAgICB9LAogICAgICB9LAogICAgICBvYXM6IHsKICAgICAgICBvcGVyYXRpb25JZDogJ3BpbmdQaW5nUGluZ0FuZERlZmluaXRlbHlOb3RQb25nJywKICAgICAgICBzdW1tYXJ5OiAiYSBwaW5nIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAgIGRlc2NyaXB0aW9uOiAiVGhpcyBwaW5nIHRvIHRoZSBzZXJ2ZXIgbGV0cyB5b3Uga25vdyB0aGF0IGl0IGhhcyBub3QgYmVlbiBlYXRlbiBieSBhIGdydWUuIiwKICAgICAgICBkZXByZWNhdGVkOiBmYWxzZSwKICAgICAgICB0YWdzOiBbJ21ldGEnXSwKICAgICAgfSwKICAgICAgaGFuZGxlcjogYXN5bmMgKHJlcSwgcmVwbHkpID0+IHsKICAgICAgICByZXR1cm4geyBwb25nOiB0cnVlIH07CiAgICAgIH0KICAgIH0pOwogIH0sIHsgcHJlZml4OiAnL2FwaScgfSk7CmBgYAoKWW91IGRvbid0IGhhdmUgdG8gcHV0IHlvdXJzIGluc2lkZSBhIHByZWZpeGVkIHJvdXRlLCBidXQgSSBsaWtlIHRvLCBzbywgd2VsbCwgdGhlcmUgeW91IGdvLgoKSWYgeW91IGRvIGEgYHlhcm4gZGVtb2AsIHlvdSdsbCBnZXQgYSBVSSB0aGF0IGxvb2tzIGxpa2UgdGhlIGZvbGxvd2luZzoKCiFbYSBkb2NzIHNjcmVlbnNob3RdKGh0dHBzOi8vaS5pbWd1ci5jb20vaU9QQXBtcS5wbmcpCgpBbmQgdGhlcmUgeW91IGdvLgoKIyMgQ29udHJpYnV0aW5nICMjCklzc3VlcyBhbmQgUFJzIHdlbGNvbWUhIENvbnN0cnVjdGl2ZSBjcml0aWNpc20gb24gaG93IHRvIGltcHJvdmUgdGhlIGxpYnJhcnkgd291bGQgYmUgYXdlc29tZSwgZXZlbiBhcyBJIHVzZSBpdCBpbiBteSBvd24gc3R1ZmYgYW5kIGZpZ3VyZSBvdXQgd2hlcmUgdG8gZ28gZnJvbSB0aGVyZSwgdG9vLgoKKipCZWZvcmUgeW91IHN0YXJ0IGluIG9uIGEgUFIsIGhvd2V2ZXIqKiwgcGxlYXNlIGRvIG1lIGEgc29saWQgYW5kIGRyb3AgYW4gaXNzdWUgc28gd2UgY2FuIGRpc2N1c3MgdGhlIGFwcHJvYWNoLiBUaGFua3MhCg==
    readmeEtag: '"76920a4d5019f1cf8aedd3dab0de7f661fe544f2fdfc81a495fd47d5aade1dc5"'
    readmeLastModified: Sun, 27 Mar 2022 01:32:36 GMT
    description: Developer-friendly OpenAPI3 tooling for Fastify that's easy to use.
    created: "2022-02-14T05:24:29Z"
    updated: "2022-03-27T01:30:08Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: eropple
    logo: https://avatars.githubusercontent.com/u/109262?v=4
    license: LGPL-3.0
    repoEtag: '"43b81f792849259054ee8d3a86c3cfd58c24b31fa8eec0a0f5c5dcb55674bf37"'
    repoLastModified: Sun, 27 Mar 2022 01:30:08 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/amitvsavant/jinja-template-2-open-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBKaW5qYSBUZW1wbGF0ZSB0byBPcGVuIEFQSSAzLjAgWUFNTApUaGlzIHJlcG9zaXRvcnkgcHJvdmlkZXMgc2FtcGxlIFB5dGhvbiAzLjcgY29kZSB0byBnZW5lcmF0ZSBPcGVuIEFQSSAzLjAgc3BlY2lmaWNhdGlvbiBZQU1MIGZpbGVzIHVzaW5nIEppbmphMiB0ZW1wbGF0ZS4gSXQgc2hvd3MgaG93IHRvIGdlbmVyYXRlIG11bHRpcGxlIHNpbWlsYXIgQVBJIHNwZWNpZmljYXRpb25zIGZyb20gYnkgYXBwbHlpbmcgZGF0YSBpbiBKc29uIGZvcm1hdCB0byBhIEppbmphMiB0ZW1wbGF0ZSBvZiBhbiBPcGVuIEFQSSBzcGVjaWZpY2F0aW9uIGZpbGUuIFRoZSBjb2RlIGdlbmVyYXRlcyBBUEkgc3BlY2lmaWNhdGlvbnMgZm9yIHNpbXBsZSBQZXQgU3RvcmUgYW5kIEJvb2sgU3RvcmUgQVBJcyB1c2luZyBhIGdlbmVyaWMgU3RvcmUgdGVtcGxhdGUgZmlsZS4KCiMjIFN0cnVjdHVyZSBvZiB0aGUgcHJvamVjdAoKIyMjIGRhdGEgZm9sZGVyCgoqKmRhdGEuanNvbjoqKiAgVGhlIEpzb24gZmlsZSBjb250YWluaW5nIHRoZSBkYXRhIG9mIG11bHRpcGxlIEFQSSBzcGVjaWZpY2F0aW9ucyB0byBiZSBnZW5lcmF0ZWQuCgojIyMgdGVtcGxhdGVzIGZvbGRlcgoqKnN0b3JlLXRlbXBsYXRlLnlhbWw6KiogR2VuZXJpYyB0ZW1wbGF0ZSBmaWxlIG9mIGEgU3RvcmUgQVBJLgoKIyMjIGdlbmVyYXRlZC1zcGVjIGZvbGRlcgpUaGUgZGVzdGluYXRpb24gZm9sZGVyIHdoZXJlIHRoZSBmaW5hbCBzcGVjaWZpY2F0aW9uIGZpbGVzIHdpbGwgYmUgY3JlYXRlZCBhZnRlciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBwcm9ncmFtLgoqKnN0b3JlLXRlbXBsYXRlLnlhbWw6KiogR2VuZXJpYyB0ZW1wbGF0ZSBmaWxlIG9mIGEgU3RvcmUgQVBJLgoKIyMgTGljZW5zZQotIFRoZSBzb3VyY2UgY29kZSBpbiB0aGlzIHByb2plY3QgaXMgcHVibGlzaGVkIHVuZGVyIFtNSVQgTGljZW5zZV0oaHR0cHM6Ly9naXRodWIuY29tL2FtaXR2c2F2YW50L2ppbmphLXRlbXBsYXRlLTItb3Blbi1hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCku
    description: Jinja Template to Open API 3.0 YAML
    created: "2020-12-30T19:31:30Z"
    updated: "2020-12-30T20:41:32Z"
    language: Python
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: amitvsavant
    logo: https://avatars.githubusercontent.com/u/30230131?v=4
    license: MIT
    repoEtag: '"729b73d854d1c78b1094daecd29e2a0d088a70f86681f36911792de64bac6287"'
    repoLastModified: Wed, 30 Dec 2020 20:41:32 GMT
    readmeEtag: '"b706f563474bca0c58096ce5b0ed627175984f5e3ce0dcb8ddedc2f4dcf13974"'
    readmeLastModified: Wed, 30 Dec 2020 20:39:11 GMT
  foundInMaster: true
  category:
    - Testing
    - Parsers
- source: openapi3 tags
  repository: https://github.com/claudiocifuentesalonso/spring-cloud-service-discovery
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzcHJpbmctY2xvdWQtc2VydmljZS1kaXNjb3ZlcnkKSW4gdGhpcyByZXBvc2l0b3J5IHdlIGhhdmUgdGhyZWUgbWljcm9zZXJ2aWNlcyB0byBpbXBsZW1lbnQgc2VydmljZSBkaXNjb3ZlcnkgdXNpbmcgc3ByaW5nIGNsb3VkLgoKIyMgVXNhZ2UKClR3byBvcHRpb25zIHRvIHJ1biB0aGUgYXBwbGljYXRpb25zOgoxLiBFeGVjdXRlIGVhY2ggYXBwbGljYXRpb24gc2VwYXJldGx5IGluIG9yZGVyIChldXJla2Etc2VydmVyLCBvcGVuLWFwaS1zcHJpbmdkb2MgYW5kIG9wZW4tYXBpLWNsaWVudCkgdXNpbmc6CgpgYGBiYXNoCm12biBzcHJpbmctYm9vdDpydW4KYGBgCgoyLiBCdWlsZCBkb2NrZXIgaW1hZ2VzIChEb2NrZXJmaWxlIHByZXNlbnQgZm9yIGVhY2ggYXBwbGljYXRpb24pIGFuZCBleGVjdXRlIHRoZSBhcHBsaWNhdGlvbnMgdXNpbmcgZG9ja2VyIGNvbXBvc2UgKGBgYGRvY2tlci1jb21wb3NlLXltbGBgYCBmaWxlKToKYGBgCmRvY2tlci1jb21wb3NlIHVwCmBgYAo=
    description: >-
      In this repository we have three microservices to implement service
      discovery using spring cloud.
    created: "2021-01-27T03:28:13Z"
    updated: "2021-02-01T01:36:08Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: ClaudioCifuentesAlonso
    logo: https://avatars.githubusercontent.com/u/31392117?v=4
    repoEtag: '"207b859d3f34c46cdf4ffb9d4f2341a62c617d31bc284dd795fcfb07f6264f5f"'
    repoLastModified: Mon, 01 Feb 2021 01:36:08 GMT
    readmeEtag: '"cbdd56056ca2ac492faffe6231727c6666afe0144325716e38c0389ea349580c"'
    readmeLastModified: Mon, 01 Feb 2021 01:29:43 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/sylvain12/mven-project
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBNVkVOIChNb25nb0RCLCBWdWUuSlMsIEV4cHJlc3MsIE5vZGUuSlMpIFBST0pFQ1QKCnRoZSBwcm9qZWN0IGltcGxlbWVudCBDUlVEIG9wZXJhdGlvbnMgb24gY2xpZW50cyBhbmQgcHJvdmlkZXJzLgoKLS0tCiMjIDEuIFJlcXVpcmVtZW50cwoKRm9yIGRldmVsb3BtZW50LCB5b3Ugd2lsbCBvbmx5IG5lZWQgYE5vZGUuanNgIGFuZCBhIG5vZGUgZ2xvYmFsIHBhY2thZ2UsIGBucG1gLCBgZ2l0YCwgYG1vbmdvZGJgIChGb3IgZGF0YWJhc2UpIGluc3RhbGxlZCBpbiB5b3VyIGVudmlyb25tZW50LgoKIyMjIGBOb2RlLmpzIC8gbnBtYAotICMjIyMgTm9kZSBpbnN0YWxsYXRpb24gb24gV2luZG93cwoKICBKdXN0IGdvIG9uIFtvZmZpY2lhbCBOb2RlLmpzIHdlYnNpdGVdKGh0dHBzOi8vbm9kZWpzLm9yZy8pIGFuZCBkb3dubG9hZCB0aGUgaW5zdGFsbGVyLgoKLSAjIyMjIE5vZGUgaW5zdGFsbGF0aW9uIG9uIExpbnV4IChVYnVudHUpCgogIFlvdSBjYW4gaW5zdGFsbCBub2RlanMgYW5kIG5wbSBlYXNpbHkgd2l0aCBhcHQgaW5zdGFsbCwganVzdCBydW4gdGhlIGZvbGxvd2luZyBjb21tYW5kcy4KCiAgICAgICQgc3VkbyBhcHQgdXBkYXRlCiAgICAgICQgc3VkbyBhcHQgaW5zdGFsbCBub2RlanMKICAgICAgJCBzdWRvIGFwdCBpbnN0YWxsIG5wbQoKLSAjIyMjIE90aGVyIE9wZXJhdGluZyBTeXN0ZW1zCiAgWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluc3RhbGxhdGlvbiBvbiB0aGUgW29mZmljaWFsIE5vZGUuanMgd2Vic2l0ZV0oaHR0cHM6Ly9ub2RlanMub3JnLykgYW5kIHRoZSBbb2ZmaWNpYWwgTlBNIHdlYnNpdGVdKGh0dHBzOi8vbnBtanMub3JnLykuCgpJZiB0aGUgaW5zdGFsbGF0aW9uIHdhcyBzdWNjZXNzZnVsLCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gcnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZC4KCiAgICAkIG5vZGUgLS12ZXJzaW9uCiAgICB2OC4xMS4zCgogICAgJCBucG0gLS12ZXJzaW9uCiAgICA2LjEuMAoKSWYgeW91IG5lZWQgdG8gdXBkYXRlIGBucG1gLCB5b3UgY2FuIG1ha2UgaXQgdXNpbmcgYG5wbWAhIENvb2wgcmlnaHQ/IEFmdGVyIHJ1bm5pbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kLCBqdXN0IG9wZW4gYWdhaW4gdGhlIGNvbW1hbmQgbGluZSBhbmQgYmUgaGFwcHkuCgogICAgJCBucG0gaW5zdGFsbCBucG0gLWcKCiMjIyBgR2l0YAotICMjIyMgR2l0IGluc3RhbGxhdGlvbiBvbiBXaW5kb3dzClZpc2l0OiB0aGlzIHNpdGUgaHR0cHM6Ly9naXQtc2NtLmNvbS8gYW5kIGRvd25sb2FkIGV4ZWN1dGFibGUgZmlsZSBhbmQgcnVuIGl0CgotICMjIyMgR2l0IGluc3RhbGxhdGlvbiBvbiBMaW51eChVYnVudHUpCgogICAgICAgJCBzdWRvIGFwdC1nZXQgaW5zdGFsbCBnaXQKCkFmdGVyIHlvdSBjYW4gcnVuIHRoaXMgY29tbWFuZCB0byBjaGVjawoKICAgICAgJCBnaXQgLS12ZXJzaW9uCiAgICAgIGdpdCB2ZXJzaW9uIDIuMjUuMQoKIyMjIGBNb25nb0RCYAoKVmlzaXQgdGhpcyBsaW5rIGFuZCBmb2xsb3cgdGhlIGluc3RhbGxhdGlvbiBpbnN0cnVjdGlvbnMgZm9yIHlvdXIgT1MKCj0+IFtVYnVudHUgaW5zdGFsbGF0aW9uIGxpbmtdKGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvdHV0b3JpYWwvaW5zdGFsbC1tb25nb2RiLW9uLXVidW50dS8pCgo9PiBbV2luZG93cyBpbnN0YWxsYXRpb24gbGlua10oaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC90dXRvcmlhbC9pbnN0YWxsLW1vbmdvZGItb24td2luZG93cy8pCgo9PiBbbWFjT1MgaW5zdGFsbGF0aW9uIGxpbmtdKGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvdHV0b3JpYWwvaW5zdGFsbC1tb25nb2RiLW9uLW9zLXgtdGFyYmFsbC8pCgpBZnRlciBtb25nb0RCIGluc3RhbGxpbmcgcnVuCgogICAgJCBtb25nbyAtLXZlcnNpb24KCiAgICAgIEJ1aWxkIEluZm86IHsKICAgICAgInZlcnNpb24iOiAiNC40LjQiLAogICAgICAiZ2l0VmVyc2lvbiI6ICI4ZGIzMGE2M2RiMWE5ZDg0YmRjYWQwYzgzMzY5NjIzZjcwOGUwMzk3IiwKICAgICAgIm1vZHVsZXMiOiBbXSwKICAgICAgImFsbG9jYXRvciI6ICJzeXN0ZW0iLAogICAgICAiZW52aXJvbm1lbnQiOiB7CiAgICAgICAgICAiZGlzdGFyY2giOiAieDg2XzY0IiwKICAgICAgICAgICJ0YXJnZXRfYXJjaCI6ICJ4ODZfNjQiCiAgICAgIH0KCkNvbm5lY3QgdG8gbW9uZ29EQiBzaGVsbAoKICAgICQgbW9uZ28KICAgID4gc2hvdyBkYnMKCiAgICBhZG1pbiAgICAgICAgIDAuMDAwR0IKICAgIGNsaWVudC1hcHAgICAgMC4wMDBHQgogICAgY29uZmlnICAgICAgICAwLjAwMEdCCiAgICBsb2NhbCAgICAgICAgIDAuMDAwR0IKCi0tLQojIyAyLiBJbnN0YWxsIHByb2plY3QKCgpDbG9uZSB0aGUgcHJvamVjdCBjb2RlIG9uIHlvdXIgbWFjaGluZQoKICAgICQgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zeWx2YWluMTIvbXZlbi1wcm9qZWN0CiAgICAkIGNkIG12ZW4tcHJvamVjdAogICAgJCBscwogICAgUmVhZG1lLm1kICAgY2xpZW50ICAgY29uZmlnLmV4YW1wbGUuZW52IG1vZGVscyAgIHBhY2thZ2UtbG9jay5qc29uICByb3V0ZXMgICAgIHV0aWxzIGFwcC5qcyAgICBjb25maWcuZW52ICAgIGNvbnRyb2xsZXJzICAgcGFja2FnZS5qc29uICBzZXJ2ZXIuanMKCiMjIDMuIENvbmZpZ3VyYXRvbgogIyMjIGBOb2RlIENvbmZpZ3VyYXRpb25gCiBBdCB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBydW4gOgoKICAgICQgbnBtIGluc3RhbGwKICMjIyBgQ2xpZW50IHNpZGUgKFZ1ZS5KUykgQ29uZmlndXJhdGlvbmAKICAgICQgY2QgY2xpZW50CiAgICAkIG5wbSBpbnN0YWxsCgogIyMjIGBEYXRhYmFzZSBDb25maWd1cmF0aW9uYApDb25uZWN0IHRvIG1vbmdvREIgYW5kIGNyZWF0ZSBhIGRhdGFiYXNlCgogICAgJCBtb25nbwogICAgPiB1c2UgPGRhdGFiYXNlX25hbWU+CiAgICBzd2l0Y2hlZCB0byBkYiA8ZGF0YWJhc2VfbmFtZT4KICAgID4gcXVpdCgpCiAgICAkIAogICAgCiMjIyBgRW52aXJvbm1lbnQgdmFyaWFibGVzIGNvbmZpZ3VyYXRpb25gCm1vdmUgdGhlIGBjb25maWcuZXhhbXBsZS5lbnZgIHRvIGBjb25maWcuZW52YApNYWtlIHN1cmUgdG8gaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QKCiAgICAkIG12IGNvbmZpZy5leGFtcGxlLmVudiBjb25maWcuZW52CgpvcGVuIHRoZSBgY29uZmlnLmVudmAgZmlsZSBhbmQgc2V0IHZhcmlhYmxlIGVudmlyb25tZW50CgpSZXBsYWNlIGFsbCB0aGUgdmFyaWFibGUgYmV0d2VlbiB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmcgdmFsdWUKCiAgICBQT1JUPTxOT0RFX1NFUlZFUl9QT1JUPgogICAgREFUQUJBU0VfTE9DQUw9bW9uZ29kYjovL2xvY2FsaG9zdDo8TU9OR09EQl9QT1JUPi88REFUQUJBU0VfTkFNRT4KICAgIERBVEFCQVNFX1BST0Q9PFBST0RVQ1RJT05fREFUQUJBU0VfVVJJPgogICAgTk9ERV9FTlY9ZGV2ZWxvcG1lbnQKTkI6IGZvciBkZXBsb3ltZW50IHdlIHVzZSBgcHJvZHVjdGlvbmAKCkFmdGVyIHZhcmlhYmxlcyBlbnZpcm9ubWVudCBjb25maWd1cmF0aW9uLCBzZXQgYE5PREVfUE9SVGAgb24gdnVlLmpzIGNvbmZpZyB0byBwcm94eSBub2RlLmpzIHNlcnZlciBBUEkuIE1ha2Ugc3VyZSB0byBiZSBvbiBjbGllbnQgZm9sZGVyLCBhbmQgb3BlbiBgdnVlLmNvbmZpZy5qc2AgZmlsZS4KCiAgICAkIG5hbm8gdnVlLmNvbmZpZy5qcwoKICAgIHByb3h5OiB7CiAgICAgICcvYXBpL3YxJzogewogICAgICAgIHRhcmdldDogYGh0dHA6Ly9sb2NhbGhvc3Q6PE5PREVfUE9SVD5gCiAgICAgIH0KICAgIH0KRG9uJ3QgZm9yZ2V0IHRvIHNhdmUgdGhlIGZpbGUuCgojIyA0LiBSdW5uaW5nIHRoZSBwcm9qZWN0CgojIyMgYGRldmVsb3BtZW50YAogICAgJCBucG0gcnVuIGRldgoKICBgTE9DQUxfU0VSVkVSYCA6IGBsb2NhbGhvc3Q6Tk9ERV9QT1JUYAoKICBgQVBJX1JPVVRFYCA6IGBsb2NhbGhvc3Q6Tk9ERV9QT1JUL2FwaS1kb2NzYAoKICBgQ0xJRU5UX0FQUGAgOiBgbG9jYWxob3N0OjgwMDBgCiAgCgojIyAtIFBST0pFQ1QgQVBJIApWaXNpdCB0aGlzIGFkZHJlc3Mgb24geW91ciB3ZWIgYnJvd3NlciBmb3IgcHJvamVjdCBBUEkgZG9jdW1lbnRhdGlvbiB3aXRoIFtzd2FnZ2VyXShodHRwczovL3N3YWdnZXIuaW8vKSBhbmQgW29wZW5BUEldKGh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZy8pCgoKIyBgbG9jYWxob3N0OjxOT0RFX1BPUlQ+L2FwaS1kb2NzYAoKPCEtLSAjIyMgYHByb2R1Y3Rpb25gCiAgICAkIG5wbSBydW4gcHJvZCAtLT4KCgojIyA1LiBUZXN0aW5nCkNvbWluZyBzb29uLi4uIQ==
    description: MVEN STACK project (Mongodb, Vue.JS, Express, Node.JS)
    created: "2021-04-14T23:35:46Z"
    updated: "2021-04-23T00:59:09Z"
    language: Vue
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: sylvain12
    logo: https://avatars.githubusercontent.com/u/26870715?v=4
    repoEtag: '"b53210b7eb1cf1ca666d9c63f806543869d730e9d0634bbea38ebbfdeb7839a0"'
    repoLastModified: Fri, 23 Apr 2021 00:59:09 GMT
    readmeEtag: '"7287f13c44f996fc05235c6fd49d1c938b18e581990200e717f5751ddb5515da"'
    readmeLastModified: Fri, 23 Apr 2021 00:58:55 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/open-banking/products
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBwcm9kdWN0cwpPcGVuIEJhbmtpbmcgUHJvZHVjdHMgQVBJIGJ1aWx0IG9uIHRvcCBvZiBsaWdodC00ago=
    description: Open Banking Products API built on top of light-4j
    created: "2020-01-23T19:02:29Z"
    updated: "2021-12-13T15:22:41Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: open-banking
    logo: https://avatars.githubusercontent.com/u/38990562?v=4
    license: Apache-2.0
    repoEtag: '"16b81f42869f17fa4b5c7751d002033772c97fd71f236b95fd674fc6f5cfb733"'
    repoLastModified: Fri, 07 Jan 2022 16:26:51 GMT
    readmeEtag: '"eeafd0d393530d3b6ebccd78408d6e3838b4208b50fd8ef4c5dd7ba61fe636f2"'
    readmeLastModified: Mon, 28 Feb 2022 02:11:32 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/pauliorandall/go-qlueless-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBHbyBRbHVlbGVzcyBBUEkKClwqXCpcKioqRGlzY29udGludWVkOiBhcmNoaXZlZCBmb3IgcmVmZXJlbmNlIG9ubHkuKipcKlwqXCoKCkEgR28gaW1wbGVtZW50YXRpb24gb2YgYSBzaW1wbGUgQVBJIHRvIHN0b3JlIGFuZCBhY2Nlc3MgS2FuYmFuIHJlbGF0ZWQgZW50aXRpZXMgYW5kIGV2ZW50cy4KCi0gVGhpcyBwcm9qZWN0IGlzIHVuZGVydGFrZW4gd2l0aCB0aGUgYXVkaWJsZSBhaWQgb2YgW0F2YW50YXNpYV0oaHR0cHM6Ly93d3cuYXZhbnRhc2lhLm5ldCkgYW5kIFtEcmVhbSBUaGVhdGVyXShodHRwOi8vZHJlYW10aGVhdGVyLm5ldCkKLSBUaGlzIFJFQURNRSB3YXMgc3RydWN0dXJlZCBvbiBhIHRlbXBsYXRlIGJ5IFtQdXJwbGVCb290aF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vUHVycGxlQm9vdGgvMTA5MzExYmIwMzYxZjMyZDg3YTIpCgojIyBXaHkgaXMgdGhlIHByb2plY3QgY2FsbGVkICdRbHVlbGVzcyc/CgpJIGFwb2xvZ2lzZSwgaXQncyBhIHBvb3IgcGxheSBvbiB3b3JkcyBhdHRlbXB0aW5nIHRvIGNvbWJpbmU6CgoxLiBgQ2x1ZWxlc3NgOiBPbmUgb2YgdGhlIHByb2plY3RzIHB1cnBvc2VzIGlzIHRvIGxlYXJuIGFuZCBleHBlcmltZW50IHdpdGggdGVjaG5vbG9naWVzIHN1Y2ggYXMgR28sIFJlYWN0LCBhbmQgcHVibGljIHBpcGVsaW5lIHRvb2xzOyBJJ20gbW9kZXJhdGVseSBjbHVlbGVzcyBhYm91dCB0aGUgbGF0dGVyIHR3by4KMi4gYFF1ZXVlbGVzc2A6IEkgd2FudCB0byBleHBlcmltZW50IHdpdGggd2F5cyBvZiB2aXN1YWxpc2luZyBhbmQgZW1waGFzaXNpbmcgd29yayBpbiBwcm9ncmVzcyB0aGF0IGlzIG5vdCwgaW4gZmFjdCwgYmVpbmcgcHJvZ3Jlc3NlZCwgaS5lLiBoYWxmIGZpbmlzaGVkIHdvcmsgc2l0dGluZyBpbiBxdWV1ZXMgd2FpdGluZyBmb3Igc29tZW9uZSB0byBmaW5pc2ggdGhlbS4gT25jZSB2aXNpYmxlIGFuZCBiZWluZyBtZWFzdXJlZCBJIGNhbiBzdGFydCB0byBhbmFseXplIGl0LCBhbmQgZXhwZXJpbWVudCB3aXRoIHdheXMgb2YgcmVkdWNpbmcgYW5kIGF2b2lkaW5nIGl0IQoKIyMgR2V0dGluZyBTdGFydGVkCgojIyMgUHJlcmVxdWlzaXRlcwoKLSBHbzogW2h0dHBzOi8vZ29sYW5nLm9yZy9kbC9dCi0gR2l0OiBbaHR0cHM6Ly9naXQtc2NtLmNvbV0KLSBBbiBpbnRlcm5ldCBjb25uZWN0aW9uCi0gQSBkZWNlbnQgd2ViIGJyb3dzZXIKCiMjIyBSdW5uaW5nCgpOYXZpZ2F0ZSB0byBhIHN1aXRhYmxlIGRpcmVjdG9yeSwgb3BlbiBhIHRlcm1pbmFsLCBhbmQgY29weStwYXN0ZSB0aGUgZm9sbG93aW5nOgoKYGBgCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vUGF1bGlvUmFuZGFsbC9nby1xbHVlbGVzcy1hcGkuZ2l0CmNkIGdvLXFsdWVsZXNzLWFwaS9zY3JpcHRzCi4vYnVpbGQtdGVzdC1hcGktcnVuLmdvCmBgYAoKSW4gb3JkZXIsIHRoaXMgd2lsbDoKCjEuIENsb25lIHRoZSBzb3VyY2UgY29kZSByZXBvc2l0b3J5CjIuIE5hdmlnYXRlIHRvIHRoZSB1c2VyIGBzY3JpcHRzYCBkaXJlY3RvcnkKMy4gRXhlY3V0ZSBhIGJ1aWxkIG9mIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24KNC4gRXhlY3V0ZSBhIGJ1aWxkIG9mIHRoZSBhcHBsaWNhdGlvbgo1LiBFeGVjdXRlIHVuaXQgdGVzdHMgd2l0aGluIHRoZSBhcHBsaWNhdGlvbgo2LiBFeGVjdXRlIGJsYWNrIGJveCBBUEkgdGVzdHMgb24gdGhlIGFwcGxpY2F0aW9uCjcuIFN0YXJ0cyB0aGUgYXBwbGljYXRpb24KCiMjIyBSdW5uaW5nIHVuaXQgdGVzdHMKCk9wZW4gYSB0ZXJtaW5hbCBhdCB0aGUgcHJvamVjdCByb290OgoKYGBgCmNkIC9zY3JpcHRzCi4vYnVpbGQtdGVzdC5nbwpgYGAKCiMjIyBSdW5uaW5nIEFQSSB0ZXN0cwoKT3BlbiBhIHRlcm1pbmFsIGF0IHRoZSBwcm9qZWN0IHJvb3Q6CgpgYGAKY2QgL3NjcmlwdHMKLi9idWlsZC10ZXN0LWFwaS5nbwpgYGAKCiMjIyBEZXBsb3ltZW50IAoKPiBDb21pbmcgc29vbiEgU2VlICoqUnVubmluZyoqIGluIHRoZSBtZWFudGltZS4KCiMjIEJ1aWx0IFdpdGgKCi0gW09wZW5BUEldKGh0dHBzOi8vc3dhZ2dlci5pby9kb2NzL3NwZWNpZmljYXRpb24vYWJvdXQvKQotIFtHb10oaHR0cHM6Ly9nb2xhbmcub3JnKQotIFt0ZXN0aWZ5XShodHRwczovL2dpdGh1Yi5jb20vc3RyZXRjaHIvdGVzdGlmeSkKLSBbbWFwc3RydWN0dXJlXShodHRwczovL2dpdGh1Yi5jb20vbWl0Y2hlbGxoL21hcHN0cnVjdHVyZSkKCiMjIENvbnRyaWJ1dGluZwoKPiBOb3QgYXBwbGljYWJsZS4KCiMjIFZlcnNpb25pbmcKClRoaXMgcHJvamVjdHMgQVBJIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9QYXVsaW9SYW5kYWxsL2dvLXFsdWVsZXNzLWFwaS9ibG9iL21hc3Rlci9hcGkvQ0hBTkdFTE9HLm1kKSBmb3JtYXQgaXMgYmFzZWQgb24gW0tlZXAgYSBDaGFuZ2Vsb2ddKGh0dHBzOi8va2VlcGFjaGFuZ2Vsb2cuY29tL2VuLzEuMC4wLyksIGFuZCB0aGUgQVBJIGFkaGVyZXMgdG8gW1NlbWFudGljIFZlcnNpb25pbmddKGh0dHBzOi8vc2VtdmVyLm9yZy9zcGVjL3YyLjAuMC5odG1sKS4KCiMjIEF1dGhvcnMKCi0gW01lXShodHRwczovL2dpdGh1Yi5jb20vUGF1bGlvUmFuZGFsbCkKCiMjIExpY2Vuc2UKClRoaXMgcHJvamVjdCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgW01JVCBMaWNlbnNlXShodHRwczovL2dpdGh1Yi5jb20vUGF1bGlvUmFuZGFsbC9nby1xbHVlbGVzcy1hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRSkuCgojIyBBY2tub3dsZWRnbWVudHMKCi0gSW5mbHVlbmNlcwogIC0gJ1RoZSBHb2FsJyBieSBFbGl5aGFodSBNLiBHb2xkcmF0dAogIC0gQ29udGludW91cyBJbnRlZ3JhdGlvbgogIC0gQ29udGludW91cyBEZWxpdmVyeQo=
    description: >-
      *Discontinued* Experimenting with ideas by building a simple Go web server
      exposing a TODO lists
    created: "2019-03-09T12:38:15Z"
    updated: "2020-01-23T15:01:36Z"
    language: Go
    archived: true
    stars: 0
    watchers: 0
    forks: 0
    owner: PaulioRandall
    logo: https://avatars.githubusercontent.com/u/29413800?v=4
    license: MIT
    repoEtag: '"5d030efc0686080279b44c11042fbb461296299a39bfcc4f3f706d0147d0437b"'
    repoLastModified: Thu, 23 Jan 2020 15:01:36 GMT
    readmeEtag: '"5abd27cf64bbd104e5aaa8454b0461dd1fabf8d701189b1b2abc94dfd5c5ee42"'
    readmeLastModified: Thu, 23 Jan 2020 15:01:18 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/modyuan/openapitomarkdown
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpVG9NYXJrZG93bgpjb252ZXJ0IG9wZW5BcGkzIGpzb24gZmlsZSB0byBtYXJrZG93biBmaWxlCgrmiopPcGVuQVBJM+eahGpzb27moLzlvI/vvIwg6L2s5o2i5Li6bWFya2Rvd27moLzlvI/vvIzmlrnkvr/pnZnmgIHlgqjlrZjjgIIKCuaehOaIkOaWueazleWPguiAg+S6hltzd2FnZ2VyLWJvb3RzdHJhcC11aV0oaHR0cHM6Ly9naXRodWIuY29tL3hpYW95bWluL3N3YWdnZXItYm9vdHN0cmFwLXVpKQoK
    description: convert openApi3 json file to markdown file
    created: "2020-07-11T23:50:06Z"
    updated: "2020-07-11T23:55:19Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: modyuan
    logo: https://avatars.githubusercontent.com/u/18202493?v=4
    license: MIT
    repoEtag: '"102e109f2a3b0cb54561ee6f75fc10074baa21dea220158244ccb875911d79ba"'
    repoLastModified: Sat, 11 Jul 2020 23:55:19 GMT
    readmeEtag: '"5891e89b4f472d1fc5be3ac7d6b1d2a154906436c68445fef068f426d2199eff"'
    readmeLastModified: Sat, 11 Jul 2020 23:53:38 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/tumanina/reportingsystem
  v3: true
  repositoryMetadata:
    description: null
    created: "2020-11-10T20:15:25Z"
    updated: "2021-03-07T13:22:56Z"
    language: C#
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: tumanina
    logo: https://avatars.githubusercontent.com/u/17797666?v=4
    repoEtag: '"f2041ef43c7eb3b700bb9506f9883fd5d6c20aa540d540d431249b85e1c32c2c"'
    repoLastModified: Sun, 07 Mar 2021 13:22:56 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/luisramos08/cliente_api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      CiMjIENsaWVudGUgQXBpCgpGdWUgdW5hIEFQSSBkZXNhcnJvbGxhZGEgY29tbyBwcnVlYmEgdGVjbmljYSBkZSBPcmlvblRlay4KCgoKIyMgU2UgdXRpbGl6w7M6CgotIFNwcmluZyBCb290Ci0gTWF2ZW4KLSBPcGVuQXBpIFVJIC0gU3dhZ2dlcgotIEgyIChDb21vIGdlc3RvciBkZSBiYXNlIGRlIGRhdG9zIGVuIG1lbW9yaWEpCi0gTG9tYm9rIAoKCiMjIFBydWViYXMKCllhIHF1ZSBzZSBpbmNsdXnDsyB1bmEgaW50ZXJmYXogZGUgcHJ1ZWJhIHF1ZSBzZSBhZ3JlZ2EgZGVzZGUgU3dhZ2dlci4KVW5hIHZleiBlbCBwcm95ZWN0byBlc3RlIGNvcnJpZW5kbyBzZSBwdWVkZSB1dGlsaXphciBlbCBzaWd1aWVudGUgbGluayBwYXJhIGhhY2VyIGxhcyBwcnVlYmFzIGRlIGx1Z2FyOgoKLSBodHRwOi8vbG9jYWxob3N0OjgwODAvc3dhZ2dlci11aS9pbmRleC5odG1sCg==
    readmeEtag: '"745960b03cfb724d5b7ad5bf62cd0c9a587baee144471e4e1ec2086f765f9fec"'
    readmeLastModified: Sat, 23 Apr 2022 14:16:21 GMT
    description: API RESTFul en Java Spring Boot
    created: "2022-04-23T12:20:05Z"
    updated: "2022-04-23T15:14:53Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: LuisRamos08
    logo: https://avatars.githubusercontent.com/u/35547126?v=4
    repoEtag: '"6dff815472a3dfb6bf45603a1ec556bfc5b393ca93f1ab52ee234ba7c83383a0"'
    repoLastModified: Sat, 23 Apr 2022 15:14:53 GMT
  foundInMaster: true
  category:
    - Editors
    - Sdk
- source: openapi3 tags
  repository: https://github.com/semestry/api-specs
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBhcGktc3BlY3MKClRoaXMgcmVwb3NpdG9yeSBjb250YWlucyBBUEkgc3BlY2lmaWNhdGlvbnMgYW5kIGdlbmVyYXRlZCBkb2N1bWVudGF0aW9uIGZvciBFdmVvaCdzIEFQSXMuCgojIyBQdWJsaXNoaW5nCgpUaGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbnMgYXJlIGdlbmVyYXRlZCB1c2luZyBSZURvYy4gClByb2R1Y3Rpb24gQVBJIGRvY3VtZW50YXRpb24gcGFnZXMgYXJlIGF1dG9tYXRpY2FsbHkgcHVibGlzaGVkIGJ5IEdpdGh1YiBQYWdlcyB3aGVuIGNoYW5nZXMgYXJlIHB1c2hlZCB0byB0aGUgYG1hc3RlcmAgYnJhbmNoLgoKIyMgRGV2ZWxvcG1lbnQKCiMjIyBWaWV3aW5nIGRvY3VtZW50YXRpb24gbG9jYWxseQoKU3BlY2lmaWNhdGlvbnMgY2FuIGJlIHNlcnZlZCBsb2NhbGx5IHVzaW5nIFlhcm4gY29tbWFuZHM6CgpgeWFybiBzZXJ2ZTo8c3BlYz5gCgpGb3IgZXhhbXBsZToKCmB5YXJuIHNlcnZlOmVjaG8td2ViaG9va3NgCgpEb2N1bWVudGF0aW9uIGlzIGF2YWlsYWJsZSBhdCBgaHR0cDovL2xvY2FsaG9zdDozMDAwYC4KCkNoYW5nZXMgdG8gc291cmNlIGZpbGVzIGFyZSBhdXRvbWF0aWNhbGx5IHByb2Nlc3NlZCwgYWx0aG91Z2ggeW91ciBicm93c2VyIHNob3VsZCBiZSBtYW51YWxseSByZWZyZXNoZWQuCgojIyMgTGludGluZyBzcGVjaWZpY2F0aW9ucwoKTGludGluZyBpcyBwZXJmb3JtZWQgdXNpbmcgU3BlY2N5LgoKTGludCB0aGUgc3BlY3MgdXNpbmcgdGhlIGZvbGxvd2luZyBZYXJuIGNvbW1hbmQ6CgpgeWFybiBsaW50YAoKIyMjIEFkZGluZyBhIEFQSSBzcGVjaWZpY2F0aW9uCgotIEFkZCB0aGUgT3BlbkFQSSAzLjAgZmlsZSB0byBgL3NwZWNgLgotIENyZWF0ZSBhIEhUTUwgZmlsZSBpbiBgL2RvY3NgIHNlcnZpbmcgdGhlIHNwZWNpZmljYXRpb24uCi0gQWRkIGEgbGluayB0byB0aGUgc3BlY2lmaWNhdGlvbiBpbiBgL2RvY3MvaW5kZXguaHRtbGAuIAotIEFkZCBhIGBsaW50OjxzcGVjPmAgc2NyaXB0IGluIGBwYWNrYWdlLmpzb25gLgotIEFkZCBhIGBzZXJ2ZTo8c3BlYz5gIHNjcmlwdCBpbiBgcGFja2FnZS5qc29uYC4K
    description: Eveoh API specifications
    created: "2019-05-17T14:31:35Z"
    updated: "2021-01-06T10:33:05Z"
    language: null
    archived: true
    stars: 0
    watchers: 0
    forks: 1
    owner: semestry
    logo: https://avatars.githubusercontent.com/u/1628298?v=4
    repoEtag: '"7935c161381bc5544fdaa2302bcf988cdf35f89b9f767c2e3de48b64bdcfaebd"'
    repoLastModified: Wed, 06 Jan 2021 10:33:05 GMT
    readmeEtag: '"0ff213427d891c4b1ac9a453b7fe3f483b8991150ea465d5239dfa34a8c17233"'
    readmeLastModified: Mon, 10 Aug 2020 07:45:20 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/api-gateway
  v3: true
  repositoryMetadata:
    base64Readme: IyBhcGktZ2F0ZXdheQoK572R5YWzCg==
    description: 财务管理系统-后端服务-网关
    created: "2021-03-20T11:52:58Z"
    updated: "2021-03-20T13:23:16Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"6b568a5d63ac4c46a338700e561dcecfb6388a88e4dc7d6da829bea525455887"'
    repoLastModified: Sat, 20 Mar 2021 13:23:16 GMT
    readmeEtag: '"146ebc3dc467453ad8049921c66758f34691b2ea4d4f2aa4ddc9c39ebf101883"'
    readmeLastModified: Sat, 20 Mar 2021 11:57:36 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/mukul273/springboot-react
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzcHJpbmdib290LXJlYWN0ClNwcmluZyBib290IHdpdGggUmVhY3RKcyBmdWxsIHN0YWNrCgpUaGlzIHByb2plY3QgdXNlcyBTcHJpbmcgYm9vdCAyLjMuNiwgUmVhY3RKcywgTXlTcWwsIFNwcmluZyBEYXRhIEpQQSwgSmF2YSA4LCBsb21ib2sgZXRjLgoKVGhpcyBpcyBFbXBsb3llZSBhZGQsIFVwZGF0ZSwgZGVsZXRlIGFuZCByZWFkIChDUlVEKSBVc2UgY2FzZSBhcHBsaWNhdGlvbiAKClRoaXMgYXBwbGljYXRpb24gaGFzIGJlZW4gdXBkYXRlZCB3aXRoIE9wZW5BUEkgMy4wIHNwZWNpZmljYXRpb24gIApHbyB0byAqIFtMb2NhbEhvc3QgT3BlbkFQSV0oaHR0cDovL2xvY2FsaG9zdDo4MDgxL3YzL2FwaS1kb2NzKSAqKiBQbGVhc2UgY2hhbmdlIHlvdXIgcG9ydCAgICAKClRPIGNoYW5nZSB0aGUgQVBJIGRvYyBVUkwgYWJvdmUKUGxlYXNlIHJlZmVyIHRvIHRoZSBhcHBsaWNhdGlvbi5wcm9wZXJ0aWVzIGZpbGUKTG9vayBmb3Igc3ByaW5nZG9jLmFwaS1kb2NzLnBhdGggcGFyYW0gYW5kIGNvbmZpZ3VyZSB5b3VyIHZhbHVlCioqIFBsZWFzZSByZW1lbWJlciB0aGF0IG9uY2UgeW91IGN1c3RvbWl6ZSB0aGUgQVBJIHVybCB0aGVuIHRoZSBkZWZhdWx0IHYzL2FwaS1kb2NzIHdpbGwgIApub3Qgd29yay4KCioqIFBsZWFzZSBhcHBlbmQgLnlhbWwgdG8gdGhlIE9wZW5BUEkgdG8gZG93bmxvYWQgdGhlIEFQSSBzcGVjaWZpY2F0aW9uIGZpbGUsCgpTd2FnZ2VyIGRvY3VtZW50YXRpb24gaXMgc3RpbGwgYXZhaWxhYmxlCkdvIHRvICogW0xvY2FsSG9zdCBTd2FnZ2VyRG9jXShodHRwOi8vbG9jYWxob3N0OjgwODEvc3dhZ2dlci11aS5odG1sKSAqKiBQbGVhc2UgY2hhbmdlIHlvdXIgcG9ydCAKUGxlYXNlIHNwZWNpZnkgL2VtcGxveWVlLWFwaSBpbiB0aGUgZXhwbG9yZSBzZWFyY2gKCgo=
    description: Spring boot with ReactJs full stack
    created: "2020-11-25T15:35:50Z"
    updated: "2020-12-01T17:05:49Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: mukul273
    logo: https://avatars.githubusercontent.com/u/5340977?v=4
    repoEtag: '"294b707f25d1093575bf421eb937bfb7dbf46378591b366680b56e652d8d8d77"'
    repoLastModified: Tue, 01 Dec 2020 17:05:49 GMT
    readmeEtag: '"e9bd66786580336b98811e7482f640fa2d526932e4ce2108fcf08eaf3eac55eb"'
    readmeLastModified: Tue, 01 Dec 2020 16:23:42 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/bharathbhargavgb/short-url
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzaG9ydC11cmwKQSBzaW1wbGUgVVJMIHNob3J0ZW5lciBpbXBsZW1lbnRlZCBpbiBHbyB1c2luZyBBV1MgTGFtYmRhIGFuZCBEeW5hbW9EQi4KClshW0FjdGlvbiBzdGF0dXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9iaGFyYXRoYmhhcmdhdmdiL3Nob3J0LXVybC93b3JrZmxvd3MvR28vYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL2JoYXJhdGhiaGFyZ2F2Z2Ivc2hvcnQtdXJsL2FjdGlvbnMpCgojIyBPcGVuQVBJIDMuMCBzcGVjcwpodHRwczovL2FwcC5zd2FnZ2VyaHViLmNvbS9hcGlzLWRvY3MvcmVzdXJnZW5jZS9zaG9ydGVuLzEuMC4wCg==
    description: URL shortener using Go | AWS
    created: "2021-05-02T06:33:28Z"
    updated: "2021-06-13T16:28:05Z"
    language: Go
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: bharathbhargavgb
    logo: https://avatars.githubusercontent.com/u/6514305?v=4
    repoEtag: '"3da3a90fe8128a6d6a0636f5a3b146e4cfc940b83f9fb35abd90245224f1851e"'
    repoLastModified: Sun, 13 Jun 2021 16:28:05 GMT
    readmeEtag: '"bf43b116766825707a0d440c0c9dd3203536291429c2ba4cb4330791e49be6b5"'
    readmeLastModified: Sun, 13 Jun 2021 16:27:53 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/camptocamp/geoserver-rest-openapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBHZW9TZXJ2ZXIgSmF2YSBSRVNUIGNsaWVudAoKIyMgUnVuIGludGVncmF0aW9uIHRlc3RzOgoKYGBgCm12biB2ZXJpZnkgLVBkb2NrZXIKYGBgCgpXaWxsIGZpcmUgdXAgdGhlIGdlb3NlcnZlciBkb2NrZXIgY29udGFpbmVyIGF0IHByZS1pbnRlZ3JhdGlvbi10ZXN0cywgcnVuIHRoZSB0ZXN0cyBhdAppbnRlZ3JhdGlvbi10ZXN0LCBhbmQgc2h1dCB0aGUgY29udGFpbmVyIGRvd24gYXQgcG9zdC1pbnRlZ3JhdGlvbi10ZXN0cy4KCiMjIFJ1biBmcm9tIElERToKCkhhdmUgdGhlIEdlb1NlcnZlciBkb2NrZXIgY29udGFpbmVyIHJ1bm5pbmcgYmVmb3JlIGV4ZWN1dGluZyB0aGUgdGVzdHMgZnJvbSB0aGUgSURFOgoKYGBgCmRvY2tlciBydW4gLWl0IC0tcm0gLS1uYW1lIGdzdGVzdHMgLXA4MDgwOjgwODAgb3NjYXJmb250cy9nZW9zZXJ2ZXI6Mi4xNS40CmBgYAoKUGFzcyB0aGUgZm9sbG93aW5nIGVudmlyb25tZW50IHZhcmlhYmxlIHRvIHRoZSB0ZXN0IHJ1biBjb25maWd1cmF0aW9uIG9uIHRoZSBJREU6CgpgYGAKLURnZW9zZXJ2ZXJfYXBpX3VybD1odHRwOi8vbG9jYWxob3N0OjgwODAvZ2Vvc2VydmVyL3Jlc3QKYGBgCgo=
    description: >-
      GeoServer REST client based on curated OpenAPI 3 document, using
      openapi-codegen to generate the client, and customized code to simplify
      it.
    created: "2021-02-02T09:03:44Z"
    updated: "2021-02-18T01:36:05Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 4
    owner: camptocamp
    logo: https://avatars.githubusercontent.com/u/28109?v=4
    repoEtag: '"73648a7a850eef8248ecb5a080c136a18f130fd716bb21717b1176726658b729"'
    repoLastModified: Thu, 18 Feb 2021 01:36:05 GMT
    readmeEtag: '"393ea5f1c55d4cc6eb7aa022270ef0663cb1500b0d7ab86927a6c2fcb3d7d81c"'
    readmeLastModified: Thu, 18 Feb 2021 01:33:52 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/domoskanonos/crudyboy
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBjcnVkeWJveQoKd2l0aCBjcnVkeWJveSB5b3UgY2FuIHF1aWNrbHkgYW5kIGVhc2lseSBnZW5lcmF0ZSBhIGNydWQgcmVzdCBzZXJ2aWNlIGZyb20gYSBwb3N0Z3Jlc3FsIGRhdGFiYXNlIC4gY3J1ZHlib3kgaXMgYSByZWFkeSB0byBydW4gcmVzdCBjcnVkIHNlcnZpY2UsIHlvdSBvbmx5IG5lZWQgYSBjb25uZWN0aW9uIHRvIGEgcG9zdGdyZXNxbCAuIGNydWR5Ym95IGF1dG9tYXRpY2FsbGl5IHJlYWQgb3V0IGFsbCB0YWJsZXMgYW5kIGZpZWxkcyBmcm9tIGEgZ2l2ZW4gZGF0YWJhc2UgYW5kIHByb3ZpZGVzIGNvcnJlc3BvbmRpbmcgY3J1ZCBvcGVyYXRpb25zIHZpYSByZXN0LgoKIyMjIHByb2plY3QgaW5mbwoKfHx8Cnw6LS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLXwKfG5wbXw8bm9icj5bIVtQdWJsaXNoZWQgb24gbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9sL0Bkb21vc2thbm9ub3MvY3J1ZHlib3kpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AZG9tb3NrYW5vbm9zL2NydWR5Ym95KSBbIVtQdWJsaXNoZWQgb24gbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L0Bkb21vc2thbm9ub3MvY3J1ZHlib3kpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AZG9tb3NrYW5vbm9zL2NydWR5Ym95KSBbIVtQdWJsaXNoZWQgb24gbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL2J1bmRsZXBob2JpYS9taW4vQGRvbW9za2Fub25vcy9jcnVkeWJveSldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bkb21vc2thbm9ub3MvY3J1ZHlib3kpIFshW1B1Ymxpc2hlZCBvbiBucG1dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYnVuZGxlcGhvYmlhL21pbnppcC9AZG9tb3NrYW5vbm9zL2NydWR5Ym95KV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGRvbW9za2Fub25vcy9jcnVkeWJveSkgWyFbUHVibGlzaGVkIG9uIG5wbV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vZHcvQGRvbW9za2Fub25vcy9jcnVkeWJveSldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bkb21vc2thbm9ub3MvY3J1ZHlib3kpPC9ub2JyPnwKfGdpdHw8bm9icj4hW0dpdEh1Yl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGljZW5zZS9kb21vc2thbm9ub3MvY3J1ZHlib3kpPC9ub2JyPiA8bm9icj5bIVtQdWJsaXNoZWQgb24gZ2l0XShodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi9sYW5ndWFnZXMvY29kZS1zaXplL2RvbW9za2Fub25vcy9jcnVkeWJveSldKGh0dHBzOi8vZ2l0aHViLmNvbS9kb21vc2thbm9ub3MvY3J1ZHlib3kpPC9ub2JyPnwKfGRvY2tlcnwhW0RvY2tlciBJbWFnZSBTaXplIChsYXRlc3QgYnkgZGF0ZSldKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZG9ja2VyL2ltYWdlLXNpemUvZG9tb3NrYW5vbm9zL2NydWR5Ym95KXwKfGRvbmF0aW9ufDxub2JyPlshW2RvbmF0ZV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9Eb25hdGUtUGF5UGFsLWdyZWVuLnN2ZyldKGh0dHBzOi8vd3d3LnBheXBhbC5jb20vY2dpLWJpbi93ZWJzY3I/Y21kPV9zLXhjbGljayZob3N0ZWRfYnV0dG9uaWQ9U1dHS0VWU0syUERFRSk8L25vYnI+fAoKIyMgbnBtCgojIyMgaW5zdGFsbCBzZXJ2ZXIgd2l0aCBucG0KCiAgICBucG0gaSBAZG9tb3NrYW5vbm9zL2NydWR5Ym95CgojIyMgY29uc3RydWN0b3IKCiAgICBuZXcgQ3J1ZHlib3lTZXJ2ZXIocG9ydDogTnVtYmVyLAogICAgICAgIGRiQ2xpZW50OiBEQkNsaWVudCwKICAgICAgICBjdXN0b21DU1M6IHN0cmluZywKICAgICAgICBjdXN0b21DU1NVcmw6IHN0cmluZywKICAgICAgICBhY2Nlc3NDb250cm9sQWxsb3dPcmlnaW46IHN0cmluZywKICAgICAgICBhY2Nlc3NDb250cm9sQWxsb3dNZXRob2RzOiBzdHJpbmcsCiAgICAgICAgYWNjZXNzQ29udHJvbEFsbG93SGVhZGVyczogc3RyaW5nLAogICAgICAgIGFjY2Vzc0NvbnRyb2xBbGxvd0NyZWRlbnRpYWxzOiBzdHJpbmcsCiAgICAgICAgdmVyc2lvbjogc3RyaW5nKQoKIyMjIGluaXQgc2VydmVyIGV4YW1wbGUgKHR5cGVzY3JpcHQpCgogICAgLy9uZXcgZGIgY2xpZW50IGluc3RhbmNlCiAgICBjb25zdCBkYkNsaWVudDogRGJDbGllbnQgPSBuZXcgUG9zdGdyZXNxbENsaWVudCg8REJDbGllbnRDb25maWc+eyBob3N0OiAibG9jYWxob3N0IiwgZGF0YWJhc2U6ICJteWRhdGFiYXNlIiwgdXNlcjogInVzZXIiLCBwYXNzd29yZDogInB3ZCIsIHBvcnQ6IDU0MzIgfSk7CgogICAgLy9uZXcgaW5zdGFuY2UKICAgIGNvbnN0IHNlcnZlcjogQ3J1ZHlib3lTZXJ2ZXIgPSBuZXcgQ3J1ZHlib3lTZXJ2ZXIoODA4MCxkYkNsaWVudCwiLmN1c3RvbUNzcyB7fSIsImh0dHBzOi8vbXlzZXJ2ZXIvbXktY3VzdG9tLmNzcyIsIioiLCJHRVQsIFBPU1QsIE9QVElPTlMsIFBVVCwgUEFUQ0gsIERFTEVURSIsIlgtUmVxdWVzdGVkLVdpdGgsY29udGVudC10eXBlIiwiWC1SZXF1ZXN0ZWQtV2l0aCxjb250ZW50LXR5cGUiLCJ0cnVlIiwiMS4wLjAiKTsKCiAgICAvL2luaXQgc2VydmVyCiAgICBzZXJ2ZXIuaW5pdCgpOwoKIyMgZG9ja2VyCgojIyMgcnVuIHdpdGggZG9ja2VyIChleGFtcGxlKQoKICAgIGRvY2tlciBydW4gLS1yZXN0YXJ0PWFsd2F5cyAtcCA4MDgwOjgwODAgLWUgREJfSE9TVD0nbG9jYWxob3N0JyAtZSBEQl9Qb3J0PSc1NDMyJyAtZSBEQl9VU0VSPSd1c2VyJyAtZSBEQl9QQVNTV09SRD0ncHdkJyAtZSBEQl9OQU1FPSdteWRhdGFiYXNlJyAtZSBQT1JUPSc4MDgwJyAtZSBDVVNUT01fQ1NTX1VSTD0nPGNzcyB1cmw+JyAtZCBkb21vc2thbm9ub3MvY3J1ZHlib3kKCiMjIyBydW4gd2l0aCBkb2NrZXItY29tcG9zZSAoZXhhbXBsZSkKCiAgICB2ZXJzaW9uOiAnMy4yJwogICAgICAgIHNlcnZpY2VzOgogICAgICAgICAgICBjcnVkeWJveToKICAgICAgICAgICAgICAgIGltYWdlOiBkb21vc2thbm9ub3MvY3J1ZHlib3kKICAgICAgICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAgICAgICAgIC0gIjgwODA6ODA4MCIKICAgICAgICAgICAgICAgIGVudmlyb25tZW50OgogICAgICAgICAgICAgICAgICAgIERCX0hPU1Q6IGxvY2FsaG9zdAogICAgICAgICAgICAgICAgICAgIERCX1BPUlQ6IDU0MzIKICAgICAgICAgICAgICAgICAgICBEQl9VU0VSOiB1c2VyCiAgICAgICAgICAgICAgICAgICAgREJfUEFTU1dPUkQ6IHB3ZAogICAgICAgICAgICAgICAgICAgIERCX05BTUU6IG15ZGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICBQT1JUOiA4MDgwCiAgICAgICAgICAgICAgICAgICAgQ1VTVE9NX0NTUzogLmN1c3RvbUNzcyB7fQogICAgICAgICAgICAgICAgICAgIENVU1RPTV9DU1NfVVJMOiBodHRwczovL215c2VydmVyL215LWN1c3RvbS5jc3MKICAgICAgICAgICAgICAgICAgICBSRVFVRVNUX0hFQURFUl9BQ0NFU1NfQ09OVFJPTF9BTExPV19PUklHSU46ICoKICAgICAgICAgICAgICAgICAgICBSRVFVRVNUX0hFQURFUl9BQ0NFU1NfQ09OVFJPTF9BTExPV19NRVRIT0RTOiBHRVQsIFBPU1QsIE9QVElPTlMsIFBVVCwgUEFUQ0gsIERFTEVURQogICAgICAgICAgICAgICAgICAgIFJFUVVFU1RfSEVBREVSX0FDQ0VTU19DT05UUk9MX0FMTE9XX0hFQURFUlM6IFgtUmVxdWVzdGVkLVdpdGgsY29udGVudC10eXBlCiAgICAgICAgICAgICAgICAgICAgUkVRVUVTVF9IRUFERVJfQUNDRVNTX0NPTlRST0xfQUxMT1dfQ1JFREVOVElBTFM6IHRydWUKCgojIyMgZW52aXJvbm1lbnRhbCB2YXJzCgp8a2V5fGV4YW1wbGV8Cnw6LS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLXwKfERCX0hPU1R8bG9jYWxob3N0fAp8REJfUE9SVHw1NDMyfAp8REJfVVNFUnx1c2VyfAp8REJfUEFTU1dPUkR8cHdkfAp8REJfTkFNRXxteWRhdGFiYXNlfAp8UE9SVHw4MDgwfAp8Q1VTVE9NX0NTU3wuY3VzdG9tQ3NzIHt9fAp8Q1VTVE9NX0NTU19VUkx8aHR0cHM6Ly9teXNlcnZlci9teS1jdXN0b20uY3NzfAp8UkVRVUVTVF9IRUFERVJfQUNDRVNTX0NPTlRST0xfQUxMT1dfT1JJR0lOfCp8CnxSRVFVRVNUX0hFQURFUl9BQ0NFU1NfQ09OVFJPTF9BTExPV19NRVRIT0RTfEdFVCwgUE9TVCwgT1BUSU9OUywgUFVULCBQQVRDSCwgREVMRVRFfAp8UkVRVUVTVF9IRUFERVJfQUNDRVNTX0NPTlRST0xfQUxMT1dfSEVBREVSU3xYLVJlcXVlc3RlZC1XaXRoLGNvbnRlbnQtdHlwZXwKfFJFUVVFU1RfSEVBREVSX0FDQ0VTU19DT05UUk9MX0FMTE9XX0NSRURFTlRJQUxTfHRydWV8CgoKIyMjIGVudmlyb25tZW50YWwgdmFycyBleGFtcGxlIC5lbnYKCiAgICBEQl9IT1NUPWxvY2FsaG9zdAogICAgREJfUE9SVD01NDMyCiAgICBEQl9VU0VSPXVzZXIKICAgIERCX1BBU1NXT1JEPXB3ZAogICAgREJfTkFNRT1teWRhdGFiYXNlCiAgICBQT1JUPTgwODAKICAgIENVU1RPTV9DU1M9LmN1c3RvbUNzcyB7fQogICAgI0NVU1RPTV9DU1NfVVJMPWh0dHBzOi8vbXlzZXJ2ZXIvbXktY3VzdG9tLmNzcwogICAgUkVRVUVTVF9IRUFERVJfQUNDRVNTX0NPTlRST0xfQUxMT1dfT1JJR0lOPSoKICAgIFJFUVVFU1RfSEVBREVSX0FDQ0VTU19DT05UUk9MX0FMTE9XX01FVEhPRFM9R0VULCBQT1NULCBPUFRJT05TLCBQVVQsIFBBVENILCBERUxFVEUKICAgIFJFUVVFU1RfSEVBREVSX0FDQ0VTU19DT05UUk9MX0FMTE9XX0hFQURFUlM9WC1SZXF1ZXN0ZWQtV2l0aCxjb250ZW50LXR5cGUKICAgIFJFUVVFU1RfSEVBREVSX0FDQ0VTU19DT05UUk9MX0FMTE9XX0NSRURFTlRJQUxTPXRydWUKCgojIyMgZG9ja2VyIGltYWdlcyBsb2NhdGlvbgoKaHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2RvbW9za2Fub25vcy9jcnVkeWJveQ==
    description: >-
      with crudyboy you can quickly and easily generate a crud rest service from
      a MongoDB. Crudyboy is a ready to run rest crud service, you only need a
      connection to a MongoDB. crudyboy automaticalliy read out all collections
      from a given database and provides corresponding crud operations via rest.
    created: "2021-10-19T14:17:07Z"
    updated: "2021-10-25T15:42:41Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: domoskanonos
    logo: https://avatars.githubusercontent.com/u/49183249?v=4
    license: MIT
    repoEtag: '"b6a5b6dd09107b05a6f5fa80088c7e441175045696cf874cf0e74ccd51637fb3"'
    repoLastModified: Fri, 21 Jan 2022 19:18:39 GMT
    readmeEtag: '"36aa2e73a4a20ea57db0245213d59b712fcc1e7c9be0816abb33a5b147976519"'
    readmeLastModified: Sun, 06 Feb 2022 18:45:21 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/hikmatullahehsan/wefox-node-js-assessment
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBXZWZveC1ub2RlLWpzLWFzc2Vzc21lbnQKQSBkZW1vIGFwcGxpY2F0aW9uIGRldmVsb3BlZCB3aXRoIE5vZGVKUwoKIyMgSG93IHRvIGluc3RhbGw/IApgYGBiYXNoCiQgbnBtIGluc3RhbGwgCmBgYAojIyBIb3cgdG8gcnVuPwpgYGBiYXNoCiQgbnBtIHN0YXJ0IApgYGAKCiMjIENyZWF0aW5nIGFuIC5lbnYgZmlsZSB3aXRoIHRoZXNlIHByb3BlcnRpZXMgYW5kIGluaXRpYWxpemUgdGhlaXIgdmFsdWVzIHJlbGF0ZWQgdG8geW91ciBlbnZpcm9ubWVudApgYGBqYXZhc2NyaXB0CkFQSV9QT1JUICAgICAgICAgICAgPSBudWxsCk1PTkdPX1VSSSAgICAgICAgICAgPSBudWxsClRPS0VOX0tFWSAgICAgICAgICAgPSBudWxsCk9QRU5fV0VBVEhFUl9BUElfSUQgPSBudWxsCmBgYAoKIyMgT3BlbkFQSSBTd2FnZ2VyIERvY3VtZW50YXRpb24gCmBgYGJhc2gKaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS1kb2NzCmBgYAoKIyMgUmVxdWlyZW1lbnRzCiogTm9kZSB2MC4xMC4zMiBvciBhYm92ZQoqIEV4cHJlc3MgNCBvciBhYm92ZQoqIE1vbmdvREIKCiMjIFRlc3RpbmcKCiogYG5wbSBpbnN0YWxsYAoqIGBucG0gdGVzdAoKCiMjIERvY2tlciBJbWFnZSAKYGBgYmFzaApodHRwczovL2h1Yi5kb2NrZXIuY29tL3IvaGVrbWF0MjEvd2Vmb3gtbm9kZS1hc3Nlc3NtZW50CmBgYAoKCgoKCgoK
    description: A general and simple NodeJS application for a demo purpose
    created: "2021-09-05T12:22:16Z"
    updated: "2021-09-05T18:41:46Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: HikmatullahEhsan
    logo: https://avatars.githubusercontent.com/u/23573173?v=4
    repoEtag: '"47a817dc026ff2e4211d49fbd10121aa6ff5ab0d45b2e91c0107bf012e0abab5"'
    repoLastModified: Sun, 05 Sep 2021 18:41:46 GMT
    readmeEtag: '"6a1d9ff340c870d06a24e864933ab32832671f7073bbdf726ac60cb77527e4b0"'
    readmeLastModified: Sun, 05 Sep 2021 18:41:43 GMT
  foundInMaster: true
  category:
    - Documentation
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/unjello/openapi-mock-server
  v3: true
  repositoryMetadata:
    base64Readme: >-
      aW1hZ2U6Omh0dHA6Ly91bm1haW50YWluZWQudGVjaC9iYWRnZS5zdmdbbGluaz1odHRwOi8vdW5tYWludGFpbmVkLnRlY2gvXQ0KDQo9IERFUFJFQ0FURUQNCg0KX29wZW5hcGktbW9jay1zZXJ2ZXJfIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQsIHBsZWFzZSBjb25zaWRlciB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXJbc3dhZ2dlci1wYXJzZXJdLg0K
    description: DEPRECATED. Create mock server based on Open API 3.0 specification file
    created: "2018-04-06T18:39:09Z"
    updated: "2019-05-01T08:50:53Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 1
    owner: unjello
    logo: https://avatars.githubusercontent.com/u/155669?v=4
    license: CC0-1.0
    repoEtag: '"d934c0f571980ac64df6206f3e9b3fdb15c363375c1fdf5287782fd7c6279fe2"'
    repoLastModified: Wed, 01 May 2019 08:50:53 GMT
    readmeEtag: '"60395699ccd4f6b436130b9c9c8486c011d5864bd4f9576677cc4cd9454fc27d"'
    readmeLastModified: Wed, 01 May 2019 08:49:23 GMT
  foundInMaster: true
  category:
    - Sdk
    - Code Generators
- source: openapi3 tags
  repository: https://github.com/ideadapt/intellij-swagger-annotations
  v3: true
  repositoryMetadata:
    description: >-
      Intellij plugin providing editor features related to swagger and openapi
      annotations
    created: "2020-09-13T17:44:50Z"
    updated: "2020-09-25T18:18:04Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: ideadapt
    logo: https://avatars.githubusercontent.com/u/1071386?v=4
    repoEtag: '"7168064f45d119ca5932d02382ddd467cedd8cc1e850e1b7de117f89efae959a"'
    repoLastModified: Fri, 25 Sep 2020 18:18:04 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/auth-server
  v3: true
  repositoryMetadata:
    base64Readme: IyBhdXRoLXNlcnZlcgoK6K6k6K+B5Lit5b+DCg==
    description: 财务管理系统-后端服务-认证中心
    created: "2021-03-20T11:45:24Z"
    updated: "2021-03-20T12:23:43Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"1fea45de8ddb9f0cbdc5766dfbb130ae2b6900d8c73c4933dab95a5607737e6e"'
    repoLastModified: Sat, 20 Mar 2021 12:23:43 GMT
    readmeEtag: '"179801e5714c5bf95c98125638e4edee2b27e747c48d9708e6cb392ca13201cf"'
    readmeLastModified: Sat, 20 Mar 2021 11:50:05 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/witguild/spring-boot-rest-api-h2-jpa-security
  v3: true
  repositoryMetadata:
    description: null
    created: "2021-02-15T10:09:18Z"
    updated: "2021-02-15T11:07:41Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: witguild
    logo: https://avatars.githubusercontent.com/u/62769457?v=4
    repoEtag: '"6019bb2724fcd7a737f0367091bd82bf4399f5e3cef049619129719c1a74521c"'
    repoLastModified: Mon, 15 Feb 2021 11:07:41 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/open-banking/parties
  v3: true
  repositoryMetadata:
    base64Readme: IyBwYXJ0aWVzCnBhcnRpZXMgQVBJIGJ1aWx0IG9uIHRvcCBvZiBsaWdodC00ago=
    description: parties API built on top of light-4j
    created: "2019-12-12T23:50:14Z"
    updated: "2021-12-13T15:22:36Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: open-banking
    logo: https://avatars.githubusercontent.com/u/38990562?v=4
    license: Apache-2.0
    repoEtag: '"4fc37fc5534f7ce50a0467a2a96de5f189c94bd7dfe401fab185f7539625bb25"'
    repoLastModified: Fri, 07 Jan 2022 16:23:18 GMT
    readmeEtag: '"9191a28f47f889d8db64e4488dc163d642e3e0f0386c7960ea8123d1f192f8a6"'
    readmeLastModified: Mon, 28 Feb 2022 02:11:37 GMT
  foundInMaster: true
  category:
    - Documentation
    - Server
- source: openapi3 tags
  repository: https://github.com/rtfpessoa/glugen
  v3: true
  repositoryMetadata:
    description: glugen generates http clients for an OpenAPI v3 specification
    created: "2020-02-01T12:43:06Z"
    updated: "2020-04-10T11:31:35Z"
    language: JavaScript
    archived: true
    stars: 0
    watchers: 0
    forks: 1
    owner: rtfpessoa
    logo: https://avatars.githubusercontent.com/u/902384?v=4
    repoEtag: '"cfd4d0fd684c98169a30460f7f3caa9ca11a5a02014e6a57fdbb288c04b1f8fa"'
    repoLastModified: Fri, 10 Apr 2020 11:31:35 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/pilotak/openapi-typescript-jwt
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIDMgVHlwZVNjcmlwdCBKV1QgdGVtcGxhdGUKQW4gZXhhbXBsZSBBUEkgd2l0aCBUeXBlU2NyaXB0IHN1cHBvcnQgYW5kIGJhc2ljIGxvZ2luIG1lY2hhbmlzbSBiYXNlZCBvbiBKV1QKCiMjIEluc3RhbGwKYGBgc2gKbnBtIGluc3RhbGwgJiYgbnBtIHJ1biBkZXYKYGBgCgojIyBSdW4KRmlyc3QgbG9naW4gYW5kIGNvcHkgZ2VuZXJhdGVkIHRva2VuLgoKYGBgc2gKY3VybCAtSCAnQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uJyAtWCBQT1NUIC1kICd1c2VybmFtZT10ZXN0JyBodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvbG9naW4KYGBgCgpOb3cgeW91IGNhbiBzZWUgb3BlbmFwaS5qc29uCmBgYHNoCmN1cmwgLUggJ0FjY2VwdDogYXBwbGljYXRpb24vanNvbicgLVggR0VUIC1IICdBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5Li4uJyBodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZG9jcwpgYGAKCk9yIHlvdSBjYW4gbGlzdCB1c2VycwpgYGBzaApjdXJsIC1IICdBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24nIC1YIEdFVCAtSCAnQXV0aG9yaXphdGlvbjogQmVhcmVyIGV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS4uLicgaHR0cDovL2xvY2FsaG9zdDozMDAwL3YxL3VzZXJzCmBgYAoKIyMgR1VJCkp1c3QgdmlzaXQgYHJlZG9jLmh0bWxgIHZpYSB5b3VyIGJyb3dzZXIK
    description: Express.js OpenAPI 3 typescript JWT boilerplate
    created: "2021-05-05T20:32:46Z"
    updated: "2021-06-21T09:08:50Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: pilotak
    logo: https://avatars.githubusercontent.com/u/8101753?v=4
    license: MIT
    repoEtag: '"e44807f4ec41fdee5919cb57cbe055ba3b969626bd173d6198b46947b671bcc2"'
    repoLastModified: Mon, 21 Jun 2021 09:08:50 GMT
    readmeEtag: '"5991241588e68bce8644ddb478363b9b279819d17c1a1f410d984d43aa05cf9e"'
    readmeLastModified: Mon, 21 Jun 2021 09:08:43 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/xydens/pumapi
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBuZXN0LWpzb24tYXBpCkEgdG9vbCBmb3IgZWFzeSBidWlsZGluZyBBUEkgYWNvcmRpbmcgW0pTT05BUEkgU1BFQ10oaHR0cHM6Ly9qc29uYXBpLm9yZy8pLgoKRmVhdHVyZXM6CiogQXV0b21hdGljIHNlcmlhbGl6YXRpb24KKiBBdXRvbWF0aWMgZGVzZXJpYWxpemF0aW9uCiogQXV0b21hdGljIGJ1aWxkaW5nIG9mIEFQSSBzcGVjCg==
    readmeEtag: '"423ec7e2bb56e5006d9faaba6ac336d28c441d4ba4d6e30cee2c94e9d00d2c8b"'
    readmeLastModified: Wed, 30 Mar 2022 16:58:52 GMT
    description: A tool for easy building API according the JSONAPI spec
    created: "2022-03-30T16:37:56Z"
    updated: "2022-03-30T16:57:42Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: xydens
    logo: https://avatars.githubusercontent.com/u/16016725?v=4
    repoEtag: '"4a1a22aad7baf3d3856e94b451c8a6272a96e8cfa885284ff0cdcdc3f6beb3d5"'
    repoLastModified: Wed, 30 Mar 2022 16:57:42 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/afshinparhizkari/issuetracker
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBpc3N1ZXRyYWNrZXIKc29tZSBzaW1wbGUgcHJvamVjdCBmb3IgdHJhY2tpbmcgaXNzdWVzKHN0b3JpZXMgYW5kIGJ1Z3MpCg==
    readmeEtag: '"52098cfddf544f4600ffdb6193defbd854ca3d5901136734fa4213515040b72c"'
    readmeLastModified: Fri, 22 Apr 2022 08:36:38 GMT
    description: some simple project for tracking issues(stories and bugs)
    created: "2022-01-11T15:22:37Z"
    updated: "2022-01-17T11:38:56Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: AfshinParhizkari
    logo: https://avatars.githubusercontent.com/u/32636285?v=4
    license: Apache-2.0
    repoEtag: '"76d226375c761a6191172493d6e97ca91b4fa54d8a3620e1f7da2e5cb5345e36"'
    repoLastModified: Mon, 17 Jan 2022 11:38:56 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Server
- source: openapi3 tags
  repository: https://github.com/open-banking/transactions
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyB0cmFuc2FjdGlvbnMKdHJhbnNhY3Rpb25zIEFQSSBidWlsdCBvbiB0b3Agb2YgbGlnaHQtNGoK
    description: transactions API built on top of light-4j
    created: "2019-12-12T23:51:44Z"
    updated: "2021-12-13T15:22:48Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: open-banking
    logo: https://avatars.githubusercontent.com/u/38990562?v=4
    license: Apache-2.0
    repoEtag: '"500f0358dd66118d1a1cb5792c5aa7ba770760cbaa59030fcfa74e2a8e304b1f"'
    repoLastModified: Fri, 07 Jan 2022 16:19:33 GMT
    readmeEtag: '"fedfd4f9efb1d757fafc048e7c2a60517990966e316f1268dc2d8731f014258c"'
    readmeLastModified: Mon, 28 Feb 2022 02:11:25 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/riddhi89/simple-flask-project
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzaW1wbGUtZmxhc2stcHJvamVjdAoKU2V0dXA6IGNyZWF0ZSBhIHB5dGhvbiB2aXJ0dWFsIGVudmlyb25tZW50IGFuZCBpbnN0YWxsIHRoZSByZXF1aXJlbWVudHM6CgoJdmlydHVhbGVudiAtLXB5dGhvbj1weXRob24zLjYgLnZlbnYKCXNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUKCXBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKCgpHZW5lcmF0ZSBPcGVuQVBJIHNwZWMgZnJvbSBGbGFzayByb3V0ZXM6CgoJcHl0aG9uIGdlbmVyYXRlX29wZW5hcGlfc3BlYy5weQoKICAgIApWaWV3IHRoZSBPcGVuQVBJIHNwZWMgdXNpbmcgU3dhZ2dlci1VSToKCiAgICBkb2NrZXIgcnVuIC0tcm0gLXAgOTAwMDo4MDgwIC0tbmFtZSBzd2FnZ2VyLXVpIC1lIFNXQUdHRVJfSlNPTj0vYXBpX2RvY3Mvb3BlbmFwaS5qc29uIC12ICQoUFdEKS9hcGlfZG9jczovYXBpX2RvY3Mgc3dhZ2dlcmFwaS9zd2FnZ2VyLXVpCg==
    description: Generate OpenAPI spec from Flask routes
    created: "2018-06-25T00:08:10Z"
    updated: "2018-08-06T01:50:06Z"
    language: Python
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: riddhi89
    logo: https://avatars.githubusercontent.com/u/4574087?v=4
    repoEtag: '"b85f960a0a177d42dde79cb33efd5ec1b1d48874ac8aa9ae27bd9740d660316e"'
    repoLastModified: Mon, 06 Aug 2018 01:50:06 GMT
    readmeEtag: '"03dc325d8e5b42ecbdc10a500f9d894d9794a4e5f9ccdceaabc50ec4f9240a8b"'
    readmeLastModified: Mon, 06 Aug 2018 01:50:04 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/tjbrockmeyer/oas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvYXMgLSBPcGVuIEFQSSBTcGVjaWZpY2F0aW9uCgpbIVtHb0RvY10oaHR0cHM6Ly9nb2RvYy5vcmcvZ2l0aHViLmNvbS90amJyb2NrbWV5ZXIvb2FzP3N0YXR1cy5zdmcpXShodHRwczovL2dvZG9jLm9yZy9naXRodWIuY29tL3RqYnJvY2ttZXllci9vYXMpClshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly90cmF2aXMtY2kuY29tL3RqYnJvY2ttZXllci9vYXMuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL3RyYXZpcy1jaS5jb20vdGpicm9ja21leWVyL29hcykKWyFbY29kZWNvdl0oaHR0cHM6Ly9jb2RlY292LmlvL2doL3RqYnJvY2ttZXllci9vYXMvYnJhbmNoL21hc3Rlci9ncmFwaC9iYWRnZS5zdmcpXShodHRwczovL2NvZGVjb3YuaW8vZ2gvdGpicm9ja21leWVyL29hcykKCkdvbGFuZyBPcGVuIEFQSSBTcGVjaWZpY2F0aW9uIFZlcnNpb24gMyBzaW1wbGUgQVBJIHNldHVwIHBhY2thZ2UgIApDcmVhdGUganNvbiBlbmRwb2ludCBzcGVjcyBpbmxpbmUgd2l0aCB5b3VyIGNvZGUgaW1wbGVtZW50YXRpb24uICAKVGhpcyBwYWNrYWdlIHNwZWNpZmljYWxseSBzZXJ2ZXMgYW5kIGFjY2VwdHMgdGhlIGBhcHBsaWNhdGlvbi9qc29uYCBjb250ZW50IHR5cGUuCgpVSSBpcyBjcmVhdGVkIHVzaW5nIFtTd2FnZ2VyVUkuXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aSkKClRoZSBleGFtcGxlIGJlbG93IHdpbGwgY3JlYXRlIGFuIEFQSSBhdCBodHRwOi8vbG9jYWxob3N0OjUwMDAgdGhhdCBoYXMgMSBlbmRwb2ludCwgYEdFVCAvc2VhcmNoYCB1bmRlciAyIGRpZmZlcmVudCB0YWdzLgoKRm9yIEFQSSBkb2N1bWVudGF0aW9uLCB2aWV3IHRoZSBbR29Eb2MgUGFnZS5dKGh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vdGpicm9ja21leWVyL29hcykgIAoKIyMgRXhhbXBsZTogCgpTZWUgW3RoaXMgZXhhbXBsZSBwcm9qZWN0Ll0oLi9leGFtcGxlKQ==
    description: Golang Open API Specification Version 3 simple API setup package
    created: "2019-06-25T17:34:26Z"
    updated: "2020-04-24T17:07:42Z"
    language: Go
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: tjbrockmeyer
    logo: https://avatars.githubusercontent.com/u/18749133?v=4
    repoEtag: '"e92e1d3415cadcf2bba34fde5cf877a5edcbb94971ca7e7e5d8a950833e2aea6"'
    repoLastModified: Fri, 24 Apr 2020 17:07:42 GMT
    readmeEtag: '"48b4a25beb0009376b5fcce08a1be0e4d102ebb7dbe9fde135968cccc8a17f73"'
    readmeLastModified: Fri, 24 Apr 2020 17:07:31 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/andres-gr/kc-web
  v3: true
  repositoryMetadata:
    description: KC Webapp new boilerplate setup
    created: "2020-01-13T20:33:41Z"
    updated: "2020-04-07T01:27:00Z"
    language: TypeScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: andres-gr
    logo: https://avatars.githubusercontent.com/u/26035230?v=4
    repoEtag: '"52647b8b88037558bcb14afc8987f1eeb3f7ba4961bdaf944acdd846907ba55c"'
    repoLastModified: Tue, 07 Apr 2020 01:27:00 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/pschichtel/betterswagger
  v3: true
  repositoryMetadata:
    description: A new code generator for OpenAPI 3 specs
    created: "2020-06-16T00:00:41Z"
    updated: "2020-11-04T16:40:44Z"
    language: Scala
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: pschichtel
    logo: https://avatars.githubusercontent.com/u/526104?v=4
    repoEtag: '"3868738b46713290e30219656f919f188565cdf985657acaec67182093fdb8ed"'
    repoLastModified: Wed, 04 Nov 2020 16:40:44 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/alexpdr/masonite-swagger-ui
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBNYXNvbml0ZSBTd2FnZ2VyIFVJClRoZSBpbnRlbnRpb24gb2YgdGhpcyBwYWNrYWdlIGlzIHByb3ZpZGUgYW4gZWFzeSBtZXRob2QgdG8gYWRkaW5nIFN3YWdnZXJVSSAvIE9wZW5BUElVSSB0byBtYXNvbml0ZS4KCiMjIEluc3RhbGxhdGlvbgoxLiBgcGlwMyBpbnN0YWxsIG1hc29uaXRlLXN3YWdnZXItdWlgCjIuIEFkZCB0aGUgcGFja2FnZSB0byB0aGUgcHJvdmlkZXJzIGxpc3Q6CiAgICBgYGBweQogICAgZnJvbSBzd2FnZ2VyX3VpLnByb3ZpZGVycyBpbXBvcnQgU3dhZ2dlclVJUHJvdmlkZXIKCiAgICAjIC4uLgoKICAgIFBST1ZJREVSUyA9IFsKICAgICMgLi4uCiAgICAgIFN3YWdnZXJVSVByb3ZpZGVyCiAgICBdCiAgICBgYGAKMy4gUnVuIHRoZSBpbnN0YWxsIGNvbW1hbmQ6IGBjcmFmdCBzd2FnZ2VydWk6aW5zdGFsbGAgdGhpcyB3aWxsIGNvcHkgb3ZlciBhbGwgdGhlIHJlcXVpcmVkIHNjYWZmb2xkaW5nIHlvdSBuZWVkIQoKVGhhdHMgaXQhIFlvdSBjYW4gbm93IGRvIGBjcmFmdCBzZXJ2ZWAgYW5kIG5hdmlnYXRlIHRvIGAvZG9jc2AgdG8gdHJ5IGl0IG91dCBpbiBhY3Rpb24hCg==
    description: >-
      Third-party package for Masonite that provides necessary scaffolding for
      the Swagger UI / OpenAPI UI
    created: "2020-11-15T16:20:40Z"
    updated: "2020-11-16T18:27:53Z"
    language: Python
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: alexpdr
    logo: https://avatars.githubusercontent.com/u/49159860?v=4
    repoEtag: '"d7d9ea5cec027473a54fef60cf0dd631ea7e1c8b4d88a45bf1373e3761f5630a"'
    repoLastModified: Mon, 16 Nov 2020 18:27:53 GMT
    readmeEtag: '"6b2119f86cae2927d98957bef195a530bb85241a9827dd841e98c165ec43f8fb"'
    readmeLastModified: Mon, 16 Nov 2020 18:27:50 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/invoice-service
  v3: true
  repositoryMetadata:
    base64Readme: IyBpbnZvaWNlLXNlcnZpY2UKCua4oOmBk+WPkeelqAo=
    description: 财务管理系统-后端服务-渠道发票
    created: "2021-03-20T11:32:48Z"
    updated: "2021-03-20T12:23:51Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"03665cb8c1fe5747e2b05128fdff63b51cc44577770e97626b3c3451657280a3"'
    repoLastModified: Sat, 20 Mar 2021 12:23:51 GMT
    readmeEtag: '"5c439d1d4a2ad7439070ac92c77af82302dec3de31de45e39e5e2ec9e83363e0"'
    readmeLastModified: Sat, 20 Mar 2021 11:37:36 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/wasedatime/wasedatime.github.io
  v3: true
  repositoryMetadata:
    base64Readme: IyB3YXNlZGF0aW1lLW9wZW5hcGk=
    description: API documentation website using swagger-ui
    created: "2020-11-09T15:02:09Z"
    updated: "2021-12-23T11:16:58Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: wasedatime
    logo: https://avatars.githubusercontent.com/u/32608719?v=4
    repoEtag: '"35a0f6eec2231c4fbcee97351dd15342aa416d0e2e0392833c5102b107437e53"'
    repoLastModified: Thu, 23 Dec 2021 11:16:58 GMT
    readmeEtag: '"db1b8dceec15d690e6f32af99bd9d0b06fc59c369b4773feaa7d578a08b39b31"'
    readmeLastModified: Mon, 18 Apr 2022 20:23:09 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/theairblow/mojang-api
  v3: true
  repositoryMetadata:
    base64Readme: IyBNb2phbmcgQVBJIGRvY3VtZW50YXRpb24KTm90aGluZyB0byBzZWUgaGVyZQo=
    readmeEtag: '"4bf672531a1b819673d9634daab064ee53120f53bfc6c19fe5fbf027cf62942f"'
    readmeLastModified: Mon, 11 Apr 2022 11:29:35 GMT
    description: Mojang API documented with Swagger
    created: "2022-04-10T08:06:58Z"
    updated: "2022-04-10T11:37:05Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: TheAirBlow
    logo: https://avatars.githubusercontent.com/u/68467762?v=4
    repoEtag: '"9a9426629b58cd5fb206e00e3a5431f3e6e1bdd1058384c070585993acda707d"'
    repoLastModified: Sun, 10 Apr 2022 11:37:05 GMT
  foundInMaster: true
  category:
    - Documentation
    - Parsers
- source: openapi3 tags
  repository: https://github.com/codessintheclassroom/api-reference-solution
  v3: true
  repositoryMetadata:
    description: >-
      A specification for the API used to provide functionality for the animal
      shelter's web frontend
    created: "2019-04-03T13:50:20Z"
    updated: "2019-05-06T09:53:48Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: codessintheclassroom
    logo: https://avatars.githubusercontent.com/u/49059753?v=4
    repoEtag: '"5a143c93ec83dd5c958ccc16c2c4b364dd1ecca3954eb0aca464183966c3f6a4"'
    repoLastModified: Mon, 06 May 2019 09:53:48 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/nakatamixi/go-oapi-gen
  v3: true
  repositoryMetadata:
    description: code generator from openapi3 and go text/template
    created: "2020-01-15T10:39:27Z"
    updated: "2021-04-05T02:55:23Z"
    language: Smarty
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: nakatamixi
    logo: https://avatars.githubusercontent.com/u/7553415?v=4
    repoEtag: '"55383bd778fc0eef2545b88fb813af8aa7b305d35eafc166b966d2102eb39654"'
    repoLastModified: Fri, 04 Feb 2022 05:05:25 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/mariusconjeaud/nodejs-az-functions-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBSZXF1aXJlbWVudHMKWW91IG5lZWQgdG8gaGF2ZSBpbnN0YWxsZWQgOgoqIE5vZGUuanMgdmVyc2lvbiAxMiBMVFMgZnJvbSBbaGVyZV0oaHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLykuCiogQXp1cmUgRnVuY3Rpb25zIENvcmUgVG9vbHMuIFRvIGluc3RhbGwgaXQsIGV4ZWN1dGUgdGhlIGZvbGxvd2luZyBjb21tYW5kIDoKYGBgYmFzaApucG0gaW5zdGFsbCAtZyBhenVyZS1mdW5jdGlvbnMtY29yZS10b29scwpgYGAKCiMgU3RhcnQgQXp1cmUgRnVuY3Rpb25zCkF6dXJlIEZ1bmN0aW9ucyBDb3JlIFRvb2xzIGVuYWJsZXMgeW91IHRvIGV4ZWN1dGUgeW91ciBGdW5jdGlvbnMgcnVudGltZSBsb2NhbGx5LiBUbyBkbyBzbywgZXhlY3V0ZSB0aGUgZm9sbG93aW5nIGNvbW1hbmQgOgpgYGBiYXNoCmZ1bmMgc3RhcnQKYGBgCklmIGV2ZXJ5dGhpbmcgaXMgd29ya2luZyBwcm9wZXJseSwgeW91IHNob3VsZCBnZXQgdGhlIGZvbGxvd2luZyBDTEkgb3V0cHV0IDoKIVtDTEkgb3V0cHV0XShkb2NzL2Z1bmNfc3RhcnRfb3V0cHV0LnBuZyAiU3VjY2Vzc2Z1bCBDTEkgT3V0cHV0IikKVG8gdmVyaWZ5IHRoYXQgdGhlIEFQSSBpcyB3b3JraW5nIHByb3Blcmx5LCBnbyB0byB0aGUgZm9sbG93aW5nIFVSTCA6IDxodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL2NhdHM+LgoKIyMgTm90ZSBvbiBwb3RlbnRpYWwgZXJyb3JzCkRlcGVuZGluZyBvbiB0aGUgY29uZmlndXJhdGlvbiBvZiB5b3VyIG1hY2hpbmUsIHlvdSBtaWdodCBuZWVkIHRvIGluc3RhbGwgdGhlIFsuTkVUIENvcmUgMi54IFNES10oaHR0cHM6Ly9kb3RuZXQubWljcm9zb2Z0LmNvbS9kb3dubG9hZCkuCgpUaGlzIGlzIGJlY2F1c2UgRnVuY3Rpb25zIGFyZSBidWlsdCBvbiB0b3Agb24gLk5FVCBDb3JlLiBXaGVuIHlvdSBzdGFydCB0aGUgRnVuY3Rpb25zIHJ1bnRpbWUsIGl0IHNwaW5zIHVwIGEgLk5FVCBDb3JlIHJ1bnRpbWUsIGluIHdoaWNoIHRoZSBkZXNpcmVkIHJ1bnRpbWUgb2YgeW91ciBmdW5jdGlvbnMgLSBOb2RlLmpzIGluIG91ciBjYXNlIC0gcnVucy4KCllvdSBub3JtYWxseSBkb24ndCBuZWVkIHRoaXMgd2l0aCB0aGlzIHByb2plY3QsIGFzIHdlIG1ha2UgdXNlIG9mIHRoZSBleHRlbnNpb25zIGJ1bmRsZS4gQnV0IGp1c3QgaW4gY2FzZSwgaGVyZSdzIGEgd2FybmluZy4uLgo=
    description: Template for Azure Functions API with Node.js runtime
    created: "2020-03-27T10:51:27Z"
    updated: "2020-03-30T09:58:42Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: mariusconjeaud
    logo: https://avatars.githubusercontent.com/u/7679761?v=4
    repoEtag: '"80cbd56456386cba7fbc69c33a37693176f4833265077c83d030343e215689ef"'
    repoLastModified: Mon, 30 Mar 2020 09:58:42 GMT
    readmeEtag: '"8768f0132151f538737c4cb944d1815ee0073bed6ab962394aa77f6ec0622292"'
    readmeLastModified: Mon, 30 Mar 2020 09:58:00 GMT
  foundInMaster: true
  category:
    - Sdk
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/marcbru107/openapi3-request-finder
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuYXBpMy1yZXF1ZXN0LWZpbmRlcgoKIyMjIyMjIE9ubHkgdGVzdGV0IGZvciBvcGVuYXBpOiAzLjAuMQoKIyMgV2h5OgoKIyMjIyBIZWxwcyB5b3UgdG8gZ2V0IHRoZSByZXF1ZXN0IG9iamVjdHMgZnJvbSBhIG9wZW5hcGktc3dhZ2dlci1maWxlICAgCgoKVXNlIGRlLmJydWNrbS5vcGVuYXBpcmVxdWVzdGZpbmRlci5PcGVuQXBpUmVxdWVzdEZpbmRlcjoKLSBwdWJsaWMgSGFzaE1hcDxTdHJpbmcsIFJlcXVlc3RzRnJvbVlhbWw+IGdldFJlcXVlc3RzTWFwKGZpbmFsIFN0cmluZyByZXF1ZXN0VHlwZSkKICAgICAqIFBhcnNlIHRoZSBvcGVuIGFwaSBpbnB1dCBmaWxlIGZvciB0aGUgcmVxdWVzdGVkIHJlcXVlc3QtdHlwZQogICAgICogQHBhcmFtIHJlcXVlc3RUeXBlIC0+IGpzb24scHJvdG9idWYsLi4KICAgICAqIEByZXR1cm4gTWFwIHdpdGggdGhlIHVybCBhcyBrZXkgYW5kIHRoZSByZXF1ZXN0IGFzIHZhbHVlIC0+IGluY2x1ZGluZyBvbmx5IGVudHJpZXMgZnJvbSB0eXAgcmVxdWVzdFR5cGUKICAgIAojIyBEZXBlbmRlbmNpZXM6CiAgICAtIG9yZy55YW1sLnNuYWtleWFtbAogICAgLSBvcmcuanVuaXQuanVwaXRlci5hcGkKICAgIC0gb3JnLnNsZjRqLkxvZ2dlcgogICAgLSBjb20uZ29vZ2xlLnByb3RvYnVmOnByb3RvYnVmLWphdmEKICAgIC0gY29tLmdvb2dsZWNvZGUucHJvdG9idWYtamF2YS1mb3JtYXQK
    description: null
    created: "2020-05-02T14:10:17Z"
    updated: "2020-05-04T21:23:02Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: MarcBru107
    logo: https://avatars.githubusercontent.com/u/25484756?v=4
    license: Apache-2.0
    repoEtag: '"97c2b701d83a2797dc1eaeeb7c3d8341af470fdf2e879881c2fb04d60b2020c4"'
    repoLastModified: Mon, 04 May 2020 21:23:02 GMT
    readmeEtag: '"5e930865f77831104209941a299b34e14a7975eb91d77e2cd57413970e5dd471"'
    readmeLastModified: Mon, 04 May 2020 21:22:59 GMT
  foundInMaster: true
  category:
    - Converters
    - Parsers
- source: openapi3 tags
  repository: https://github.com/glennfaison/mcq
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBtY3EKQSBSRVNUIEFQSSBmb3IgYW4gTUNRIHdlYiBhcHBsaWNhdGlvbiwgd2l0aCBhIE1vbmdvREIgZGF0YWJhc2UuCg==
    description: A REST API for an MCQ web application, with a MongoDB database.
    created: "2020-04-12T01:29:19Z"
    updated: "2020-05-26T09:37:23Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 1
    owner: glennfaison
    logo: https://avatars.githubusercontent.com/u/17485270?v=4
    repoEtag: '"099fdcc3604821e8a1c42a52bda4be8fe61b1c8dd731c54697eea3a747707959"'
    repoLastModified: Tue, 26 May 2020 09:37:23 GMT
    readmeEtag: '"bdd3022071404e7e75396724d1573e7533241b9ae602acaa590938b7cbc67559"'
    readmeLastModified: Tue, 26 May 2020 09:37:20 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/juliandecoss/ymltoswaggerhtml
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTV0FHR0VSIEdFTkVSQVRPUiBIVE1MIEZJTEVTCgpUaGlzIFJlcG8gY3JlYXRlcyBiZWF1dGlmdWwgaHRtbCBzd2FnZ2VyIGZpbGVzLCB1c2luZyBZQU1MIGZpbGVzIGFuZCB2YWxpZGF0ZXMgdGhlbS4KCgojIyBHZXR0aW5nIHN0YXJ0ZWQKCk1ha2Ugc3VyZSB5b3UgaGF2ZSBpbnN0YWxsZWQKCi0gW1B5dGhvbiAzLjcrXShodHRwczovL3d3dy5weXRob24ub3JnL2Rvd25sb2Fkcy8pCgoKIyMgSW5zdGFsbGF0aW9uCgpUbyBpbnN0YWxsIHRoZSBsaWJyYXJpZXMsIHJ1biBpbiB5b3VyIHRlcm1pbmFsLgoKYGBgc2gKbWFrZSBpbnN0YWxsCmBgYAoKVGhpcyB3aWxsIHNldHVwIHlvdXIgZW52aXJvbm1lbnQgdG8gYWRkIHRoZSAyIGxpYnJhcmllcyB0aGlzIHJlcG8gcmVxdWlyZXMuCgoKIyMgQWRkaW5nIHlvdXIgIFlBTUwgZG9jcwoKSW4gb3JkZXIgdG8gdmFsaWRhdGUgeW91ciBmaWxlcyBhZGQgeW91ciBkb2NzIHRvIHRoZSBkaXJlY3RvcnkgZG9jcy9vcGVuYXBpLgoKCiMjIFZhbGlkYXRpbmcgeW91ciB5YW1sIGZpbGVzCgpUbyB2YWxpZGF0ZSB5b3VyIGZpbGVzIGZpcnN0IGFkZCB0aGVtIGluIHRoZSBkaXJlY3Rvcnkgb3BlbmFwaSwgdGhlbiBydW4gaW4geW91ciB0ZXJtaW5hbDoKCmBgYHNoCm1ha2Ugc3dhZ2dlci12YWxpZGF0aW9uCmBgYAoKIyMgQ3JlYXRpbmcgeW91ciBodG1sIGJlYXV0aWZ1bCBzd2FnZ2VyIHN0YXRpYyBkb2NzCkluIG9yZGVyIHRvIGNvbm5lY3QgeW91ciBmaWxlcyBiZXR3ZWVuIGVhY2ggb25lLCBjaGFuZ2UgdGhlIGZpbGUgdGVtcGxhdGUgaW4gc2NyaXB0cy90ZW1wbGF0ZXMvc3dhZ2dlcl90ZW1wbGF0ZSwgeW91IHdpbGwgZmluZCBpbiB0aGUgbGluZSAzNiB0aGF0IHRoZXJlIGlzIGEgInNlbGVjdCIgaHRtbCBlbGVtZW50LCBhZGQgYWxsIHlvdXIgZmlsZXMgdGhlcmUsIGFzIG9wdGlvbnMgIjxvcHRpb24gdmFsdWU9Im5hbWVfb2ZfeW91cl9maWxlIj5uYW1lX29mX3lvdXJfZmlsZTwvb3B0aW9uPiIgaXRzIG5vdCBuZWNlc3NhcnkgdG8gYWRkIHRoZSBzdWZpeCBodG1sLgoKT25jZSB5b3UgZmluaXNoIHRoaXMgc3RlcCBqdXN0IHJ1biBpbiB5b3VyIHRlcm1pbmFsCgpgYGBzaAptYWtlIHN3YWdnZXItc3RhdGljCmBgYAoKCiMjIyMgQ3JlZGl0cyB0bwpUaGlzIHJlcG8gd2FzIGJ1aWx0IHVzaW5nIHRoZSBzY3JpcHQgc2hvd24gYmVsb3c6Ci0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vb3NlaXNrYXIvZGJkNTFhMzcyN2ZjOTZkY2Y1ZWQxODlmY2E0OTFmYjM=
    description: >-
      📖 Generate beautiful html files with a swagger template using YAML/YML
      files. 🚀🚀
    created: "2021-07-23T21:59:03Z"
    updated: "2021-07-24T22:05:11Z"
    language: Python
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: juliandecoss
    logo: https://avatars.githubusercontent.com/u/72807525?v=4
    license: Apache-2.0
    repoEtag: '"e3e91e8e99a56acbbdbbed95db7884463e275d6722968779117f260dce244643"'
    repoLastModified: Sat, 24 Jul 2021 22:05:11 GMT
    readmeEtag: '"940c6c96125d332c7e528f529a57f8275099a950be789921abc9c52471606766"'
    readmeLastModified: Sat, 24 Jul 2021 02:26:43 GMT
  foundInMaster: true
  category:
    - Testing
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/microdreamteam/generate-openapi
  v3: true
  repositoryMetadata:
    description: generate openapi data
    created: "2021-03-31T03:25:15Z"
    updated: "2021-03-31T03:58:41Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: MicroDreamTeam
    logo: https://avatars.githubusercontent.com/u/76025972?v=4
    license: Apache-2.0
    repoEtag: '"dd8bf5265e6cfe1ced2a4df0f390275209f818156a9be371b9dd0d09fad7cde5"'
    repoLastModified: Wed, 31 Mar 2021 03:58:41 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/open-banking/statements
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBzdGF0ZW1lbnRzCk9wZW4gQmFua2luZyBTdGF0ZW1lbnRzIEFQSSBidWlsdCBvbiB0b3Agb2YgbGlnaHQtNGoK
    description: Open Banking Statements API built on top of light-4j
    created: "2020-01-23T19:14:04Z"
    updated: "2021-12-13T15:22:43Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: open-banking
    logo: https://avatars.githubusercontent.com/u/38990562?v=4
    license: Apache-2.0
    repoEtag: '"9c5d8d8c5af06d4343f6c77769d61a0f988602273d7e24f6333b97906e9f4605"'
    repoLastModified: Mon, 13 Dec 2021 15:22:43 GMT
    readmeEtag: '"0cf3ec015b10f788e448a53a8237502e0a2e9d8f9360da93080e1671d3ee3b37"'
    readmeLastModified: Mon, 28 Feb 2022 02:11:31 GMT
  foundInMaster: true
  category:
    - Sdk
    - Server
- source: openapi3 tags
  repository: https://github.com/mwczapski/swagger_editor_3_docker_container
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTd2FnZ2VyX0VkaXRvcl8zX0RvY2tlcl9Db250YWluZXIKClRoZSBpbnRlbnQgb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIGhvc3QgcmVzb3VyY2VzIHRoYXQgcHJvdmlkZSB0aGUgbWVhbnMgdG8gY3JlYXRlIGEgc2VsZi1jb250YWluZWQgRG9ja2VyIGNvbnRhaW5lciBmb3IgQVBJLUZpcnN0IGRldmVsb3BtZW50IHVzaW5nIHRoZSBsYXRlc3QgU3dhZ2dlciBFZGl0b3IgKDMueCkgYW5kIE9wZW5BUEkgKDIgb3IgMykuCgpUaGUgZm9sbG93aW5nIHJlc291cmNlcyBhcmUgYXZhaWxhYmxlIGluIHRoaXMgcmVwb3NpdG9yeToKCjEuIFtTdGVwcyB0byBjcmVhdGUgdGhlIHJlYWR5LXRvLWdvIFN3YWdnZXIgRWRpdG9yIDMuMCBEb2NrZXIgSW1hZ2UgYW5kIGEgcmVhZHktdG8tZ28gU3dhZ2dlciBFZGl0b3IgMy4wIERvY2tlciBDb250YWluZXJdKFN3YWdnZXJfRWRpdG9yX0RvY2tlcl9Db250YWluZXJfZm9yX0FQSS1GaXJzdF9EZXZlbG9wbWVudC5tZCkKMi4gW1N0YXJ0IERvY2tlciBDb250YWluZXIgYW5kIHdvcmsgd2l0aCB0aGUgU3dhZ2dlciBFZGl0b3Igc2VydmVkIGZyb20gdGhlIGNvbnRhaW5lcl0oSG93X1RvX1VzZV9Td2FnZ2VyX0VkaXRvcl9Eb2NrZXJfSW1hZ2UubWQpCjMuIFtTZXQgdXAgU3dhZ2dlciBFZGl0b3Igb24gV2luZG93cyAxMCB3aXRoIG5vIERvY2tlciBvciBXaW5kb3dzIFN1YnN5c3RlbSBmb3IgTGludXggZGVwZW5kZW5jaWVzXShzd2FnZ2VyX2VkaXRvcl9sb2NhbC5tZCkKClRoZSBEb2NrZXIgSW1hZ2UgY3JlYXRlZCBpbiAoMSkgYW5kIHVzZWQgaW4gKDIpIGlzIGF2YWlsYWJsZSBhdCBbbXdjemFwc2tpL3N3YWdnZXItZWRpdG9yOjEuMC4wXShodHRwczovL2h1Yi5kb2NrZXIuY29tL3IvbXdjemFwc2tpL3N3YWdnZXJfZWRpdG9yKSBvbiBEb2NrZXIgSHViLgo=
    description: >-
      The intent of this repository is to host resources that provide the means
      to create a self-contained Docker container for API-First development
      using latest Swagger Editor (3.x) and OpenAPI (2 or 3).
    created: "2020-07-04T01:06:47Z"
    updated: "2020-08-01T08:00:04Z"
    language: Dockerfile
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: mwczapski
    logo: https://avatars.githubusercontent.com/u/57377978?v=4
    license: MIT
    repoEtag: '"bd7eef81993e77d773c15f5fe5ac126b8d788c6e2998a4d0c37b8ac8fd6c6762"'
    repoLastModified: Sat, 01 Aug 2020 08:00:04 GMT
    readmeEtag: '"23d732c8e95e8de506ed23d3be0723c1cae492503c72fa7393cc20c2a9e52bf2"'
    readmeLastModified: Sat, 01 Aug 2020 07:59:21 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/hbhb-devloper/message-hub
  v3: true
  repositoryMetadata:
    base64Readme: IyBtZXNzYWdlLWh1YgoK5raI5oGv5Lit5b+DCg==
    description: 财务管理系统-后端服务-消息中心
    created: "2021-03-20T12:01:08Z"
    updated: "2021-03-20T12:23:55Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: hbhb-devloper
    logo: https://avatars.githubusercontent.com/u/68075210?v=4
    repoEtag: '"9dbfa5e09e84fdcad6ed7cfaf39ffde0b1314fabce38bafae722b5455843ad50"'
    repoLastModified: Sat, 20 Mar 2021 12:23:55 GMT
    readmeEtag: '"26d1e187b6bab4fe8abbe7375d8d652e6aea91911b3ecc44868736cba67a2664"'
    readmeLastModified: Sat, 20 Mar 2021 12:06:53 GMT
  foundInMaster: true
  category:
    - Data Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/karthikeyan-ng/learn-open-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBsZWFybi1vcGVuLWFwaQpUaGlzIHJlcG9zaXRvcnkgY29udGFpbnMgaG93IGRldmVsb3AgT3BlbkFQSSBzcGVjaWZpY2F0aW9uIGJhc2VkIFJFU1QgQVBJcy4K
    description: >-
      This repository contains how to develop OpenAPI specification based REST
      APIs.
    created: "2020-02-02T08:46:32Z"
    updated: "2020-04-10T11:46:13Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: karthikeyan-ng
    logo: https://avatars.githubusercontent.com/u/39563373?v=4
    repoEtag: '"25ae7ffb4c3e6307cabe5b8878a11c4fbd68c0d794021086e47ce3276381d31e"'
    repoLastModified: Fri, 10 Apr 2020 11:46:13 GMT
    readmeEtag: '"6b28df89192b2734670f066066c1435a8dbe06ac0548cbe7896a81b47a658c32"'
    readmeLastModified: Tue, 11 Feb 2020 16:36:14 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/fibercrypto/fibercryptopy
  v3: true
  repositoryMetadata:
    description: Python client library for FiberCrypto wallet API classes
    created: "2019-11-01T22:33:39Z"
    updated: "2019-11-01T22:55:42Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 1
    owner: fibercrypto
    logo: https://avatars.githubusercontent.com/u/47309509?v=4
    license: GPL-3.0
    repoEtag: '"088f0720bb6747f888bf145398387b1402696af983faff90eb94a7eb9671dcbd"'
    repoLastModified: Fri, 01 Nov 2019 22:55:42 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/linx-software/petstore-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyAgU3dhZ2dlciBQZXRzdG9yZSAtIE9wZW5BUEkgMy4wIHNhbXBsZQoKIyMgRGVzY3JpcHRpb24KVGhpcyBzYW1wbGUgaW1wbGVtZW50cyBhIExpbnggUkVTVCBBUEkgYmFzZWQgb24gdGhlIFN3YWdnZXIgJ1BldHN0b3JlJyBPcGVuQVBJIGRlZmluaXRpb24gYW5kIGlzIGhvc3RlZCBvbiBhIExpbnggQ2xvdWQgU2VydmVyLCBtb3JlIGRldGFpbHMgb24gdGhlIG9yaWdpbmFsICdQZXRzdG9yZScgR2l0SHViIHByb2plY3QgY2FuIGJlIGZvdW5kIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wZXRzdG9yZSkuIFRoZSBvcGVyYXRpb25zIG9mIHRoZSBMaW54IEFQSSBkbyBub3QgcGVyc2lzdCBhbnkgZGF0YSwgYnV0IHJhdGhlciwgcmVxdWVzdCBkYXRhIGlzIGZvcndhcmRlZCB0byBhY3R1YWwgJ1BldHN0b3JlJyBzZXJ2ZXIgdmlhIEhUVFAgcmVxdWVzdHMuICAKClZpZXcgdGhlIFtsaXZlIGRlbW9dKGh0dHBzOi8vZGVtby5hcGkubGlueC50d2VudHk1Ny5uZXQvcGV0c3RvcmUvc3dhZ2dlcikgaG9zdGVkIG9uIGEgTGlueCBDbG91ZCBTZXJ2ZXIuCgoKIyMgSW5zdGFsbGF0aW9uCgojIyMgQ2xvdWQgc2VydmVyIGRlcGxveW1lbnQKVGhpcyBzb2x1dGlvbiBjYW4gYmUgZGVwbG95ZWQgZGlyZWN0bHkgdG8geW91ciBMaW54IENsb3VkIHNlcnZlciBpbnN0YW5jZS4KCjEuIFJlZ2lzdGVyIGZvciBhIExpbnggdHJpYWwgY2xvdWQgc2VydmVyIFtoZXJlXShodHRwczovL2xpbnguc29mdHdhcmUvc2VydmVyLWJ1eTIvKS4KMi4gWW91IHdpbGwgcmVjZWl2ZSBhbiBlbWFpbCBjb250YWluaW5nIHlvdXIgTGlueCBjbG91ZCBzZXJ2ZXIgY3JlZGVudGlhbHMgd2hlbiB5b3VyIHRyaWFsIHNlcnZlciBoYXMgYmVlbiBhY3RpdmF0ZWQuCjEuIExvZyBpbnRvIHlvdXIgY2xvdWQgc2VydmVyIGluc3RhbmNlIGFuZCB1cGxvYWQgdGhlIFNvbHV0aW9uIChUb3AgTWVudSA+IFNlcnZlciA+IFVwbG9hZCkuCjMuIE9uIHRoZSBTb2x1dGlvbidzIHNlcnZpY2UgZGFzaGJvYXJkIHBhZ2UsIF9fc3RhcnRfXyBhbGwgb2YgdGhlIHNlcnZpY2VzIGZvciB0aGUgU29sdXRpb24uICAgCjQuIE9uY2UgdGhlIHNlcnZpY2UgaGFzIHN0YXJ0ZWQsIHlvdSBhcmUgYWJsZSB0byBtYWtlIHJlcXVlc3RzIHVzaW5nIHRoZSBiYXNlIFVSTCBvZjoKICAgYGBgCiAgIGh0dHBzOi8ve3lvdXIgaW5zdGFuY2UgbmFtZX0uYXBpLmxpbngudHdlbnR5NTcubmV0L3BldHN0b3JlCiAgIGBgYAoKCiMjIyBMb2NhbCBlbnZpcm9ubWVudApUaGUgYmVsb3cgc3RlcHMgZGVzY3JpYmUgaG93IHRvIHNldHVwIHRoZSBzYW1wbGUgdG8gcnVuIG9uIHlvdXIgbG9jYWwgTGlueCBEZXNpZ25lciBlbnZpcm9ubWVudC4KCjEuIERvd25sb2FkIGFuZCBpbnN0YWxsIHRoZSBMaW54IERlc2lnbmVyIFtoZXJlXShodHRwczovL2xpbnguc29mdHdhcmUvc2VydmVyLWJ1eTIvKS4KMS4gT3BlbiB0aGUgc2FtcGxlIFNvbHV0aW9uICgubHNveikgaW4geW91ciBMaW54IERlc2lnbmVyLgoyLiBBbHRlciB0aGUgYmVsb3cgU29sdXRpb24gU2V0dGluZ3M6CiAgICAtIGBMaW54SXNMb2NhbERldkVudmAgOiBgVHJ1ZWAKMy4gU2VsZWN0IHRoZSBSRVNUSG9zdCBzZXJ2aWNlLCByaWdodCBjbGljayBhbmQgc2VsZWN0IF9fZGVidWdfXy4gT25jZSBpbml0aWFsaXNlZCwgKipzdGFydCoqIHRoZSBkZWJ1Z2dlci4KNC4gT25jZSB0aGUgZGVidWdnZXIgaGFzIHN0YXJ0ZWQsIHlvdSBhcmUgYWJsZSB0byBtYWtlIHJlcXVlc3RzIGxvY2FsbHkgdG86CiAgIGBgYAogICBodHRwczovL2xvY2FsaG9zdDo4MDgwL3BldHN0b3JlCiAgIGBgYAoKIyMgVXNhZ2UKCiMjIyBTd2FnZ2VyIFVJCltWaWV3IGxpdmUgZGVtb10oaHR0cHM6Ly9kZW1vLmFwaS5saW54LnR3ZW50eTU3Lm5ldC9wZXRzdG9yZS9zd2FnZ2VyKS4KCgojIyMgUG9zdG1hbgoxLiBPcGVuIFBvc3RtYW4gYW5kIGltcG9ydCB0aGUgcHJvdmlkZWQgW3JlcXVlc3QgY29sbGVjdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2xpbngtc29mdHdhcmUvcGV0c3RvcmUtYXBpL2Jsb2IvbWFpbi90ZXN0cy9wb3N0bWFuLWNvbGxlY3Rpb24vU3dhZ2dlciUyMFBldHN0b3JlJTIwd2l0aCUyMExpbngucG9zdG1hbl9jb2xsZWN0aW9uLmpzb24pIGluIFBvc3RtYW4uCjIuIEFsdGVyIHRoZSBjb2xsZWN0aW9uIHZhcmlhYmxlcyB0byByZWZsZWN0IHlvdXIgY2xvdWQgZW52aXJvbm1lbnQuCiAKMy4gT3BlbiBlYWNoIHJlcXVlc3QgYW5kIHBhc3Mgb3IgY2hhbmdlIHBhcmFtZXRlcnMgYW5kIGJvZHkgdmFsdWVzIGFzIGRlc2NyaWJlZCBpbiBgaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby9gCgoKCiMjIENvbnRyaWJ1dGluZwoKRm9yIHF1ZXN0aW9ucyBwbGVhc2UgYXNrIHRoZSBbTGlueCBjb21tdW5pdHldKGh0dHBzOi8vbGlueC9zb2Z0d2FyZS9jb21tdW5pdHkpIG9yIHVzZSB0aGUgW1NsYWNrIGNoYW5uZWxdKGh0dHBzOi8vbGlueHNvZnR3YXJlLnNsYWNrLmNvbS9hcmNoaXZlcy9DMDFGTEJDMVhOWCkuIAoKIyMgTGljZW5zZQoKW01JVF0oaHR0cHM6Ly9naXRodWIuY29tL2xpbngtc29mdHdhcmUvdGVtcGxhdGUtcmVwby9ibG9iL21haW4vTElDRU5TRS50eHQpCg==
    readmeEtag: '"abf37e0eaee260250d5a417fa915b94b149520a51fc8c5e65995c0ca4f5e7d85"'
    readmeLastModified: Fri, 11 Mar 2022 11:12:51 GMT
    description: >-
      This sample implements a Linx REST API based on the Swagger 'Petstore'
      OpenAPI definition and is hosted on a Linx Cloud Server
    created: "2021-07-26T06:00:00Z"
    updated: "2022-03-11T11:13:04Z"
    language: null
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: linx-software
    logo: https://avatars.githubusercontent.com/u/62884647?v=4
    repoEtag: '"f6e2f6c1f70d11f473c0b4d886af621a78e5bb8178f129d1b20e2bfcc3548370"'
    repoLastModified: Fri, 11 Mar 2022 11:13:04 GMT
  foundInMaster: true
  category:
    - Converters
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/vbguard/restful-api-boilerplate
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBSRVNUZnVsLUFQSS1ib2lsZXJwbGF0ZQrim5NUZW1wbGF0ZSBmb3IgZmFzdCBzdGFydCBvZiB3cml0aW5nIFJFU1RmdWwgQVBJIPCfmoAK
    description: ⛓Template for fast start of writing RESTful API 🚀
    created: "2019-07-20T12:57:55Z"
    updated: "2019-10-25T21:59:46Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 2
    owner: vbguard
    logo: https://avatars.githubusercontent.com/u/3513401?v=4
    license: Apache-2.0
    repoEtag: '"d7a8e6773545cb9297b67b3a8fa3f4fcb972a410e73a4f3dc403b3731d6744d3"'
    repoLastModified: Fri, 25 Oct 2019 21:59:46 GMT
    readmeEtag: '"c705ba8e8b4ed06be0e371a31e13145bab69477d65de5b213f4c9f54fabc19f4"'
    readmeLastModified: Fri, 25 Oct 2019 21:59:33 GMT
  foundInMaster: true
  category:
    - Server
    - Parsers
- source: openapi3 tags
  repository: https://github.com/i-mo-k/openapigen
  v3: true
  repositoryMetadata:
    description: >-
      This is a sample of how to generate the OpenApi documentation for a
      RESTful web service implemented in Java 8
    created: "2020-05-15T07:46:33Z"
    updated: "2020-08-26T19:00:11Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: i-mo-k
    logo: https://avatars.githubusercontent.com/u/43334955?v=4
    repoEtag: '"6b743fa03f673a7c5c18a4458f18cc12be8fd07517d671b0ca05265e25f36d94"'
    repoLastModified: Wed, 26 Aug 2020 19:00:11 GMT
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/rpstreef/openapi-node-example
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIE5vZGUgY29kZSBleGFtcGxlCgojIEFib3V0OgoKVGhpcyByZXBvIGdvZXMgdG9nZXRoZXIgd2l0aCB0aGUgW09wZW5BUEkgVGVycmFmb3JtIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9ycHN0cmVlZi9vcGVuYXBpLXRmLWV4YW1wbGUpLgoKVGhpcyBqdXN0IGhvbGRzIHRoZSBOb2RlSlMgY29kZSB0aGF0IGdldHMgZGVwbG95ZWQgd2l0aCB0aGUgQ29kZVBpcGVsaW5lIHNldHVwLg==
    description: OpenAPI Node code example
    created: "2020-03-01T06:02:39Z"
    updated: "2020-08-27T05:57:07Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 2
    owner: rpstreef
    logo: https://avatars.githubusercontent.com/u/15830262?v=4
    license: Apache-2.0
    repoEtag: '"6856ef84f5c9ae0467cd892e9b0c6fe653a38bb4f5f221cfa705372ed969ec0e"'
    repoLastModified: Thu, 27 Aug 2020 05:57:07 GMT
    readmeEtag: '"0cf150e7502da5120ebb83b3d91e0d712db7ccefc3e12ad55a5d1a884392ed25"'
    readmeLastModified: Thu, 27 Aug 2020 05:57:04 GMT
  foundInMaster: true
  category:
    - Server
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/nicesi/openapi-ui-single-file
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBPcGVuQVBJIFVJCgoqIFNpbmdsZSBmaWxlCiogVWx0cmEgbGlnaHQtd2VpZ2h0CgpDYW4gdXNlIGl0IGluIDMgZGlmZmVyZW50IHdheXMKCjEuIEdvIHRvIGh0dHBzOi8vbmljZXNpLmNvbS9vcGVuYXBpLXVpIGFuZCBlbnRlciBvcGVuYXBpKHN3YWdnZXIpIGZpbGUgdXJsCjIuIGh0dHBzOi8vbmljZXNpLmNvbS9vcGVuYXBpLXVpP3VybD1odHRwczovL3BldHN0b3JlLnN3YWdnZXIuaW8vdjIvc3dhZ2dlci5qc29uCjMuIEVkaXQgdXJsIGZpZWxkIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWNlc2kvb3BlbmFwaS11aS1zaW5nbGUtZmlsZS9ibG9iL21hc3Rlci9pbmRleC5odG1sI0wzOSAuL3N3YWdnZXIuanNvbiAoZmlsZXBhdGgpIE9SIGh0dHBzOi8veW91ci1vcGVuYXBpLWZpbGUuanNvbiAoVVJMKQo=
    description: null
    created: "2020-08-29T20:13:23Z"
    updated: "2020-10-05T18:00:49Z"
    language: HTML
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: nicesi
    logo: https://avatars.githubusercontent.com/u/13571949?v=4
    license: MIT
    repoEtag: '"1da5ade94897f412f432fb0d2527b39b17e9911710e84fa0df2f58a8633c091f"'
    repoLastModified: Mon, 05 Oct 2020 18:00:49 GMT
    readmeEtag: '"d7d8e67c82a23e5e379961b9de478c4ae27fdd014c04dc51f6cf0dca2a295111"'
    readmeLastModified: Mon, 05 Oct 2020 18:00:23 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: openapi3 tags
  repository: https://github.com/aristat/http-server
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBIdHRwIFNlcnZlcgoKSXQncyBzbWFsbCBleGFtcGxlIGh0dHAgc2VydmVyIGJhc2VkIG9uIG9wZW5hcGkuIE5vdCBzdWl0YWJsZSBmb3IgbWljcm9zZXJ2aWNlcywgaXQncyBiZXR0ZXIgdG8gbG9vayB0byB0aGUgW2tpdF0oaHR0cHM6Ly9naXRodWIuY29tL2dvLWtpdC9raXQpIAoKIyBHZW5lcmF0ZSBhcGkuZ2VuLmdvCgpgYGAKb2FwaS1jb2RlZ2VuIC1wYWNrYWdlIGFwaSAtZ2VuZXJhdGUgdHlwZXMsY2hpLXNlcnZlcixzcGVjIC1vIGludGVybmFsL2FwcC9hcGkvYXBpLmdlbi5nbyBvcGVuYXBpLnlhbWwKYGBgCgojIFJ1bgoKYGBgCmdvIG1vZCBkb3dubG9hZApnbyBydW4gbWFpbi5nbyBzCmN1cmwgbG9jYWxob3N0OjMwMDAvYXBpL3YxL3Byb2R1Y3RzLzEKYGBgCg==
    description: Example http server
    created: "2021-03-27T19:16:25Z"
    updated: "2021-10-06T23:45:40Z"
    language: Go
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: Aristat
    logo: https://avatars.githubusercontent.com/u/4936284?v=4
    repoEtag: '"35b273d3e4029be535e5dc0b3d24a190c18f42e9708ec64cc76d94d877a26de7"'
    repoLastModified: Wed, 06 Oct 2021 23:45:40 GMT
    readmeEtag: '"d037213fdc94845e2efed0f723064c360b3103473d8366d886aa885ce86c51d7"'
    readmeLastModified: Sun, 28 Mar 2021 08:22:29 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/thavorath/oas
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyMgRXhwZXJpbWVudGFsIE9wZW5BUEkgMyBkb2N1bWVudGF0aW9uIGdlbmVyYXRvcgoKIyMjIFVzYWdlCgpTaW1wbHkgZ28gZ2V0IGFuZCBydW4gdGhpcyBpbiB5b3VyIHByb2plY3QgZm9sZGVyLiBJdCB3aWxsIGdlbmVyYXRlIGEgYXBpLnNwZWMgZmlsZS4gVXNlIHRoaXMgZmlsZSBpbiB5b3VyIFN3YWdnZXIzIFVJLgoKYGBgCmdvIGdldCBnaXRodWIuY29tL3RoYXZvcmF0aC9vYXMKZ28gaW5zdGFsbCBnaXRodWIuY29tL3RoYXZvcmF0aC9vYXMKY2Qgfi9nby9zcmMvZ2l0aHViLmNvbS90aGF2b3JhdGgvbXktcHJvamVjdApvYXMKYGBgCgo=
    description: An experimental OpenAPI 3 spec generator
    created: "2018-12-29T14:20:42Z"
    updated: "2019-01-23T05:56:11Z"
    language: Go
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: thavorath
    logo: https://avatars.githubusercontent.com/u/4705578?v=4
    license: MIT
    repoEtag: '"fb1e246a3e9a134f971a3c99e2e115286d689d40519ccedd7be35691a99b1e9f"'
    repoLastModified: Wed, 23 Jan 2019 05:56:11 GMT
    readmeEtag: '"a6fc3bc68e33af810c326bd1002a272cd28657f80ae4ee9eb97094b3ec4bbc68"'
    readmeLastModified: Wed, 23 Jan 2019 05:55:49 GMT
  foundInMaster: true
  category:
    - Sdk
    - Parsers
- source: openapi3 tags
  repository: https://github.com/teobler/openapi-swagger-demo
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBXaGF0IGZvcgoKdGhpcyBpcyBhIGRlbW8gYWJvdXQgT3BlbkFQSSAzLjAgdG8gcHJvdmlkZSBhIHNjaGVtYSB0byBnZW5lcmF0ZSBmcm9udC1lbmQgcmVxdWVzdCBjb2RlIGJ5IHVzaW5nIFtyZWR1eC1hY3Rpb24tZ2VuZXJhdG9yXShodHRwczovL2dpdGh1Yi5jb20vdGVvYmxlci9yZWR1eC1hY3Rpb24tZ2VuZXJhdG9yL3RyZWUvb3BlbmFwaS0zLjApCgojIyBTdGFydAoKMS4gY2xvbmUgY29kZSB0byB5b3VyIGxvY2FsCjIuIHJ1biBgLi9ncmFkbGV3IGJvb3QgcnVuYAozLiBhY2Nlc3MgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS1kb2NzIGluIHlvdXIgYnJvd3NlciB5b3UgY2FuIGdldCBPcGVuQVBJIDMuMCBzY2hlbWEKNC4gYWNjZXNzIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9zd2FnZ2VyLXVpL2luZGV4Lmh0bWw/Y29uZmlnVXJsPS9hcGktZG9jcy9zd2FnZ2VyLWNvbmZpZyBpbiB5b3VyIGJyb3dzZXIgeW91IGNhbiBzZWUgc3dhZ2dlciB2Mwo=
    description: >-
      demo about OpenAPI 3.0 to provide a schema to generate front-end request
      code
    created: "2020-03-26T08:10:01Z"
    updated: "2020-03-26T08:14:14Z"
    language: Java
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: teobler
    logo: https://avatars.githubusercontent.com/u/26424691?v=4
    repoEtag: '"c47fd89bb3a5ee0f33fd91e747002682d0e3352f6b97996b64730931c0059fba"'
    repoLastModified: Thu, 26 Mar 2020 08:14:14 GMT
    readmeEtag: '"f3981862e3ed87ee7ea9a5593d861352a1a349e06dccb7122eb15f22056ef0dc"'
    readmeLastModified: Thu, 26 Mar 2020 08:13:08 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/derberg/convert-swagger-to-openapi-playground
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBDb252ZXJ0IFN3YWdnZXIgdG8gT3BlbkFQSSBQbGF5Z3JvdW5kCgpTdGF5aW5nIHdpdGggU3dhZ2dlciAyLjAgaXMgbGlrZSBzdGF5aW5nIHdpdGggLi4uIHN0aWxsIHdvcmtpbmcgb24gYSBnb29kIGNvbXBhcmlzb24uIEFueXdheSwgeW91IHNob3VsZCBtaWdyYXRlIHRvIE9wZW5BUEksIGFuZCBteSBnb2FsIGhlcmUgaXMgbm90IHRvIGNvbnZpbmNlIHlvdSB3aHkuIEkgYXNzdW1lIHlvdSBhbHJlYWR5IG1hZGUgdGhpcyBzbWFydCBkZWNpc2lvbiwgYW5kIEkganVzdCB3YW50IHRvIG1ha2UgaXQgZWFzaWVyIGZvciB5b3UuCgpJIGRpZCBub3QgcGVyZm9ybSBhbnkgbW9yZSBpbi1kZXB0aCBpbnZlc3RpZ2F0aW9uIG9mIGF2YWlsYWJsZSB0b29scy4gVGhlcmUgYXJlIFt0b29sc10oaHR0cHM6Ly9naXRodWIuY29tL01lcm1hZGUvb2FzLWtpdCkgcHJvdmlkZWQgYnkgTWVybWFkZSBTb2Z0d2FyZS4gVG8gYmUgbW9yZSBzcGVjaWZpYywgYnkgW01pa2UgUmFscGhzb25dKGh0dHBzOi8vdHdpdHRlci5jb20vUGVybWl0dGVkU29jKSB0aGF0IGlzIGEgbWVtYmVyIG9mIFtUZWNobmljYWwgU3RlZXJpbmcgQ29tbWl0dGVlXShodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci9NQUlOVEFJTkVSUy5tZCkuIEZvciBtZSwgdGhpcyBpcyBhIGdvb2QgcmVhc29uIG5vdCB0byByZXNlYXJjaCBkaWZmZXJlbnQgdG9vbHMuCgotIFtDb252ZXJ0IGluIGEgQnJvd3Nlcl0oI2NvbnZlcnQtaW4tYS1icm93c2VyKQotIFtDb252ZXJ0IGluIGEgVGVybWluYWxdKCNjb252ZXJ0LWluLWEtdGVybWluYWwpCiAgICAtIFtOUE1dKCNucG0pCiAgICAtIFtOUFhdKCNucHgpCiAgICAtIFtEb2NrZXJdKCNkb2NrZXIpCi0gW0NvbnZlcnQgTXVsdGlwbGUgRmlsZXNdKCNjb252ZXJ0LW11bHRpcGxlLWZpbGVzKQoKIyMgQ29udmVydCBpbiBhIEJyb3dzZXIKCkNvbnZlcnNpb24gaW4gYSBicm93c2VyIGlzIGFkZHJlc3NlZCBieSBbS2luIExhbmVdKGh0dHBzOi8vdHdpdHRlci5jb20va2lubGFuZSkgYWthIEFQSSBFdmFuZ2VsaXN0IGluIFt0aGlzIHRocmVhZCBhbmQgdGhlIHZpZGVvXShodHRwczovL3R3aXR0ZXIuY29tL2FwaWV2YW5nZWxpc3Qvc3RhdHVzLzEyOTU1MDIwOTM2MjU2NDMwMDgpIHNvIHdhdGNoIGl0IGFuZCBnbyB0byBodHRwczovL21lcm1hZGUub3JnLnVrL29wZW5hcGktY29udmVydGVyCgojIyBDb252ZXJ0IGluIGEgVGVybWluYWwKClVzZSBbc3dhZ2dlcjJvcGVuYXBpXShodHRwczovL2dpdGh1Yi5jb20vTWVybWFkZS9vYXMta2l0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3N3YWdnZXIyb3BlbmFwaS9SRUFETUUubWQpIGFuZCBoYXZlIGZ1bjoKCiMjIyBOUE0KCjEuIEluc3RhbGwgdGhlIHRvb2wgYG5wbSBpbnN0YWxsIC1nIHN3YWdnZXIyb3BlbmFwaWAKMS4gUnVuIGNvbnZlcnNpb24gYHN3YWdnZXIyb3BlbmFwaSAtLXlhbWwgLS1vdXRmaWxlIG9wZW5hcGkueWFtbCBodHRwczovL3BldHN0b3JlLnN3YWdnZXIuaW8vdjIvc3dhZ2dlci5qc29uYAoKQW5kIHRoYXQgaXMgaXQuIENoZWNrIHlvdXIgbmV3IGBvcGVuYXBpLnlhbWxgIGZpbGUuCgojIyMgTlBYCgpbTlBYXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9ucHgpIGlzIHVzZWZ1bCBpbiBDSS9DRCB3aGVyZSB5b3UgZG8gbm90IHdhbnQgdG8gaW5zdGFsbCBgc3dhZ2dlcjJvcGVuYXBpYCBnbG9iYWxseS4KCmBucHggLXAgc3dhZ2dlcjJvcGVuYXBpIHN3YWdnZXIyb3BlbmFwaSAtLXlhbWwgLS1vdXRmaWxlIG9wZW5hcGkueWFtbCBodHRwczovL3BldHN0b3JlLnN3YWdnZXIuaW8vdjIvc3dhZ2dlci5qc29uYAoKIyMjIERvY2tlcgoKTlBNIGFuZCBOUFggaXMgbm90IHlvdXIgdGhpbmd5PyB1c2UgdGhlIERvY2tlciBpbWFnZSBwcm92aWRlZCBieSBNaWtlLgoKYGBgYmFzaAojdGhpcyBwYXJ0ICItdiAke1BXRH06L3Vzci9zcmMvYXBwIiBtb3VudHMgdGhlIGRpcmVjdG9yeSB3aGVyZSB5b3Ugc3RhcnRlZCAiZG9ja2VyIHJ1biIgaW5zaWRlIHRoZSBjb250YWluZXIgd2hlcmUgQ0xJIGlzIHRyaWdnZXJlZCwgdGhpcyB3YXkgZ2VuZXJhdGVkICJvcGVuYXBpLnlhbWwiIGdldHMgaW50byB5b3VyIGxvY2FsIGRyaXZlCmRvY2tlciBydW4gLS1ybSAtdiAke1BXRH06L3Vzci9zcmMvYXBwIG1lcm1hZGUvc3dhZ2dlcjJvcGVuYXBpIHN3YWdnZXIyb3BlbmFwaSAtLXlhbWwgLS1vdXRmaWxlIG9wZW5hcGkueWFtbCBodHRwczovL3BldHN0b3JlLnN3YWdnZXIuaW8vdjIvc3dhZ2dlci5qc29uCmBgYAoKIyMgQ29udmVydCBNdWx0aXBsZSBGaWxlcwoKWW91IG1vc3QgcHJvYmFibHkgaGF2ZSBtYW55IHNlcnZpY2VzLCBhbmQgeW91IG5lZWQgdG8gY29udmVydCBtYW55IFN3YWdnZXIgZmlsZXMsIGFuZCB5b3UgZG8gbm90IHdhbnQgdG8gZG8gaXQgb25lIGJ5IG9uZSBidXQgYWxsIGF0IG9uY2Ugd2l0aCBhIHNjcmlwdC4gWW91IGNhbiB1c2UgQmFzaCBhbmQgd3JpdGUgc29tZSBzY3JpcHQgdGhhdCBydW5zIHRoZSBDTEksIGJ1dCB3cml0aW5nIEJhc2ggc2NyaXB0cyBpcyBsaWtlIC4uLiB5ZWFoLCBvbmUgZGF5IEknbGwgZmluZCBhIGdvb2QgY29tcGFyaXNvbi4KCkp1c3QgdXNlIGBzd2FnZ2VyMm9wZW5hcGlgIGFzIGEgbGlicmFyeS4gSW4gYGNvbnZlcnRtdWx0aXBsZWAgZGlyZWN0b3J5LCB5b3UgY2FuIGZpbmQgYSBbc2FtcGxlIGNvZGVdKGNvbnZlcnRtdWx0aXBsZS9pbmRleC5qcykgdGhhdCB5b3UgY2FuIGVhc2lseSBlZGl0IGZvciB5b3VyIG5lZWRzLiBJdHMgY29kZSBoYXMgcHJvcGVyIGNvbW1lbnRzIHRoYXQgd2lsbCBoZWxwIHlvdSB1bmRlcnN0YW5kIHdoYXQgcGFydHMgeW91IG1pZ2h0IGNoYW5nZSBpbiBjYXNlIHlvdSBoYXZlIGRpZmZlcmVudCBkaXJlY3Rvcnkgc3RydWN0dXJlIG9yIGZpbGVuYW1lcyB0aGFuIHRoZSBvbmVzIHVzZWQgaW4gdGhlIHNhbXBsZQoKVG8gcGxheSB3aXRoIHRoZSBleGFtcGxlLCBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgc3RlcHM6CjEuIGBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2RlcmJlcmcvY29udmVydC1zd2FnZ2VyLXRvLW9wZW5hcGktcGxheWdyb3VuZC5naXRgCjEuIGBjZCBjb252ZXJ0LXN3YWdnZXItdG8tb3BlbmFwaS1wbGF5Z3JvdW5kL2NvbnZlcnRtdWx0aXBsZWAKMS4gYG5wbSBpbnN0YWxsYAoxLiBgbnBtIHN0YXJ0YAo=
    description: >-
      Some instructions and sample how to convert Swagger 2.0 files to OpenAPI
      3.0
    created: "2020-08-18T10:58:26Z"
    updated: "2020-08-18T13:01:19Z"
    language: JavaScript
    archived: false
    stars: 0
    watchers: 0
    forks: 0
    owner: derberg
    logo: https://avatars.githubusercontent.com/u/6995927?v=4
    repoEtag: '"21b47cf221e54dceb247a73ba588a0ef29fd71dadabcc0c41a446d35da8063ea"'
    repoLastModified: Tue, 18 Aug 2020 13:01:19 GMT
    readmeEtag: '"50736d9df9a7072e5b9bc780b862039eb7394f0893328a8ee007277e4e4cbd00"'
    readmeLastModified: Tue, 18 Aug 2020 13:01:09 GMT
  foundInMaster: true
  category:
    - Description Validators
    - Parsers
- source: openapi3 tags
  repository: https://github.com/networknt/openapi-parser
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBvcGVuYXBpLXBhcnNlcgoKQSBsaWdodC13ZWlnaHQsIGZhc3QgT3BlbkFQSSAzLjAgcGFyc2VyIGFuZCB2YWxpZGF0b3Igd2l0aCBtaW5pbXVtIHRoaXJkIHBhcnR5IGRlcGVuZGVuY2llcy4gCgpbU3RhY2sgT3ZlcmZsb3ddKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zL3RhZ2dlZC9saWdodC00aikgfApbR29vZ2xlIEdyb3VwXShodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2ZvcnVtLyMhZm9ydW0vbGlnaHQtNGopIHwKW0dpdHRlciBDaGF0XShodHRwczovL2dpdHRlci5pbS9uZXR3b3JrbnQvbGlnaHQtcmVzdC00aikgfApbU3VicmVkZGl0XShodHRwczovL3d3dy5yZWRkaXQuY29tL3IvbGlnaHRhcGkvKSB8CltZb3V0dWJlIENoYW5uZWxdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNIQ1JNV0pWWHc4aUI3ekt4RjU1Qnl3KSB8CltEb2N1bWVudGF0aW9uXShodHRwczovL2RvYy5uZXR3b3JrbnQuY29tL2xpYnJhcnkvb3BlbmFwaS1wYXJzZXIvKSB8CltDb250cmlidXRpb24gR3VpZGVdKGh0dHBzOi8vZG9jLm5ldHdvcmtudC5jb20vY29udHJpYnV0ZS8pIHwKCkl0IGlzIGJhc2VkIG9uIHRoZSBnZW5lcmF0ZWQgY29kZSBmcm9tIFtLYWlaZW4gT3BlbkFQSSBQYXJzZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9SZXByZVplbi9LYWlaZW4tT3BlbkFwaS1QYXJzZXIpIHdpdGhvdXQKZGVwZW5kZW5jeSBvbiBqYXZhcGFyc2VyLWNvcmUsIGd1YXZhLCBjb21tb25zLWNsaSwgY29tbW9ucy1pbywgamF2YXgubWFpbCBhbmQgZ3VpY2UuIAoKIyMjIExpY2Vuc2UKClRoZSBPcGVuQVBJIFBhcnNlciBpcyBwcm92aWRlZCB1bmRlciB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSAxLjAgZm9sbG93aW5nIHRoZSBwYXJlbnQgW0thaVplbiBPcGVuQVBJIFBhcnNlcl0oaHR0cHM6Ly9naXRodWIuY29tL1JlcHJlWmVuL0thaVplbi1PcGVuQXBpLVBhcnNlcikK
    description: >-
      A light-weight, fast OpenAPI 3.0 parser and validator with minimum third
      party dependencies
    created: "2017-11-13T02:47:14Z"
    updated: "2022-01-04T16:40:21Z"
    language: Java
    archived: false
    stars: 5
    watchers: 5
    forks: 3
    owner: networknt
    logo: https://avatars.githubusercontent.com/u/8740739?v=4
    license: EPL-1.0
    repoEtag: '"8e45f689322298f4d33d0b8cf84c655d5113daccf9e794908b3b070aaf10d75f"'
    repoLastModified: Tue, 04 Jan 2022 16:40:21 GMT
    readmeEtag: '"e58c2f536f01805c91c946d19a3062204e2ae879945d1f1a59ff61f663eccd63"'
    readmeLastModified: Mon, 28 Feb 2022 02:10:45 GMT
  foundInMaster: true
  category:
    - Low-level Tooling
    - Parsers
- source: https://openapi.tools/
  name: Stoplight Docs
  category: documentation
  link: https://stoplight.io/docs/
  language: SaaS
  source_description: >-
    Create beautiful, customizable, interactive API documentation generated from
    OpenAPI, integrated with Stoplight Studio.
  v2: true
  v3: true
  v3_1: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/upymoe/spec
  v3: true
  repositoryMetadata:
    base64Readme: >-
      T25saW5lIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2LnVweS5tb2UvYXBpL2RvY3M8YnI+CkpTT04gZm9ybWF0OiBodHRwczovL2Rldi51cHkubW9lL2FwaS9kb2NzLmpzb24KCiMjIyAjIEdlbmVyYXRlIGNsaWVudCdzIGNvZGUKR2VuZXJhdGUgdGhlIGNvZGUgaGVyZTogaHR0cHM6Ly9lZGl0b3Iuc3dhZ2dlci5pby8uCgpDb3B5IGFuZCBwYXN0ZSB0aGUgY29udGVudCBvZiBzd2FnZ2VyLmpzb24gZmlsZSBhbmQgZ2VuZXJhdGUgY2xpZW50IGNvZGUgZnJvbSB0aGVyZS4K
    readmeEtag: '"248c5afe027b33dce092ae3843b803ce842c9e18f6f40cd596389899ba886e7f"'
    readmeLastModified: Wed, 09 Feb 2022 09:17:06 GMT
    description: API specification for the front-end powered by Swagger OpenAPI
    created: "2022-02-04T09:17:16Z"
    updated: "2022-02-09T09:13:53Z"
    language: null
    archived: false
    stars: 1
    watchers: 1
    forks: 0
    owner: upymoe
    logo: https://avatars.githubusercontent.com/u/87591963?v=4
    repoEtag: '"769a8d9a9879cc9fd9cfeb5da42cac5765c52691e46fee190f5fd0bf463aab78"'
    repoLastModified: Wed, 09 Feb 2022 09:13:53 GMT
  foundInMaster: true
  category:
    - Sdk
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/sagar1711/sse
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/alimahmoud80/ecommerceapidocs
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: https://openapi.tools/
  name: kin-openapi
  category:
    - Parsers
    - Data Validators
  repository: https://github.com/jban332/kin-openapi
  language: Go
  source_description: A Go library for handling OpenAPI 3.0 specifications
  v3: true
  repositoryMetadata:
    base64Readme: >-
      
    readmeEtag: '"12d0d2022fa2029609d62cda163a9f12ab8693cda29d0363ff1c335c2a10922a"'
    readmeLastModified: Sun, 03 Apr 2022 13:24:54 GMT
    description: >-
      OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting,
      validation, and more)
    created: "2017-06-11T20:12:06Z"
    updated: "2022-04-27T17:01:08Z"
    language: Go
    archived: false
    stars: 1340
    watchers: 1340
    forks: 259
    owner: getkin
    logo: https://avatars.githubusercontent.com/u/40365715?v=4
    license: MIT
    repoEtag: '"b3b83587621406fee6639573421287a42b0267070b2cd7e57d3374becc47c7c7"'
    repoLastModified: Wed, 27 Apr 2022 17:01:08 GMT
  foundInMaster: true
- source: openapi3 tags
  repository: https://github.com/bchen04/springboot-swagger-rest-api
  v3: true
  repositoryMetadata:
    base64Readme: >-
      IyBTYW1wbGUgU3ByaW5nIEJvb3QgKDIuMy4yKSBSRVNUZnVsIEFQSSB3aXRoIFN3YWdnZXIgKE9wZW5BUEkgMykKCldoaWxlIHNlYXJjaGluZyB0aHJvdWdoIEdpdEh1YiBmb3Igc29tZSBib2lsZXJwbGF0ZSBjb2RlIG9uIGhvdyB0byBzZXR1cCBhIFNwcmluZyBCb290IHByb2plY3Qgd2l0aCBTd2FnZ2VyLCBJIGZvdW5kIGl0IHF1aXRlIGRpZmZpY3VsdCB0byBmaW5kIGEgd29ya2luZyBleGFtcGxlIHdpdGggYSBtb3JlIHJlY2VudCB2ZXJzaW9uIG9mIFNwcmluZyBCb290IGFuZCBKYXZhIChpLmUuIDE0KS4gQW55d2F5cywgSSB0aG91Z2h0IEnigJlkIGNyZWF0ZSBteSBvd24gYW5kIHNoYXJlIHdpdGggZXZlcnlvbmUuIFRoaXMgaXMgZm9yIGFueW9uZSB0aGF0IG5lZWRzIHNvbWUgcXVpY2sgYm9pbGVycGxhdGUgY29kZSB0byBzZXR1cCB0aGVpciBuZXcgQVBJIHByb2plY3QuCgojIyBXaGF0IFlvdSBOZWVkCgoqIEphdmEgMTQKKiBNYXZlbiAzLjYuMCsKCiMjIEJ1aWxkIGFuZCBSdW4gdGhlIFNhbXBsZQoKWW91IGNhbiBpbXBvcnQgdGhlIGNvZGUgc3RyYWlnaHQgaW50byB5b3VyIHByZWZlcnJlZCBJREUgb3IgcnVuIHRoZSBzYW1wbGUgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kIChpbiB0aGUgcm9vdCBwcm9qZWN0IGZvbGRlcikuCgpgYGB6c2gKJCAgbXZuIHNwcmluZy1ib290OnJ1bgpgYGAKQWZ0ZXIgdGhlIGFwcGxpY2F0aW9uIHJ1bnMsIG5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcwMDEvc3dhZ2dlci11aS9pbmRleC5odG1sP2NvbmZpZ1VybD0vYXBpLWRvY3Mvc3dhZ2dlci1jb25maWdgIGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gYWNjZXNzIHRoZSBTd2FnZ2VyIFVJIHBvcnRhbC4K
    readmeEtag: '"dacd0af88a009513e2a018484d5dffaaa60e7a8225eebcc176d2b6e3c7bad92b"'
    readmeLastModified: Tue, 28 Jul 2020 00:13:07 GMT
    description: >-
      A sample RESTful API using Spring Boot (2.3.2) and Java 14 with Swagger
      enabled.
    created: "2020-07-21T23:28:43Z"
    updated: "2022-03-15T16:04:25Z"
    language: Java
    archived: false
    stars: 5
    watchers: 5
    forks: 4
    owner: buzzingben
    logo: https://avatars.githubusercontent.com/u/41641688?v=4
    license: MIT
    repoEtag: '"dd642298f1344746bb2e09e9111a68ea7f5bdeeab7f6b4a8c9030324b216cf96"'
    repoLastModified: Tue, 15 Mar 2022 16:04:25 GMT
  foundInMaster: true
  category:
    - Code Generators
    - Server Implementations
- source: openapi3 tags
  repository: https://github.com/venicyus/aws-lambda-sf
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/inigomarquinez/howto-validate-rest-using-openapi
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/i4de/wa-craft
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/shocklateboy92/erabikata
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/enalk-com/gate
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/dansharisan/larapiauth
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source: openapi3 tags
  repository: https://github.com/i4de/rswag
  v3: true
  repositoryMetadata:
    notFound: true
  foundInMaster: true
  readme: null
- source:
    - openapi3 tags
    - openapi31 tags
  repository: https://github.com/andrewwalsh/openapi-devtools
  v3: true
  id: 34445bbc3e815731b195a393a2a9d3f4
  repositoryMetadata:
    base64Readme: >-
      PGEgbmFtZT0icmVhZG1lLXRvcCI+PC9hPgoKWyFbTUlUIExpY2Vuc2VdW2xpY2Vuc2Utc2hpZWxkXV1bbGljZW5zZS11cmxdClshW0Rvd25sb2FkIGluIHRoZSBDaHJvbWUgV2ViIFN0b3JlXVtjaHJvbWUtc2hpZWxkXV1bY2hyb21lLXVybF0KCjwhLS0gUFJPSkVDVCBMT0dPIC0tPgo8YnIgLz4KPGRpdiBhbGlnbj0iY2VudGVyIj4KICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vQW5kcmV3V2Fsc2gvb3BlbmFwaS1kZXZ0b29scyI+CiAgICA8aW1nIHNyYz0icmVzb3VyY2VzL2xvZ28uc3ZnIiBhbHQ9Ik9wZW4gQVBJIGRldiB0b29scyIgd2lkdGg9IjMwMCIgaGVpZ2h0PSIyNTAiPgogIDwvYT4KCgogIDxwIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJtYXgtd2lkdGg6IDYwMHB4OyI+CiAgICBFZmZvcnRsZXNzbHkgZGlzY292ZXIgQVBJIGJlaGF2aW91ciB3aXRoIGEgQ2hyb21lIGV4dGVuc2lvbiB0aGF0IGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVzIE9wZW5BUEkgc3BlY2lmaWNhdGlvbnMgaW4gcmVhbCB0aW1lIGZvciBhbnkgYXBwIG9yIHdlYnNpdGUuCiAgICA8YnIgLz4KICAgIDxiciAvPgogICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0FuZHJld1dhbHNoL29wZW5hcGktZGV2dG9vbHMvaXNzdWVzIj5SZXBvcnQgQnVnPC9hPgogICAgwrcKICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9BbmRyZXdXYWxzaC9vcGVuYXBpLWRldnRvb2xzL2lzc3VlcyI+UmVxdWVzdCBGZWF0dXJlPC9hPgogICAgwrcKICAgIDxhIGhyZWY9Imh0dHBzOi8vYXdhbHNoLmlvL3Bvc3RzL29wZW5hcGktZGV2dG9vbHMvIj5SZWFkIE1vcmU8L2E+CiAgPC9wPgo8L2Rpdj4KCiMjIEFib3V0IFRoZSBQcm9qZWN0Cgo8cCBhbGlnbj0iY2VudGVyIiB3aWR0aD0iMTAwJSI+CiAgICA8aW1nIHdpZHRoPSI4MCUiIHNyYz0icmVzb3VyY2VzL2RlbW8uZ2lmIj4KPC9wPgoKT3BlbkFQSSBEZXZUb29scyBpcyBhIENocm9tZSBleHRlbnNpb24gdGhhdCBnZW5lcmF0ZXMgT3BlbkFQSSBzcGVjaWZpY2F0aW9ucyBpbiByZWFsIHRpbWUgZnJvbSBuZXR3b3JrIHJlcXVlc3RzLiBPbmNlIGluc3RhbGxlZCBpdCBhZGRzIGEgbmV3IHRhYiB0byBDaHJvbWUgRGV2VG9vbHMgY2FsbGVkIGBPcGVuQVBJYC4gV2hpbGUgdGhlIHRvb2wgaXMgb3BlbiBpdCBhdXRvbWF0aWNhbGx5IGNvbnZlcnRzIG5ldHdvcmsgcmVxdWVzdHMgaW50byBhIHNwZWNpZmljYXRpb24uCgoqRmVhdHVyZXMqOgotIEluc3RhbnRseSBnZW5lcmF0ZSBhbiBPcGVuQVBJIDMuMSBzcGVjaWZpY2F0aW9uIGZvciBhbnkgd2Vic2l0ZSBvciBhcHBsaWNhdGlvbiBqdXN0IGJ5IHVzaW5nIGl0Ci0gQXV0b21hdGljYWxseSBtZXJnZXMgbmV3IHJlcXVlc3QgJiByZXNwb25zZSBoZWFkZXJzLCBib2RpZXMsIGFuZCBxdWVyeSBwYXJhbWV0ZXJzIHBlciBlbmRwb2ludAotIENsaWNrIG9uIGEgW3BhdGggcGFyYW1ldGVyXShodHRwczovL3d3dy5hYnN0cmFjdGFwaS5jb20vYXBpLWdsb3NzYXJ5L3BhdGgtcGFyYW1ldGVycykgYW5kIHRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IG1lcmdlIGV4aXN0aW5nIGFuZCBmdXR1cmUgbWF0Y2hpbmcgcmVxdWVzdHMKLSBWaWV3IHRoZSBzcGVjaWZpY2F0aW9uIGluc2lkZSB0aGUgdG9vbCB1c2luZyBbUmVkb2NdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JlZG9jKSBhbmQgZG93bmxvYWQgd2l0aCBhIGNsaWNrCi0gRXhwb3J0IGFuZCBzYXZlIGEgc2Vzc2lvbiBhdCBhbnkgdGltZSwgb3Igc2hhcmUgaXQgd2l0aCBvdGhlcnMKCjxwIGFsaWduPSJyaWdodCI+KDxhIGhyZWY9IiNyZWFkbWUtdG9wIj5iYWNrIHRvIHRvcDwvYT4pPC9wPgoKIyMgSW5zdGFsbGF0aW9uCgo8cCBhbGlnbj0iY2VudGVyIiB3aWR0aD0iMTAwJSI+CiAgICA8aW1nIHdpZHRoPSI4MCUiIHNyYz0icmVzb3VyY2VzL2RlbW8taW1nLnBuZyI+CjwvcD4KCltEb3dubG9hZCB0aGUgZXh0ZW5zaW9uIGluIHRoZSBDaHJvbWUgV2ViIFN0b3JlXShodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC9vcGVuYXBpLWRldnRvb2xzL2plbGdobmRva25rbGdhYmpnYWVwcGpob21ta2ttZGlpKS4KCk90aGVyd2lzZSwgdG8gaW5zdGFsbCBtYW51YWxseToKICAtIFtEb3dubG9hZCBhbmQgZXh0cmFjdCB0aGUgZGlzdC56aXAgZmlsZSBpbiB0aGUgbGF0ZXN0IHJlbGVhc2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9BbmRyZXdXYWxzaC9vcGVuYXBpLWRldnRvb2xzL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9kaXN0LnppcCkKICAtIEluIENocm9tZSwgbmF2aWdhdGUgdG8gYGNocm9tZTovL2V4dGVuc2lvbnNgCiAgLSBJbiB0aGUgdG9wIHJpZ2h0IGVuYWJsZSB0aGUgYERldmVsb3BlciBtb2RlYCB0b2dnbGUKICAtIEluIHRoZSB0b3AgbGVmdCBjbGljayBgTG9hZCB1bnBhY2tlZGAgYW5kIHNlbGVjdCB0aGUgZXh0cmFjdGVkIGBkaXN0YCBkaXJlY3RvcnkKICAtIE9wZW4gYSBuZXcgdGFiIGFuZCB0aGVuIHNlbGVjdCBgT3BlbkFQSWAgaW4gdGhlIGRldmVsb3BlciB0b29scyAob3BlbiB3aXRoIGBjbWQraWAgb3IgYGN0cmwraWApCgo8cCBhbGlnbj0icmlnaHQiPig8YSBocmVmPSIjcmVhZG1lLXRvcCI+YmFjayB0byB0b3A8L2E+KTwvcD4KCiMjIFVzYWdlCgpUaGUgc3BlY2lmaWNhdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGUgYmFzZWQgb24gSlNPTiByZXF1ZXN0cyB0aGF0IGZpcmUgYXMgeW91IGJyb3dzZSB0aGUgd2ViLiBJbiB0aGUgc2V0dGluZ3MgbWVudSB5b3UgY2FuIGZpbHRlciBob3N0cyBhbmQgcGFyYW1ldGVyaXNlIHBhdGhzIGluIFVSTHMuIE9uY2UgeW91IGRvIHNvIGFsbCBtYXRjaGluZyBleGlzdGluZyBhbmQgZnV0dXJlIHJlcXVlc3RzIHRvIHRoYXQgZW5kcG9pbnQgd2lsbCBiZSBtZXJnZWQuIFRoaXMgcHJvY2VzcyBpcyBpcnJldmVyc2libGUsIGJ1dCB5b3UgY2FuIGNsZWFyIHRoZSBzcGVjaWZpY2F0aW9uIGFuZCByZXN0YXJ0IGF0IGFueSB0aW1lLgoKV2hlbiB0aGUgc2FtZSBlbmRwb2ludCByZXNwb25kcyB3aXRoIGRpZmZlcmVudCBkYXRhLCBzdWNoIGFzIGEgdmFsdWUgdGhhdCBpcyBzb21ldGltZXMgYSBzdHJpbmcgYW5kIHNvbWV0aW1lcyBudWxsLCB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgdGhhdCB2YWx1ZSB3aWxsIGJlICplaXRoZXIqIHN0cmluZyBvciBudWxsLiBBbGwgaW5mb3JtYXRpb24gaXMgYWNjb3VudGVkIGZvciBpbiB0aGUgZmluYWwgc3BlY2lmaWNhdGlvbi4gSWYgeW91IHNlZSBzb21ldGhpbmcgbWlzc2luZyBmcm9tIGEgcmVxdWVzdCwgdHJpZ2dlciBhIHJlcXVlc3QgdGhhdCBjb250YWlucyB0aGUgbWlzc2luZyBpbmZvcm1hdGlvbi4KClRoZSBzZXR0aW5ncyBtZW51IGNvbnRhaW5zIHNldmVyYWwgb3B0aW9ucy4gSGVyZSB5b3UgY2FuIGVuYWJsZSByZWFsIGV4YW1wbGVzIGluIHRoZSBzcGVjaWZpY2F0aW9uLiBZb3UgY2FuIGFsc28gZXhwb3J0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhcHAgYXMgYSBzdHJpbmcsIHNoYXJlIG9yIHN0b3JlIGl0LCBhbmQgaW1wb3J0IGl0IGxhdGVyLgoKPHAgYWxpZ249InJpZ2h0Ij4oPGEgaHJlZj0iI3JlYWRtZS10b3AiPmJhY2sgdG8gdG9wPC9hPik8L3A+CgojIyBXaGF0IGlzIE9wZW5BUEk/CgpBbiBbT3BlbkFQSV0oaHR0cHM6Ly93d3cub3BlbmFwaXMub3JnLykgc3BlY2lmaWNhdGlvbiBpcyBhIGRlc2NyaXB0aW9uIG9mIHdoYXQgYW4gQVBJIGV4cGVjdHMgdG8gcmVjZWl2ZSBhbmQgd2hhdCBpdCB3aWxsIHJlc3BvbmQgd2l0aC4gSXQgaXMgZ292ZXJuZWQgYnkgdGhlIE9wZW5BUEkgSW5pdGlhdGl2ZSBhbmQgdGhlIExpbnV4IEZvdW5kYXRpb24uIE9wZW5BUEkgc3BlY2lmaWNhdGlvbnMgYXJlIHRoZSBtb2Rlcm4gc3RhbmRhcmQgZm9yIFJFU1RmdWwgQVBJcywgYW5kIHN5c3RlbXMgdGhhdCBoYXZlIHRoZW0gYXJlIGZhciBlYXNpZXIgdG8gd29yayB3aXRoLgoKPHAgYWxpZ249InJpZ2h0Ij4oPGEgaHJlZj0iI3JlYWRtZS10b3AiPmJhY2sgdG8gdG9wPC9hPik8L3A+CgojIyBDb250cmlidXRpbmcKClRvIGRldmVsb3AgdGhlIHByb2plY3Q6Ci0gYG5wbSBpbnN0YWxsYAotIGBucG0gcnVuIGJ1aWxkYAotIE5hdmlnYXRlIHRvIGBjaHJvbWU6Ly9leHRlbnNpb25zYAotIEluIHRoZSB0b3AgcmlnaHQgZW5hYmxlIHRoZSBgRGV2ZWxvcGVyIG1vZGVgIHRvZ2dsZQotIEluIHRoZSB0b3AgbGVmdCBjbGljayBgTG9hZCB1bnBhY2tlZGAgYW5kIHNlbGVjdCB0aGUgYGRpc3RgIGRpcmVjdG9yeQotIFlvdSBzaG91bGQgbm93IHNlZSB0aGUgdG9vbCBpbiBDaHJvbWUgRGV2VG9vbHMuIFlvdSBjYW4gaW50ZXJhY3QgaXQgd2l0aCBsaWtlIGEgcmVndWxhciBwYWdlLCBpbmNsdWRpbmcgaW5zcGVjdGlvbiBvZiB0aGUgUmVhY3QgYXBwCi0gW0V4dGVuc2lvbnMgUmVsb2FkZXJdKGh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL2V4dGVuc2lvbnMtcmVsb2FkZXIvZmltZ2ZlZGFmZWFkbGllaWFiZGVlYW9kbmRubGJoaWQpIGlzIHN1Z2dlc3RlZCB0byB1cGRhdGUgdGhlIHRvb2wgYWZ0ZXIgcnVubmluZyBgbnBtIHJ1biBidWlsZGAgYW5kIHVwZGF0aW5nIHRoZSBgZGlzdGAgZGlyZWN0b3J5IAoKPHAgYWxpZ249InJpZ2h0Ij4oPGEgaHJlZj0iI3JlYWRtZS10b3AiPmJhY2sgdG8gdG9wPC9hPik8L3A+Cgo8IS0tIE1BUktET1dOIExJTktTICYgSU1BR0VTIC0tPgo8IS0tIGh0dHBzOi8vd3d3Lm1hcmtkb3duZ3VpZGUub3JnL2Jhc2ljLXN5bnRheC8jcmVmZXJlbmNlLXN0eWxlLWxpbmtzIC0tPgpbbGljZW5zZS11cmxdOiBodHRwczovL2dpdGh1Yi5jb20vQW5kcmV3V2Fsc2gvb3BlbmFwaS1kZXZ0b29scy9ibG9iL21haW4vTElDRU5TRS50eHQKW2xpY2Vuc2Utc2hpZWxkXTogaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvbGljZW5zZS9BbmRyZXdXYWxzaC9vcGVuYXBpLWRldnRvb2xzLnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlCltjaHJvbWUtdXJsXTogaHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvb3BlbmFwaS1kZXZ0b29scy9qZWxnaG5kb2tua2xnYWJqZ2FlcHBqaG9tbWtrbWRpaQpbY2hyb21lLXNoaWVsZF06IGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvR29vZ2xlJTIwQ2hyb21lLTQyODVGND9zdHlsZT1mb3ItdGhlLWJhZGdlJmxvZ289R29vZ2xlQ2hyb21lJmxvZ29Db2xvcj13aGl0ZQ==
    readmeEtag: '"727e7e191d55ad928d06e16821cb35dc2f543c40eebe88e3a02ee589e7b4797f"'
    readmeLastModified: Mon, 06 Nov 2023 08:17:36 GMT
    repositoryId: 709571808
    description: Chrome extension that generates API specs for any app or website
    created: '2023-10-25T00:36:06Z'
    updated: '2023-12-11T21:05:08Z'
    language: TypeScript
    archived: false
    stars: 3540
    watchers: 18
    forks: 57
    owner: AndrewWalsh
    logo: https://avatars.githubusercontent.com/u/15863952?v=4
    license: MIT
    repoEtag: '"2f1c3194eb69e98e62a0b4e721cc2c2db039f6afeecf16bb91b946dc131c8258"'
    repoLastModified: Mon, 11 Dec 2023 21:05:08 GMT
  category: Auto Generators
  categoryByRequestIndicator: true
  foundInMaster: true
  v3_1: true